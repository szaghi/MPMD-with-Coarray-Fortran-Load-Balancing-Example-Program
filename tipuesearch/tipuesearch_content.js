var tipuesearch = {"pages":[{"text":"MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program Developer Info Michael Siehl","tags":"","loc":"index.html","title":" MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf MODULE OOOPinma_admInitialManager !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPinma !******************************************************** ! Abstract Data Type (ADT):         OOOPinma_adtInitialManager ! Abstract Data Type Module (adm):  OOOPinma_admInitialManager.f90 !******************************************************** ! Purpose:                    InitialManager-Object ! Language:                   mainly Fortran 95 with Fortran 2008 coarrays ! Programmer:                 Michael Siehl ! Date:                       January 2016 !******************************************************** ! Naming Conventions: ! !  for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !  for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !  for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !  other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** !___________________________________________________________ USE OOOGglob_Globals USE OOOEerro_admError USE OOOPstpa_admStartPath ! load the start path from file ! USE OOOPinmc_admInitialManager_CA !___________________________________________________________ IMPLICIT NONE !___________________________________________________________ PRIVATE !___________________________________________________________ ! !***************************** ! access routines for scalar * ! and static array members:  * !***************************** PUBLIC :: OOOPinmaS_intNumberOfTeamManagers , OOOPinmaG_intNumberOfTeamManagers ! !********************************** ! access routines for dynamic     * ! array and derived type members: * !********************************** ! !**************************** ! access routines for the   * ! coarray wrapper member:   * !**************************** ! !******************* ! ADT-Management: ** !******************* PUBLIC :: OOOPinma_StructureConstructor !___________________________________________________________ ! !******************** !** Program Logic: ** !******************** PUBLIC :: OOOPinma_Start PRIVATE :: IIinma_LoadTeamManagers , IIinma_ActivateTeamManagerImage !___________________________________________________________ ! !********************* !** Error Handling: ** !********************* PRIVATE :: IIinma_ErrorHandler !___________________________________________________________ ! !********************* !**  Enumerations:  ** !********************* !___________________________________________________________ ! !******************************************************** !*** Abstract Data Type Declaration: ******************** !******************************************************** TYPE , PUBLIC :: OOOPinma_adtInitialManager PRIVATE !**** INTEGER ( OOOGglob_kint ) :: m_intNumberOfTeamManagers = 0 !***** array containing the image numbers of the TeamManager images: INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ) :: mA_intTeamManagerImages99 !***** array containing the file names of the TeamMembers files for each TeamManager: CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ) :: mA_chrTeamMembersFiles99 !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error-Collection ! END TYPE OOOPinma_adtInitialManager !__________________________________________________________ ! !**************************************************** !***  Corresponding Local Object Declaration:  ****** !**************************************************** !*** TYPE ( OOOPinma_adtInitialManager ), PUBLIC , SAVE :: OOOPinmaInitialManager_1 ! !___________________________________________________________ CONTAINS !################################################################################################## !################################################################################################## !################################################################################################## !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !__________________________________________________________ ! SUBROUTINE OOOPinmaS_intNumberOfTeamManagers ( Object , intNumberOfTeamManagers ) TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intNumberOfTeamManagers INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures ( \"OOOPinmaS_intNumberOfTeamManagers\" ) ! IF ( intNumberOfTeamManagers > OOOGglob_TeamManagers_UpperBound ) THEN CALL IIinma_ErrorHandler ( Object , \"to many elements\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object % m_intNumberOfTeamManagers = intNumberOfTeamManagers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmaS_intNumberOfTeamManagers !********** SUBROUTINE OOOPinmaG_intNumberOfTeamManagers ( Object , intNumberOfTeamManagers ) TYPE ( OOOPinma_adtInitialManager ), INTENT ( IN ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intNumberOfTeamManagers CALL OOOGglob_subSetProcedures ( \"OOOPinmaG_intNumberOfTeamManagers\" ) intNumberOfTeamManagers = Object % m_intNumberOfTeamManagers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmaG_intNumberOfTeamManagers !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !**************************** ! access routines for the   * ! coarray wrapper member:   * !**************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !******************* ! ADT-Management:  * !******************* !___________________________________________________________ SUBROUTINE OOOPinma_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPinma_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinma_StructureConstructor !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !******************* ! Program Logic:   * !******************* !___________________________________________________________ SUBROUTINE OOOPinma_Start ( Object ) USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object ! INTEGER ( OOOGglob_kint ) :: intCounter = 0 ! CALL OOOGglob_subSetProcedures ( \"OOOPinma_Start\" ) ! CALL OOOPinma_StructureConstructor ( Object ) ! !******* CALL IIinma_LoadTeamManagers ( Object ) ! from TeamManagers.txt ! ! activate the TeamManagers on the (remote) images as given by TeamManagers.txt: DO intCounter = 1 , Object % m_intNumberOfTeamManagers ! (Object % mA_intTeamManagerImages99(intCounter) gives the (remote) image number) ! (Object % mA_chrTeamMembersFiles99(intCounter) gives the name of the file, !       containing the TeamManager's number of TeamMembers as well as the TeamMembers !       image numbers) : CALL IIinma_ActivateTeamManagerImage ( Object , Object % mA_intTeamManagerImages99 ( intCounter ), & Object % mA_chrTeamMembersFiles99 ( intCounter )) END DO ! !160414: ! communicate with local PGAS memory to finish image execution: CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % & ExecutionFinished , THIS_IMAGE ()) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinma_Start !___________________________________________________________ ! SUBROUTINE IIinma_LoadTeamManagers ( Object ) ! method, loads the data from TeamManagers.txt TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object ! TYPE ( OOOPstpa_adtStartPath ) :: UUStartPath1 ! CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenStatus = 'OLD' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAccess = 'SEQUENTIAL' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenForm = 'FORMATTED' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenPosition = 'REWIND' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAction = 'READ' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenBlank = 'NULL' ! CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrStartPath ! ! for INQUIRE: LOGICAL ( KIND = OOOGglob_klog ) :: logExist INTEGER ( OOOGglob_kint ) :: intRecl = 0 ! INTEGER ( OOOGglob_kint ) :: FileUnit = 0 INTEGER ( OOOGglob_kint ) :: FileStatus = 0 ! File-error-Status CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrPathAndFileName = \"\" INTEGER ( OOOGglob_kint ) :: intCounter ! do loop counter INTEGER ( OOOGglob_kint ) :: intNumberOfTeamManagers ! CALL OOOGglob_subSetProcedures ( \"IIinma_LoadTeamManagers\" ) ! FileUnit = OOOGglob_FileUnitA ! CALL OOOPstpa_LoadPath ( UUStartPath1 ) CALL OOOPstpaG_chrPath ( UUStartPath1 , chrStartPath ) ! chrPathAndFileName = TRIM ( chrStartPath ) // 'TeamManagers.txt' ! OPEN ( UNIT = FileUnit , IOSTAT = FileStatus , FILE = TRIM ( chrPathAndFileName ), & STATUS = TRIM ( OpenStatus ), ACCESS = TRIM ( OpenAccess ), FORM = TRIM ( OpenForm ), & POSITION = TRIM ( OpenPosition ), ACTION = TRIM ( OpenAction ), & BLANK = TRIM ( OpenBlank ), DELIM = 'APOSTROPHE' ) ! IF ( FileStatus /= 0 ) THEN CALL IIinma_ErrorHandler ( Object , \"File Open-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) intNumberOfTeamManagers ! IF ( FileStatus /= 0 ) THEN CALL IIinma_ErrorHandler ( Object , \"File READ-Error 1\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOPinmaS_intNumberOfTeamManagers ( Object , intNumberOfTeamManagers ) ! contains error handling ! ! read the TeamManagerImages and there TeamMembers file name from the TeamManagers.txt file DO intCounter = 1 , Object % m_intNumberOfTeamManagers READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) Object % mA_intTeamManagerImages99 ( intCounter ), & Object % mA_chrTeamMembersFiles99 ( intCounter ) ! IF ( FileStatus /= 0 ) THEN ! FileStatus error CALL IIinma_ErrorHandler ( Object , \"File READ-Error 2\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF END DO ! CLOSE ( UNIT = FileUnit , IOSTAT = FileStatus , STATUS = 'KEEP' ) IF ( FileStatus /= 0 ) THEN CALL IIinma_ErrorHandler ( Object , \"File-Close-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOGglob_subResetProcedures ! END SUBROUTINE IIinma_LoadTeamManagers !___________________________________________________________ ! SUBROUTINE IIinma_ActivateTeamManagerImage ( Object , intTeamManagerImageNumber , chrTeamMembersFileName ) !!!  synchronization counterpart routine  !!!! !!!  for IIimma_SYNC_CheckActivityFlag    !!!! ! activate a TeamManager on a remote image (as given by TeamManagers.txt) ! USE OOOPimmc_admImageManager_CA ! access corresponding coarrays to USE OOOPimsc_admImageStatus_CA ! communicate with remote or local PGAS memory ! TYPE ( OOOPinma_adtInitialManager ), INTENT ( IN ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intTeamManagerImageNumber CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ), INTENT ( IN ) :: chrTeamMembersFileName ! CALL OOOGglob_subSetProcedures ( \"IIinma_ActivateTeamManagerImage\" ) ! ! firstly, set up the required data on the remote image: CALL OOOPimmcS_chrTeamMembersFileName_CA ( OOOPimmcImageManager_CA_1 , chrTeamMembersFileName , & intTeamManagerImageNumber ) ! set the activity flag on the remote image: CALL OOOPimsc_StructureConstructor_CA ( OOOPimscImageStatus_CA_1 ) CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % TeamManager , & intTeamManagerImageNumber ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE IIinma_ActivateTeamManagerImage !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Error Handling:   ************************* !********************************************************** !__________________________________________________________ !Private SUBROUTINE IIinma_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT-Routines TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIinma_ErrorHandler !__________________________________________________________ END MODULE OOOPinma_admInitialManager","tags":"","loc":"sourcefile/ooopinma_adminitialmanager.f90.html","title":"OOOPinma_admInitialManager.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf MODULE OOOPimsc_admImageStatus_CA !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPimsc !******************************************************** ! Abstract Data Type (ADT):         OOOPimsc_adtImageStatus_CA ! Abstract Data Type Module (adm):  OOOPimsc_admImageStatus_CA.f90 !******************************************************** ! Purpose:                    ImageStatus_CA-Object ! Language:                   mainly Fortran 95 with Fortran 2008 coarrays ! Programmer:                 Michael Siehl ! Date:                       January 2016 !******************************************************** ! Naming Conventions: ! !  for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !  for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !  for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !  other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** !___________________________________________________________ USE OOOGglob_Globals USE OOOEerro_admError !___________________________________________________________ IMPLICIT NONE !___________________________________________________________ PRIVATE !___________________________________________________________ ! !******************************* !****  Local ADT Routines:  **** !******************************* !*** ! access routines for scalar ! and static array members: !*** ! access routines for ! dynamic array members: !*** ! local ADT management: PUBLIC :: OOOPimsc_StructureConstructor !__________________________________________________________ ! !********************************* !****  Coarray ADT Routines:  **** !********************************* !*** ! access routines for scalar ! and static array members: PUBLIC :: OOOPimscS_intImageActivityFlag_CA , OOOPimscG_intImageActivityFlag_CA , & OOOPimscCopyImgToImg_intImageActivityFlag_CA !*** ! access routines for ! dynamic array members: !*** ! coarray ADT management: PUBLIC :: OOOPimscDC_CopyCoarrayObjImgToImg_CA PUBLIC :: OOOPimsc_StructureConstructor_CA !___________________________________________________________ ! !*************************** !****  Error Handling:  **** !*************************** !*** ! local ADT: PRIVATE :: IIimsc_ErrorHandler !*** ! coarray ADT: PRIVATE :: IIimsc_ImageNumberBoundError_CA !___________________________________________________________ ! !************************ !****  Enumerations:  *** !************************ !***  ImageActivityFlag: TYPE , PUBLIC :: OOOPimsc_DontUse1 INTEGER ( KIND = OOOGglob_kint ) :: InitialWaiting ! = 1 INTEGER ( KIND = OOOGglob_kint ) :: TeamManager ! = 2 INTEGER ( KIND = OOOGglob_kint ) :: TeamMember ! = 3 ! 160414: INTEGER ( KIND = OOOGglob_kint ) :: ExecutionFinished ! = 4 END TYPE OOOPimsc_DontUse1 ! TYPE ( OOOPimsc_DontUse1 ), PUBLIC , PARAMETER :: OOOPimscEnum_ImageActivityFlag & = OOOPimsc_DontUse1 ( 1 , 2 , 3 , 4 ) ! !___________________________________________________________ ! !******************************************************** !***  Abstract Data Type Specification: ***************** !******************************************************** TYPE , PUBLIC :: OOOPimsc_adtImageStatus_CA PRIVATE !***** INTEGER ( OOOGglob_kint ) :: m_intImageActivityFlag = OOOPimscEnum_ImageActivityFlag % InitialWaiting !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPimsc_adtImageStatus_CA !___________________________________________________________ ! !**************************************************** !***  Corresponding Coarray Declarations:  ********** !**************************************************** !*** TYPE ( OOOPimsc_adtImageStatus_CA ), PUBLIC , CODIMENSION [ * ], SAVE :: OOOPimscImageStatus_CA_1 ! !___________________________________________________________ CONTAINS !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !************************* ! local ADT management:  * !************************* ! SUBROUTINE OOOPimsc_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPimsc_adtImageStatus_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPimsc_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimsc_StructureConstructor !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines: ********************* !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !__________________________________________________________ ! SUBROUTINE OOOPimscS_intImageActivityFlag_CA ( Object_CA , intImageActivityFlag , & intImageNumber ) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageActivityFlag INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimscS_intImageActivityFlag_CA\" ) ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_intImageActivityFlag = intImageActivityFlag CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimscS_intImageActivityFlag_CA !********** SUBROUTINE OOOPimscG_intImageActivityFlag_CA ( Object_CA , intImageActivityFlag , & intImageNumber ) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intImageActivityFlag INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimscG_intImageActivityFlag_CA\" ) ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! intImageActivityFlag = Object_CA [ intImageNumber ] % m_intImageActivityFlag CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimscG_intImageActivityFlag_CA !********** SUBROUTINE OOOPimscCopyImgToImg_intImageActivityFlag_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimscCopyImgToImg_intImageActivityFlag_CA\" ) ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! Object_CA [ intImageNumberToCopyTo ] % m_intImageActivityFlag = Object_CA [ intImageNumberToCopyFrom ] % m_intImageActivityFlag ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimscCopyImgToImg_intImageActivityFlag_CA !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !************************** ! coarray ADT management: * !************************** !___________________________________________________________ ! SUBROUTINE OOOPimscDC_CopyCoarrayObjImgToImg_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) ! copy from any (remote) image to any other (remote) image ! (static members only) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status !****************************************** CALL OOOGglob_subSetProcedures & ( \"OOOPimscDC_CopyCoarrayObjImgToImg_CA\" ) ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! !******************************************* ! copy the properties: !**************** CALL OOOPimscCopyImgToImg_intImageActivityFlag_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** ! if necessary further properties must be copied here !******************************************* ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimscDC_CopyCoarrayObjImgToImg_CA !___________________________________________________________ ! SUBROUTINE OOOPimsc_StructureConstructor_CA ( Object_CA ) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA ! CALL OOOGglob_subSetProcedures ( \"OOOPimsc_StructureConstructor_CA\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimsc_StructureConstructor_CA !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Error Handling:   ************************* !********************************************************** !__________________________________________________________ ! !Private SUBROUTINE IIimsc_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPimsc_adtImageStatus_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIimsc_ErrorHandler !__________________________________________________________ ! !Private LOGICAL ( OOOGglob_klog ) FUNCTION IIimsc_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IIimsc_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IIimsc_ImageNumberBoundError_CA = . TRUE . END IF ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IIimsc_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IIimsc_ImageNumberBoundError_CA !__________________________________________________________ END MODULE OOOPimsc_admImageStatus_CA","tags":"","loc":"sourcefile/ooopimsc_admimagestatus_ca.f90.html","title":"OOOPimsc_admImageStatus_CA.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Image manager object definition. Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf !< Image manager object definition. MODULE OOOPimma_admImageManager !< Image manager object definition. !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPimma !******************************************************** ! Abstract Data Type (ADT):         OOOPimma_adtImageManager ! ! Abstract Data Type Module (adm):  OOOPimma_admImageManager.f90 !******************************************************** !+ Purpose:                    ImageManager-Object !+ Language:                   mainly Fortran 95 with Fortran 2008 coarrays !+ Programmer:                 Michael Siehl !+ Date:                       January 2016 !******************************************************** !### Naming Conventions: ! !#### for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !#### for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !#### for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !#### other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** USE OOOGglob_Globals USE OOOEerro_admError USE OOOPimmc_admImageManager_CA USE OOOPtema_admTeamManager USE OOOPtmem_admTeamMember USE OOOPinma_admInitialManager IMPLICIT NONE PRIVATE ! access routines for scalar ! and static array members: ! access routines for dynamic ! array and derived type members: ! access routines for the ! coarray wrapper member: ! ADT-Management: PUBLIC :: OOOPimma_StructureConstructor ! Program Logic: PUBLIC :: OOOPimma_Start PRIVATE :: IIimma_SYNC_CheckActivityFlag ! synchronization routine ! Error Handling: PRIVATE :: IIimma_ErrorHandler ! Enumerations: ! Abstract Data Type Declaration: TYPE , PUBLIC :: OOOPimma_adtImageManager !< Abstract image manager. PRIVATE !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError !< error-Collection ! END TYPE OOOPimma_adtImageManager ! Corresponding Local Object Declaration: TYPE ( OOOPimma_adtImageManager ), PUBLIC , SAVE :: OOOPimmaImageManager_1 !< Local Image Manager. CONTAINS ! access routines for scalar ! and static array members: ! access routines for the ! coarray wrapper member: ! ADT-Management: SUBROUTINE OOOPimma_StructureConstructor ( Object ) !< Structure constructor TYPE ( OOOPimma_adtImageManager ), INTENT ( INOUT ) :: Object !< Abstract image manager. ! CALL OOOGglob_subSetProcedures ( \"OOOPimma_StructureConstructor\" ) ! ! initialize something here ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimma_StructureConstructor ! Program Logic: SUBROUTINE OOOPimma_Start ( Object ) !< Start image manager. TYPE ( OOOPimma_adtImageManager ), INTENT ( INOUT ) :: Object !< Abstract image manager. ! CALL OOOGglob_subSetProcedures ( \"OOOPimma_Start\" ) ! CALL OOOPimma_StructureConstructor ( Object ) SYNC ALL ! IF ( THIS_IMAGE () == 1 ) THEN ! on image 1 only: check if the number of images is not less 4, ! as a minimum requirement: IF ( NUM_IMAGES () . LT . 4 ) THEN WRITE ( * , * ) ' **************************************' WRITE ( * , * ) ' ** Total number of images is to small: ' , NUM_IMAGES (), '. ' WRITE ( * , * ) ' ** Total number of images must be greater' WRITE ( * , * ) ' ** than 3 for the program to execute !' WRITE ( * , * ) ' **** program execution stopped *******' WRITE ( * , * ) ' **************************************' ERROR STOP ! STOP only, crashes the Linux terminal window END IF ! SYNC IMAGES ( * ) ! all other images will wait for the executing image (image 1) ! to reach this (but do not wait for each other) ELSE SYNC IMAGES ( 1 ) ! image 1 will wait for each of the other (executing) images to reach this END IF !******** IF ( THIS_IMAGE () . GT . 1 ) THEN CALL IIimma_SYNC_CheckActivityFlag ( Object ) ! synchronization routine ELSE CALL OOOPinma_Start ( OOOPinmaInitialManager_1 ) ! start the InitialManager on image 1 ! 160414: CALL IIimma_SYNC_CheckActivityFlag ( Object ) ! synchronization routine, will finish execution on image 1 ! due to the call of subroutine IIinma_FinishExecution earlier ! in subroutine OOOPinma_Start END IF ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimma_Start SUBROUTINE IIimma_SYNC_CheckActivityFlag ( Object ) !< synchronization routine. ! !< Synchronization counterpart routines are: !< !< - IIinma_ActivateTeamManagerImage !< - IItema_ActivateTeamMemberImage USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPimma_adtImageManager ), INTENT ( IN ) :: Object INTEGER ( OOOGglob_kint ) :: intImageActivityFlag CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: chrTeamMembersFileName ! CALL OOOGglob_subSetProcedures ( \"IIimma_SYNC_CheckActivityFlag\" ) ! ! DO ! check the ActivityFlag of the OOOPimscImageStatus_CA standalone coarray wrapper ! in local PGAS memory permanently until it is not InitialWaiting any more: CALL OOOPimscG_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , intImageActivityFlag , THIS_IMAGE ()) IF ( intImageActivityFlag /= OOOPimscEnum_ImageActivityFlag % InitialWaiting ) THEN EXIT END IF END DO ! ! DO ! 160414: check the ImageActivityFlag in local PGAS memory permanently until it has !         value OOOPimscEnum_ImageActivityFlag % ExecutionFinished ! 160414: CALL OOOPimscG_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , intImageActivityFlag , THIS_IMAGE ()) ! IF ( intImageActivityFlag == OOOPimscEnum_ImageActivityFlag % TeamManager ) THEN ! start a TeamManager CALL OOOPimmcG_chrTeamMembersFileName_CA ( OOOPimmcImageManager_CA_1 , chrTeamMembersFileName , THIS_IMAGE ()) CALL OOOPtema_Start ( OOOPtemaTeamManager_1 , chrTeamMembersFileName ) END IF ! IF ( intImageActivityFlag == OOOPimscEnum_ImageActivityFlag % TeamMember ) THEN ! start a TeamMember CALL OOOPtmem_Start ( OOOPtmemTeamMember_1 ) END IF ! 160414: finish image execution: IF ( intImageActivityFlag == OOOPimscEnum_ImageActivityFlag % ExecutionFinished ) THEN write ( * , * ) 'Execution finished on image' , THIS_IMAGE () EXIT END IF ! END DO ! 160414 CALL OOOGglob_subResetProcedures END SUBROUTINE IIimma_SYNC_CheckActivityFlag ! Error Handling: ! Private SUBROUTINE IIimma_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) !< ErrorHandler for the ADT-Routines TYPE ( OOOPimma_adtImageManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIimma_ErrorHandler END MODULE OOOPimma_admImageManager","tags":"","loc":"sourcefile/ooopimma_admimagemanager.f90.html","title":"OOOPimma_admImageManager.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf MODULE OOOPtmec_admTeamMember_CA !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPtmec !******************************************************** ! Abstract Data Type (ADT):         OOOPtmec_adtTeamMember_CA ! Abstract Data Type Module (adm):  OOOPtmec_admTeamMember_CA.f90 !******************************************************** ! Purpose:                    TeamMember_CA-Object ! Language:                   mainly Fortran 95 with Fortran 2008 coarrays ! Programmer:                 Michael Siehl ! Date:                       January 2016 !******************************************************** ! Naming Conventions: ! !  for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !  for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !  for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !  other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** !___________________________________________________________ USE OOOGglob_Globals USE OOOEerro_admError !___________________________________________________________ IMPLICIT NONE !___________________________________________________________ PRIVATE !___________________________________________________________ ! !******************************* !****  Local ADT Routines:  **** !******************************* !*** ! access routines for scalar ! and static array members: !*** ! access routines for ! dynamic array members: !*** ! local ADT management: PUBLIC :: OOOPtmec_StructureConstructor !__________________________________________________________ ! !********************************* !****  Coarray ADT Routines:  **** !********************************* !*** ! access routines for scalar ! and static array members: !*** ! access routines for ! dynamic array members: !*** ! coarray ADT management: !___________________________________________________________ ! !*************************** !****  Error Handling:  **** !*************************** !*** ! local ADT: PRIVATE :: IItmec_ErrorHandler !*** ! coarray ADT: PUBLIC :: IItmec_ImageNumberBoundError_CA !___________________________________________________________ ! !************************ !****  Enumerations:  *** !************************ ! !___________________________________________________________ ! !******************************************************** !***  Abstract Data Type Specification: ***************** !******************************************************** TYPE , PUBLIC :: OOOPtmec_adtTeamMember_CA PRIVATE !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPtmec_adtTeamMember_CA !___________________________________________________________ ! !**************************************************** !***  Corresponding Coarray Declarations:  ********** !**************************************************** !*** TYPE ( OOOPtmec_adtTeamMember_CA ), PUBLIC , CODIMENSION [ * ], SAVE :: OOOPtmecTeamMember_CA_1 !___________________________________________________________ CONTAINS !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !************************* ! local ADT management:  * !************************* ! SUBROUTINE OOOPtmec_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPtmec_adtTeamMember_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtmec_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtmec_StructureConstructor !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines: ********************* !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !************************** ! coarray ADT management: * !************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Error Handling:   ************************* !********************************************************** !__________________________________________________________ ! !Private SUBROUTINE IItmec_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPtmec_adtTeamMember_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IItmec_ErrorHandler !__________________________________________________________ ! !Private LOGICAL ( OOOGglob_klog ) FUNCTION IItmec_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPtmec_adtTeamMember_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IItmec_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IItmec_ImageNumberBoundError_CA = . TRUE . END IF ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IItmec_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IItmec_ImageNumberBoundError_CA !__________________________________________________________ END MODULE OOOPtmec_admTeamMember_CA","tags":"","loc":"sourcefile/oooptmec_admteammember_ca.f90.html","title":"OOOPtmec_admTeamMember_CA.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf MODULE OOOPtemc_admTeamManager_CA !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPtemc !******************************************************** ! Abstract Data Type (ADT):         OOOPtemc_adtTeamManager_CA ! Abstract Data Type Module (adm):  OOOPtemc_admTeamManager_CA.f90 !******************************************************** ! Purpose:                    TeamManager_CA-Object ! Language:                   mainly Fortran 95 with Fortran 2008 coarrays ! Programmer:                 Michael Siehl ! Date:                       January 2016 !******************************************************** ! Naming Conventions: ! !  for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !  for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !  for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !  other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** !___________________________________________________________ USE OOOGglob_Globals USE OOOEerro_admError !___________________________________________________________ IMPLICIT NONE !___________________________________________________________ PRIVATE !___________________________________________________________ ! !******************************* !****  Local ADT Routines:  **** !******************************* !*** ! access routines for scalar ! and static array members: !*** ! access routines for ! dynamic array members: !*** ! local ADT management: PUBLIC :: OOOPtemc_StructureConstructor !__________________________________________________________ ! !********************************* !****  Coarray ADT Routines:  **** !********************************* !*** ! access routines for scalar ! and static array members: PUBLIC :: OOOPtemcS_chrTeamMembersFileName_CA , OOOPtemcG_chrTeamMembersFileName_CA , & OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA PUBLIC :: OOOPtemcS_intNumberOfTeamMembers_CA , OOOPtemcG_intNumberOfTeamMembers_CA , & OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA PUBLIC :: OOOPtemcSA_intTeamMemberImages99_CA , OOOPtemcGA_intTeamMemberImages99_CA , & OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA !*** ! access routines for ! dynamic array members: !*** ! coarray ADT management: PUBLIC :: OOOPtemcDC_CopyCoarrayObjImgToImg_CA !___________________________________________________________ ! !*************************** !****  Error Handling:  **** !*************************** !*** ! local ADT: PRIVATE :: IItemc_ErrorHandler !*** ! coarray ADT: PUBLIC :: IItemc_ImageNumberBoundError_CA !___________________________________________________________ ! !************************ !****  Enumerations:  *** !************************ ! !___________________________________________________________ ! !******************************************************** !***  Abstract Data Type Specification: ***************** !******************************************************** TYPE , PUBLIC :: OOOPtemc_adtTeamManager_CA PRIVATE !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: m_chrTeamMembersFileName !***** INTEGER ( OOOGglob_kint ) :: m_intNumberOfTeamMembers = 0 !***** INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamMembers_UpperBound ) :: mA_intTeamMemberImages99 !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPtemc_adtTeamManager_CA !___________________________________________________________ ! !**************************************************** !***  Corresponding Coarray Declarations:  ********** !**************************************************** !*** TYPE ( OOOPtemc_adtTeamManager_CA ), PUBLIC , CODIMENSION [ * ], SAVE :: OOOPtemcTeamManager_CA_1 !___________________________________________________________ CONTAINS !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !************************* ! local ADT management:  * !************************* ! SUBROUTINE OOOPtemc_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPtemc_adtTeamManager_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtemc_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemc_StructureConstructor !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines: ********************* !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !__________________________________________________________ ! SUBROUTINE OOOPtemcS_chrTeamMembersFileName_CA ( Object_CA , chrTeamMembersFileName , intImageNumber ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrTeamMembersFileName INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcS_chrTeamMembersFileName_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_chrTeamMembersFileName = chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcS_chrTeamMembersFileName_CA !********** SUBROUTINE OOOPtemcG_chrTeamMembersFileName_CA ( Object_CA , chrTeamMembersFileName , intImageNumber ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( OUT ) :: chrTeamMembersFileName INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcG_chrTeamMembersFileName_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! chrTeamMembersFileName = Object_CA [ intImageNumber ] % m_chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcG_chrTeamMembersFileName_CA !********** SUBROUTINE OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy the array from image to image Object_CA [ intImageNumberToCopyTo ] % m_chrTeamMembersFileName & = Object_CA [ intImageNumberToCopyFrom ] % m_chrTeamMembersFileName ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA !__________________________________________________________ ! SUBROUTINE OOOPtemcS_intNumberOfTeamMembers_CA ( Object_CA , intNumberOfTeamMembers , & intImageNumber ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intNumberOfTeamMembers INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcS_intNumberOfTeamMembers_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( intNumberOfTeamMembers > OOOGglob_TeamMembers_UpperBound ) THEN CALL IItemc_ErrorHandler ( Object_CA , \"to many elements\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_intNumberOfTeamMembers = intNumberOfTeamMembers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcS_intNumberOfTeamMembers_CA !********** SUBROUTINE OOOPtemcG_intNumberOfTeamMembers_CA ( Object_CA , intNumberOfTeamMembers , & intImageNumber ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intNumberOfTeamMembers INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcG_intNumberOfTeamMembers_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! intNumberOfTeamMembers = Object_CA [ intImageNumber ] % m_intNumberOfTeamMembers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcG_intNumberOfTeamMembers_CA !********** SUBROUTINE OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA\" ) ! ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % m_intNumberOfTeamMembers = Object_CA [ intImageNumberToCopyFrom ] % m_intNumberOfTeamMembers ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA !___________ ! SUBROUTINE OOOPtemcSA_intTeamMemberImages99_CA ( Object_CA , intTeamMemberImages99 ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamMembers_UpperBound ), INTENT ( IN ) :: intTeamMemberImages99 CALL OOOGglob_subSetProcedures & ( \"OOOPtemcSA_intTeamMemberImages99_CA\" ) Object_CA % mA_intTeamMemberImages99 = intTeamMemberImages99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcSA_intTeamMemberImages99_CA !********** SUBROUTINE OOOPtemcGA_intTeamMemberImages99_CA ( Object_CA , intTeamMemberImages99 ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamMembers_UpperBound ), INTENT ( OUT ) :: intTeamMemberImages99 CALL OOOGglob_subSetProcedures & ( \"OOOPtemcGA_intTeamMemberImages99_CA\" ) intTeamMemberImages99 = Object_CA % mA_intTeamMemberImages99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcGA_intTeamMemberImages99_CA !********** SUBROUTINE OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy only the required part of the array: Object_CA [ intImageNumberToCopyTo ] % mA_intTeamMemberImages99 ( 1 : Object_CA % m_intNumberOfTeamMembers ) & = Object_CA [ intImageNumberToCopyFrom ] % mA_intTeamMemberImages99 ( 1 : Object_CA % m_intNumberOfTeamMembers ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !************************** ! coarray ADT management: * !************************** !___________________________________________________________ ! SUBROUTINE OOOPtemcDC_CopyCoarrayObjImgToImg_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) ! copy from any (remote) image to any other (remote) image ! (static members only) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status !****************************************** CALL OOOGglob_subSetProcedures & ( \"OOOPtemcDC_CopyCoarrayObjImgToImg_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! !******************************************* ! copy the properties: !**************** CALL OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** ! if necessary further properties must be copied here !******************************************* ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcDC_CopyCoarrayObjImgToImg_CA !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Error Handling:   ************************* !********************************************************** !__________________________________________________________ ! !Private SUBROUTINE IItemc_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPtemc_adtTeamManager_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IItemc_ErrorHandler !__________________________________________________________ ! !Private LOGICAL ( OOOGglob_klog ) FUNCTION IItemc_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IItemc_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IItemc_ImageNumberBoundError_CA = . TRUE . END IF ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IItemc_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IItemc_ImageNumberBoundError_CA !__________________________________________________________ END MODULE OOOPtemc_admTeamManager_CA","tags":"","loc":"sourcefile/oooptemc_admteammanager_ca.f90.html","title":"OOOPtemc_admTeamManager_CA.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf MODULE OOOPtmem_admTeamMember !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPtmem !******************************************************** ! Abstract Data Type (ADT):         OOOPtmem_adtTeamMember ! Abstract Data Type Module (adm):  OOOPtmem_admTeamMember.f90 !******************************************************** ! Purpose:                    TeamMember-Object ! Language:                   mainly Fortran 95 with Fortran 2008 coarrays ! Programmer:                 Michael Siehl ! Date:                       January 2016 !******************************************************** ! Naming Conventions: ! !  for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !  for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !  for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !  other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** !___________________________________________________________ USE OOOGglob_Globals ! KIND-Values USE OOOEerro_admError ! error-Collection ! USE OOOPtmec_admTeamMember_CA !___________________________________________________________ IMPLICIT NONE !___________________________________________________________ PRIVATE !___________________________________________________________ ! !***************************** ! access routines for scalar * ! and static array members:  * !***************************** ! !********************************** ! access routines for dynamic     * ! array and derived type members: * !********************************** ! !**************************** ! access routines for the   * ! coarray wrapper member:   * !**************************** ! !******************* ! ADT-Management: ** !******************* PUBLIC :: OOOPtmem_StructureConstructor !___________________________________________________________ ! !******************** !** Program Logic: ** !******************** PUBLIC :: OOOPtmem_Start !___________________________________________________________ ! !********************* !** Error Handling: ** !********************* PRIVATE :: IItmem_ErrorHandler !___________________________________________________________ ! !********************* !**  Enumerations:  ** !********************* ! !___________________________________________________________ ! !******************************************************** !*** Abstract Data Type Declaration: ******************** !******************************************************** TYPE , PUBLIC :: OOOPtmem_adtTeamMember PRIVATE !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error-Collection ! END TYPE OOOPtmem_adtTeamMember !___________________________________________________________ ! !**************************************************** !***  Corresponding Local Object Declaration:  ****** !**************************************************** !*** TYPE ( OOOPtmem_adtTeamMember ), PUBLIC , SAVE :: OOOPtmemTeamMember_1 !___________________________________________________________ CONTAINS !################################################################################################## !################################################################################################## !################################################################################################## !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !**************************** ! access routines for the   * ! coarray wrapper member:   * !**************************** !___________________________________________________________ ! !################################################################################################## !################################################################################################## !################################################################################################## !******************* ! ADT-Management:  * !******************* !___________________________________________________________ ! SUBROUTINE OOOPtmem_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPtmem_adtTeamMember ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtmem_StructureConstructor\" ) ! initialize something here ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtmem_StructureConstructor !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !******************* ! Program Logic:   * !******************* !___________________________________________________________ SUBROUTINE OOOPtmem_Start ( Object ) USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPtmem_adtTeamMember ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtmem_Start\" ) ! CALL OOOPtmem_StructureConstructor ( Object ) ! write ( * , * ) 'TeamMember started on Image: ' , THIS_IMAGE () ! !160414: ! communicate with local PGAS memory to finish image execution: CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % & ExecutionFinished , THIS_IMAGE ()) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtmem_Start !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Error Handling:   ************************* !********************************************************** !__________________________________________________________ ! !Private SUBROUTINE IItmem_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT-Routines TYPE ( OOOPtmem_adtTeamMember ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IItmem_ErrorHandler !__________________________________________________________ END MODULE OOOPtmem_admTeamMember","tags":"","loc":"sourcefile/oooptmem_admteammember.f90.html","title":"OOOPtmem_admTeamMember.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Definition of global parameters/variables. Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf !< Definition of global parameters/variables. MODULE OOOGglob_Globals !< Definition of global parameters/variables. IMPLICIT NONE PUBLIC !> Application Main Directory Path: CHARACTER ( KIND = 1 , LEN = 240 ) :: OOOGglob_chrAppPath = '' ! ! upper bound declarations for the static components of ! derived type coarrays: INTEGER , PARAMETER :: OOOGglob_TeamManagers_UpperBound = 5 !< max number of TeamManagers INTEGER , PARAMETER :: OOOGglob_TeamMembers_UpperBound = 10 !< max number of TeamMembers per team INTEGER , PARAMETER :: OOOGglob_NumImages_UpperBound = 100 !< max number of images ! !******************************************************** !******************************************************** ! Stack Trace: CHARACTER ( KIND = 1 , LEN = 35 ), DIMENSION ( 1 : 50 ) :: OOOGglob_chrStackTrace !< Stack trace. INTEGER ( KIND = 4 ) :: OOOGglob_intStackTraceCounter = 0 !< Stack trace counter. ! !******************************************************** !******************************************************** ! KIND values: INTEGER , PARAMETER :: OOOGglob_kint = 4 !< KIND for INTEGER INTEGER , PARAMETER :: OOOGglob_krea = 4 !< KIND for REAL INTEGER , PARAMETER :: OOOGglob_kcom = 4 !< KIND for COMPLEX INTEGER , PARAMETER :: OOOGglob_klog = 4 !< KIND for LOGICAL INTEGER , PARAMETER :: OOOGglob_kcha = 1 !< KIND for CHARACTER, 1=ASCII INTEGER , PARAMETER :: OOOGglob_Len40 = 40 !< LEN for CHARACTER INTEGER , PARAMETER :: OOOGglob_Len200 = 200 !< LEN for CHARACTER INTEGER , PARAMETER :: OOOGglob_Len240 = 240 !< LEN for CHARACTER INTEGER , PARAMETER :: OOOGglob_Len2400 = 2400 !< LEN for CHARACTER ! !********************************************************** ! Input/Output-constants ! FILE UNITs: INTEGER ( KIND = 4 ), PARAMETER :: OOOGglob_FileUnitA = 1 !< File unit A. INTEGER ( KIND = 4 ), PARAMETER :: OOOGglob_FileUnitB = 2 !< File unit B. ! for Tracing und Error-Handling: INTEGER ( KIND = 4 ), PARAMETER :: OOOGglob_TracingFileUnit = 3 !< Trace file unit. INTEGER ( KIND = 4 ), PARAMETER :: OOOGglob_StackTraceFileUnit = 4 !< Stack trace file unit. INTEGER ( KIND = 4 ), PARAMETER :: OOOGglob_ErrorLogFileUnit = 7 !< Error log file unit. ! !********************************************************** ! Error-Handling CHARACTER ( KIND = 1 , LEN = 40 ) :: OOOGglob_chrCurrentProcedure = \"Main\" !< Error-handling, current procedure name. CHARACTER ( KIND = 1 , LEN = 40 ) :: OOOGglob_chrCallingProcedure = \"User\" !< Error-handling, calling procedure name. CHARACTER ( KIND = 1 , LEN = 40 ) :: OOOGglob_chrReturningProcedure = '' !< Error-handling, returning procedure name. CHARACTER ( KIND = 1 , LEN = 40 ) :: OOOGglob_chrTempCallingProcedur = '' !< Error-handling, temporary calling procedure name. !********************************************************** ! Error-Handling REAL ( KIND = 4 ) :: OOOGglob_reaNaN !< Error-handling, real NaN occurrence. REAL ( KIND = 4 ) :: OOOGglob_reaPositiveInfinity !< Error-handling, real positive infinity occurrence. REAL ( KIND = 4 ) :: OOOGglob_reaNegativeInfinity !< Error-handling, real negative infinity occurrence. !********************************************************** ! Error-Handling INTEGER ( KIND = 4 ), PARAMETER :: OOOGglob_warning = 1 !< Error-handling, *warning* code. INTEGER ( KIND = 4 ), PARAMETER :: OOOGglob_error = 2 !< Error-handling, *error* code. INTEGER ( KIND = 4 ), PARAMETER :: OOOGglob_NoErrNumber = 0 !< Error-handling, *not an error* code. ! !********************************************************** CONTAINS ! Public-Subroutines: !__________________________________________________________ !*********************************************************** SUBROUTINE OOOGglob_subSetProcedures ( chrCurrentProcedure ) !< Error-Handling and Tracing CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrCurrentProcedure !< Current procedure name. ! refresh the Stack Trace: OOOGglob_intStackTraceCounter = OOOGglob_intStackTraceCounter + 1 OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter ) = chrCurrentProcedure OOOGglob_chrCurrentProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter ) OOOGglob_chrCallingProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter - 1 ) OOOGglob_chrReturningProcedure = '' ! END SUBROUTINE OOOGglob_subSetProcedures !_____________ SUBROUTINE OOOGglob_subResetProcedures !< Error-Handling and Tracing ! refresh the Stack Trace: OOOGglob_intStackTraceCounter = OOOGglob_intStackTraceCounter - 1 OOOGglob_chrCurrentProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter ) OOOGglob_chrReturningProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter + 1 ) IF ( OOOGglob_intStackTraceCounter > 1 ) THEN OOOGglob_chrCallingProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter - 1 ) END IF ! END SUBROUTINE OOOGglob_subResetProcedures !__________________________________________________________ !********************************************************** !********************************************************** !********************************************************** END MODULE OOOGglob_Globals","tags":"","loc":"sourcefile/ooogglob_globals.f90.html","title":"OOOGglob_Globals.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"OOOEerro_admError definition. Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf !< *OOOEerro_admError* definition. MODULE OOOEerro_admError !< *OOOEerro_admError* definition. USE OOOGglob_Globals IMPLICIT NONE !___________________________________________________________ ! PRIVATE ! PUBLIC :: OOOEerroc_AddObject !___________________________________________________________ ! TYPE , PUBLIC :: OOOEerroc_colError !< Errors handler class. PRIVATE ! END TYPE OOOEerroc_colError !___________________________________________________________ CONTAINS ! !___________________________________________________________ ! SUBROUTINE OOOEerroc_AddObject ( Collection , chrErrorDescription , & intErrorType ) TYPE ( OOOEerroc_colError ), INTENT ( INOUT ) :: Collection !< Error collection. CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrErrorDescription !< Error description. INTEGER ( KIND = OOOGglob_kint ), INTENT ( IN ) :: intErrorType !< Error code. CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrSelection !< Dummy string for handling user's input. !< Handle errors occurrence. !< !< @note Prompt user for errors-handling choice. ! ! Write ( * , * ) \"CurrentProc: \" , OOOGglob_chrCurrentProcedure ! write ( * , * ) \"ErrDescr: \" , TRIM ( chrErrorDescription ) ! write ( * , * ) \"ErrTyp: \" , intErrorType ! Write ( * , * ) Write ( * , * ) \"CallingProc: \" , TRIM ( OOOGglob_chrCallingProcedure ) ! Write ( * , * ) \"ReturningProc: \" , TRIM ( OOOGglob_chrReturningProcedure ) ! PRINT * Write ( * , * ) \"     *** An error occured ! *** \" PRINT * , ' Please select: ' PRINT * PRINT * , ' x  - Exit Program, or' PRINT * , ' c  - Continue Execution' PRINT * ! PRINT * , ' -> ' READ * , chrSelection PRINT * chrSelection = TRIM ( chrSelection ) SELECT CASE ( chrSelection ) CASE ( 'x' , 'X' ) ! ERROR STOP ! end of execution ! END SELECT ! END SUBROUTINE OOOEerroc_AddObject !___________________________________________________________ ! END MODULE OOOEerro_admError","tags":"","loc":"sourcefile/oooeerro_admerror.f90.html","title":"OOOEerro_admError.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf MODULE OOOPimmc_admImageManager_CA !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPimmc !******************************************************** ! Abstract Data Type (ADT):         OOOPimmc_adtImageManager_CA ! Abstract Data Type Module (adm):  OOOPimmc_admImageManager_CA.f90 !******************************************************** ! Purpose:                    ImageManager_CA-Object ! Language:                   mainly Fortran 95 with Fortran 2008 coarrays ! Programmer:                 Michael Siehl ! Date:                       January 2016 !******************************************************** ! Naming Conventions: ! !  for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !  for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !  for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !  other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** !___________________________________________________________ USE OOOGglob_Globals USE OOOEerro_admError ! USE OOOPimsc_admImageStatus_CA !___________________________________________________________ IMPLICIT NONE !___________________________________________________________ PRIVATE !___________________________________________________________ ! !******************************* !****  Local ADT Routines:  **** !******************************* !*** ! access routines for scalar ! and static array members: !*** ! access routines for ! dynamic array members: !*** ! local ADT management: PUBLIC :: OOOPimmc_StructureConstructor !__________________________________________________________ ! !********************************* !****  Coarray ADT Routines:  **** !********************************* !*** ! access routines for scalar ! and static array members: PUBLIC :: OOOPimmcS_intImageActivityFlag_CA , OOOPimmcG_intImageActivityFlag_CA , & OOOPimmcCopyImgToImg_intImageActivityFlag_CA PUBLIC :: OOOPimmcS_chrTeamMembersFileName_CA , OOOPimmcG_chrTeamMembersFileName_CA , & OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA !*** ! access routines for ! dynamic array members: !*** ! coarray ADT management: PUBLIC :: OOOPimmcDC_CopyCoarrayObjImgToImg_CA !___________________________________________________________ ! !*************************** !****  Error Handling:  **** !*************************** !*** ! local ADT: PRIVATE :: IIimmc_ErrorHandler !*** ! coarray ADT: PUBLIC :: IIimmc_ImageNumberBoundError_CA !___________________________________________________________ ! !************************ !****  Enumerations:  *** !************************ ! !___________________________________________________________ ! !******************************************************** !***  Abstract Data Type Specification: ***************** !******************************************************** TYPE , PUBLIC :: OOOPimmc_adtImageManager_CA PRIVATE !***** INTEGER ( OOOGglob_kint ) :: m_intImageActivityFlag = OOOPimscEnum_ImageActivityFlag % InitialWaiting !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: m_chrTeamMembersFileName !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPimmc_adtImageManager_CA !___________________________________________________________ ! !**************************************************** !***  Corresponding Coarray Declarations:  ********** !**************************************************** !*** TYPE ( OOOPimmc_adtImageManager_CA ), PUBLIC , CODIMENSION [ * ], SAVE :: OOOPimmcImageManager_CA_1 ! !___________________________________________________________ CONTAINS !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !************************* ! local ADT management:  * !************************* ! SUBROUTINE OOOPimmc_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPimmc_adtImageManager_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPimmc_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmc_StructureConstructor !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines: ********************* !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* ! SUBROUTINE OOOPimmcS_intImageActivityFlag_CA ( Object_CA , intImageActivityFlag , & intImageNumber ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageActivityFlag INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcS_intImageActivityFlag_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_intImageActivityFlag = intImageActivityFlag ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcS_intImageActivityFlag_CA !********** SUBROUTINE OOOPimmcG_intImageActivityFlag_CA ( Object_CA , intImageActivityFlag , & intImageNumber ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intImageActivityFlag INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcG_intImageActivityFlag_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! intImageActivityFlag = Object_CA [ intImageNumber ] % m_intImageActivityFlag CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcG_intImageActivityFlag_CA !********** SUBROUTINE OOOPimmcCopyImgToImg_intImageActivityFlag_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcCopyImgToImg_intImageActivityFlag_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % m_intImageActivityFlag = Object_CA [ intImageNumberToCopyFrom ] % m_intImageActivityFlag ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcCopyImgToImg_intImageActivityFlag_CA !__________________________________________________________ ! SUBROUTINE OOOPimmcS_chrTeamMembersFileName_CA ( Object_CA , chr_TeamMembersFileName , intImageNumber ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chr_TeamMembersFileName INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcS_chrTeamMembersFileName_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_chrTeamMembersFileName = chr_TeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcS_chrTeamMembersFileName_CA !********** SUBROUTINE OOOPimmcG_chrTeamMembersFileName_CA ( Object_CA , chr_TeamMembersFileName , intImageNumber ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), DIMENSION ( 1 ), INTENT ( OUT ) :: chr_TeamMembersFileName INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcG_chrTeamMembersFileName_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! chr_TeamMembersFileName = Object_CA [ intImageNumber ] % m_chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcG_chrTeamMembersFileName_CA !********** SUBROUTINE OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy image to image Object_CA [ intImageNumberToCopyTo ] % m_chrTeamMembersFileName & = Object_CA [ intImageNumberToCopyFrom ] % m_chrTeamMembersFileName ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !************************** ! coarray ADT management: * !************************** !___________________________________________________________ ! SUBROUTINE OOOPimmcDC_CopyCoarrayObjImgToImg_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) ! copy from any (remote) image to any other (remote) image ! (static members only) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status !****************************************** CALL OOOGglob_subSetProcedures & ( \"OOOPimmcDC_CopyCoarrayObjImgToImg_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! !******************************************* ! copy the properties: !**************** CALL OOOPimmcCopyImgToImg_intImageActivityFlag_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** ! if necessary further properties must be copied here !******************************************* ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcDC_CopyCoarrayObjImgToImg_CA !___________________________________________________________ ! !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Error Handling:   ************************* !********************************************************** !__________________________________________________________ ! !Private SUBROUTINE IIimmc_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPimmc_adtImageManager_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIimmc_ErrorHandler !__________________________________________________________ ! !Private LOGICAL ( OOOGglob_klog ) FUNCTION IIimmc_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IIimmc_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IIimmc_ImageNumberBoundError_CA = . TRUE . END IF ! !******** ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IIimmc_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IIimmc_ImageNumberBoundError_CA !__________________________________________________________ END MODULE OOOPimmc_admImageManager_CA","tags":"","loc":"sourcefile/ooopimmc_admimagemanager_ca.f90.html","title":"OOOPimmc_admImageManager_CA.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Main program entry. Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf !< Main program entry. PROGRAM Main !< Main program entry. ! USE Main_Sub ! CALL Entry_Main_Sub () ! END PROGRAM Main","tags":"","loc":"sourcefile/main.f90.html","title":"Main.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf MODULE OOOPtema_admTeamManager !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPtema !******************************************************** ! Abstract Data Type (ADT):         OOOPtema_adtTeamManager ! Abstract Data Type Module (adm):  OOOPtema_admTeamManager.f90 !******************************************************** ! Purpose:                    TeamManager-Object ! Language:                   mainly Fortran 95 with Fortran 2008 coarrays ! Programmer:                 Michael Siehl ! Date:                       January 2016 !******************************************************** ! Naming Conventions: ! !  for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !  for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !  for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !  other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** !___________________________________________________________ USE OOOGglob_Globals USE OOOEerro_admError USE OOOPstpa_admStartPath ! load the start path from file ! USE OOOPtemc_admTeamManager_CA USE OOOPimsc_admImageStatus_CA ! communicate with remote or local PGAS memory !___________________________________________________________ IMPLICIT NONE !___________________________________________________________ PRIVATE !___________________________________________________________ ! !***************************** ! access routines for scalar * ! and static array members:  * !***************************** PUBLIC :: OOOPtemaS_chrTeamMembersFileName , OOOPtemaG_chrTeamMembersFileName PUBLIC :: OOOPtemaS_intNumberOfTeamMembers , OOOPtemaG_intNumberOfTeamMembers ! !********************************** ! access routines for dynamic     * ! array and derived type members: * !********************************** ! !**************************** ! access routines for the   * ! coarray wrapper member:   * !**************************** ! !******************* ! ADT-Management: ** !******************* PUBLIC :: OOOPtema_StructureConstructor !___________________________________________________________ ! !******************** !** Program Logic: ** !******************** PUBLIC :: OOOPtema_Start PRIVATE :: IItema_LoadTeamMembers PRIVATE :: IItema_ActivateTeamMemberImage !___________________________________________________________ ! !********************* !** Error Handling: ** !********************* PRIVATE :: IItema_ErrorHandler !___________________________________________________________ ! !********************* !**  Enumerations:  ** !********************* ! !___________________________________________________________ ! !******************************************************** !*** Abstract Data Type Declaration: ******************** !******************************************************** TYPE , PUBLIC :: OOOPtema_adtTeamManager PRIVATE !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: m_chrTeamMembersFileName = \"\" !**** INTEGER ( OOOGglob_kint ) :: m_intNumberOfTeamMembers = 0 !***** INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamMembers_UpperBound ) :: mA_intTeamMemberImages99 !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error-Collection ! END TYPE OOOPtema_adtTeamManager !___________________________________________________________ ! !**************************************************** !***  Corresponding Local Object Declaration:  ****** !**************************************************** !*** TYPE ( OOOPtema_adtTeamManager ), PUBLIC , SAVE :: OOOPtemaTeamManager_1 !___________________________________________________________ CONTAINS !################################################################################################## !################################################################################################## !################################################################################################## !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !___________________________________________________________ ! SUBROUTINE OOOPtemaS_chrTeamMembersFileName ( Object , chrTeamMembersFileName ) TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrTeamMembersFileName CALL OOOGglob_subSetProcedures ( \"OOOPtemaS_chrTeamMembersFileName\" ) Object % m_chrTeamMembersFileName = chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemaS_chrTeamMembersFileName !********** SUBROUTINE OOOPtemaG_chrTeamMembersFileName ( Object , chrTeamMembersFileName ) TYPE ( OOOPtema_adtTeamManager ), INTENT ( IN ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( OUT ) :: chrTeamMembersFileName CALL OOOGglob_subSetProcedures ( \"OOOPtemaG_chrTeamMembersFileName\" ) chrTeamMembersFileName = Object % m_chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemaG_chrTeamMembersFileName !__________________________________________________________ ! SUBROUTINE OOOPtemaS_intNumberOfTeamMembers ( Object , intNumberOfTeamMembers ) TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intNumberOfTeamMembers INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures ( \"OOOPtemaS_intNumberOfTeamMembers\" ) ! IF ( intNumberOfTeamMembers > OOOGglob_TeamMembers_UpperBound ) THEN CALL IItema_ErrorHandler ( Object , \"to many elements\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object % m_intNumberOfTeamMembers = intNumberOfTeamMembers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemaS_intNumberOfTeamMembers !********** SUBROUTINE OOOPtemaG_intNumberOfTeamMembers ( Object , intNumberOfTeamMembers ) TYPE ( OOOPtema_adtTeamManager ), INTENT ( IN ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intNumberOfTeamMembers CALL OOOGglob_subSetProcedures ( \"OOOPtemaG_intNumberOfTeamMembers\" ) intNumberOfTeamMembers = Object % m_intNumberOfTeamMembers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemaG_intNumberOfTeamMembers !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !**************************** ! access routines for the   * ! coarray wrapper member:   * !**************************** !___________________________________________________________ ! !################################################################################################## !################################################################################################## !################################################################################################## !******************* ! ADT-Management:  * !******************* !___________________________________________________________ ! SUBROUTINE OOOPtema_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtema_StructureConstructor\" ) ! initialize something here ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtema_StructureConstructor !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !******************* ! Program Logic:   * !******************* !___________________________________________________________ SUBROUTINE OOOPtema_Start ( Object , chrTeamMembersFileName ) USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ), INTENT ( IN ) :: chrTeamMembersFileName INTEGER ( OOOGglob_kint ) :: intTeamMemberImageNumber ! 160414 INTEGER ( OOOGglob_kint ) :: intCounter = 0 ! CALL OOOGglob_subSetProcedures ( \"OOOPtema_Start\" ) ! CALL OOOPtema_StructureConstructor ( Object ) ! write ( * , * ) 'TeamManager started on Image: ' , THIS_IMAGE () ! ! 160414: ! we do an early setting of the ImageActivityFlag at this place ! to allow supersession of the ExecutionFinished value later on: CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % & ExecutionFinished , THIS_IMAGE ()) ! CALL OOOPtemaS_chrTeamMembersFileName ( Object , chrTeamMembersFileName ) CALL IItema_LoadTeamMembers ( Object ) ! from TeamMembers.txt ! ! activate the TeamMembers on their images as given by TeamMembers_x.txt: DO intCounter = 1 , Object % m_intNumberOfTeamMembers ! (mA_intTeamMemberImages99(intCounter) gives the (remote) image number of the TeamMember): 160414 intTeamMemberImageNumber = Object % mA_intTeamMemberImages99 ( intCounter ) ! 160414 CALL IItema_ActivateTeamMemberImage ( Object , intTeamMemberImageNumber ) ! 160414 END DO ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtema_Start !___________________________________________________________ ! SUBROUTINE IItema_LoadTeamMembers ( Object ) ! method, loads the data from TeamMembers_x.txt TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object ! TYPE ( OOOPstpa_adtStartPath ) :: UUStartPath1 ! CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenStatus = 'OLD' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAccess = 'SEQUENTIAL' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenForm = 'FORMATTED' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenPosition = 'REWIND' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAction = 'READ' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenBlank = 'NULL' ! CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrStartPath ! ! for INQUIRE: LOGICAL ( KIND = OOOGglob_klog ) :: logExist INTEGER ( OOOGglob_kint ) :: intRecl = 0 ! INTEGER ( OOOGglob_kint ) :: FileUnit = 0 INTEGER ( OOOGglob_kint ) :: FileStatus = 0 ! File-error-Status CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrPathAndFileName = \"\" INTEGER ( OOOGglob_kint ) :: intNumberOfTeamMembers ! CALL OOOGglob_subSetProcedures ( \"IItema_LoadTeamMembers\" ) ! FileUnit = OOOGglob_FileUnitA ! ! get the path to the files directory: CALL OOOPstpa_LoadPath ( UUStartPath1 ) CALL OOOPstpaG_chrPath ( UUStartPath1 , chrStartPath ) ! chrPathAndFileName = TRIM ( chrStartPath ) // Object % m_chrTeamMembersFileName ! OPEN ( UNIT = FileUnit , IOSTAT = FileStatus , FILE = TRIM ( chrPathAndFileName ), & STATUS = TRIM ( OpenStatus ), ACCESS = TRIM ( OpenAccess ), FORM = TRIM ( OpenForm ), & POSITION = TRIM ( OpenPosition ), ACTION = TRIM ( OpenAction ), & BLANK = TRIM ( OpenBlank ), DELIM = 'APOSTROPHE' ) ! IF ( FileStatus /= 0 ) THEN CALL IItema_ErrorHandler ( Object , \"File-Open-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) intNumberOfTeamMembers ! IF ( FileStatus /= 0 ) THEN CALL IItema_ErrorHandler ( Object , \"File READ-Error 1\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOPtemaS_intNumberOfTeamMembers ( Object , intNumberOfTeamMembers ) ! contains error handling ! ! read the TeamMember image numbers from file: READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) Object % mA_intTeamMemberImages99 ( 1 : Object % m_intNumberOfTeamMembers ) ! IF ( FileStatus /= 0 ) THEN ! FileStatus error CALL IItema_ErrorHandler ( Object , \"File READ-Error 2\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CLOSE ( UNIT = FileUnit , IOSTAT = FileStatus , STATUS = 'KEEP' ) IF ( FileStatus /= 0 ) THEN CALL IItema_ErrorHandler ( Object , \"File-Close-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOGglob_subResetProcedures ! END SUBROUTINE IItema_LoadTeamMembers !___________________________________________________________ ! SUBROUTINE IItema_ActivateTeamMemberImage ( Object , intTeamMemberImageNumber ) ! 160414 !!!  synchronization counterpart routine  !!!! !!!  for IIimma_SYNC_CheckActivityFlag    !!!! ! starts a single TeamMember on its image ! USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intTeamMemberImageNumber ! 160414 ! CALL OOOGglob_subSetProcedures ( \"IItema_ActivateTeamMemberImage\" ) ! communicate with remote or local PGAS memory to activate a TeamMember image: 160414 CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % TeamMember , & intTeamMemberImageNumber ) ! 160414 ! CALL OOOGglob_subResetProcedures END SUBROUTINE IItema_ActivateTeamMemberImage !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Error Handling:   ************************* !********************************************************** !__________________________________________________________ ! !Private SUBROUTINE IItema_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT-Routines TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IItema_ErrorHandler !__________________________________________________________ END MODULE OOOPtema_admTeamManager","tags":"","loc":"sourcefile/oooptema_admteammanager.f90.html","title":"OOOPtema_admTeamManager.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf MODULE OOOPstpa_admStartPath !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPstpa !******************************************************** ! Abstract Data Type (ADT):         OOOPstpa_adtStartPath ! Abstract Data Type Module (adm):  OOOPstpa_admStartPath.f90 !******************************************************** ! Purpose:                    StartPath-Object ! Language:                   mainly Fortran 95 with Fortran 2008 coarrays ! Programmer:                 Michael Siehl ! Date:                       January 2016 !******************************************************** ! Naming Conventions: ! !  for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !  for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !  for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !  other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** !___________________________________________________________ USE OOOGglob_Globals USE OOOEerro_admError ! !___________________________________________________________ IMPLICIT NONE !___________________________________________________________ PRIVATE !___________________________________________________________ ! !***************************** ! access routines for scalar * ! and static array members:  * !***************************** PUBLIC :: OOOPstpaS_chrPath , OOOPstpaG_chrPath !___________________________________________________________ ! !******************** !** Program Logic: ** !******************** PUBLIC :: OOOPstpa_LoadPath !___________________________________________________________ ! !********************* !** Error Handling: ** !********************* ! PRIVATE :: IIstpa_ErrorHandler !___________________________________________________________ ! !******************************************************** !*** Abstract Data Type Declaration: ******************** !******************************************************** TYPE , PUBLIC :: OOOPstpa_adtStartPath PRIVATE !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: m_chrPath = \"\" TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! Error-Collection ! END TYPE OOOPstpa_adtStartPath !__________________________________________________________ ! CONTAINS !################################################################################################## !################################################################################################## !################################################################################################## !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !___________________________________________________________ SUBROUTINE OOOPstpaS_chrPath ( Object , chrPath ) TYPE ( OOOPstpa_adtStartPath ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrPath CALL OOOGglob_subSetProcedures ( \"OOOPstpaS_chrPath\" ) Object % m_chrPath = chrPath CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPstpaS_chrPath !********** SUBROUTINE OOOPstpaG_chrPath ( Object , chrPath ) TYPE ( OOOPstpa_adtStartPath ), INTENT ( IN ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( OUT ) :: chrPath CALL OOOGglob_subSetProcedures ( \"OOOPstpaG_chrPath\" ) chrPath = Object % m_chrPath CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPstpaG_chrPath !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !******************* ! Program Logic:   * !******************* !___________________________________________________________ ! SUBROUTINE OOOPstpa_LoadPath ( Object ) ! method, loads the start-Path from file TYPE ( OOOPstpa_adtStartPath ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenStatus = 'OLD' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAccess = 'SEQUENTIAL' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenForm = 'FORMATTED' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenPosition = 'REWIND' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAction = 'READ' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenBlank = 'NULL' ! ! for INQUIRE: LOGICAL ( KIND = OOOGglob_klog ) :: logExist INTEGER ( OOOGglob_kint ) :: intRecl = 0 ! INTEGER ( OOOGglob_kint ) :: FileStatus = 0 ! File-error-Status CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrPathAndFileName = \"\" INTEGER ( OOOGglob_kint ) :: FileUnit = 0 ! CALL OOOGglob_subSetProcedures ( \"OOOPstpa_LoadPath\" ) ! chrPathAndFileName = 'start.txt' ! the file must be in the program directory FileUnit = OOOGglob_FileUnitA ! ! check the existence of the file: INQUIRE ( FILE = chrPathAndFileName , EXIST = logExist ) IF (. NOT . logExist ) THEN ! File does not exist CALL IIstpa_ErrorHandler ( Object , & \"INQUIRE: File does not exist\" , & OOOGglob_warning , OOOGglob_NoErrNumber ) CALL OOOGglob_subResetProcedures Return END IF ! OPEN ( UNIT = FileUnit , IOSTAT = FileStatus , FILE = TRIM ( chrPathAndFileName ), & STATUS = TRIM ( OpenStatus ), ACCESS = TRIM ( OpenAccess ), FORM = TRIM ( OpenForm ), & POSITION = TRIM ( OpenPosition ), ACTION = TRIM ( OpenAction ), & BLANK = TRIM ( OpenBlank ), DELIM = 'APOSTROPHE' ) IF ( FileStatus . NE . 0 ) THEN CALL IIstpa_ErrorHandler ( Object , \"File-Open-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) Object % m_chrPath IF ( FileStatus . NE . 0 ) THEN CALL IIstpa_ErrorHandler ( Object , \"File-Read-error 1\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CLOSE ( UNIT = FileUnit , IOSTAT = FileStatus , STATUS = 'KEEP' ) IF ( FileStatus . NE . 0 ) THEN CALL IIstpa_ErrorHandler ( Object , \"File-Close-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOGglob_subResetProcedures ! END SUBROUTINE OOOPstpa_LoadPath !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Error Handling:   ************************* !********************************************************** !__________________________________________________________ !Private SUBROUTINE IIstpa_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT-Routines TYPE ( OOOPstpa_adtStartPath ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIstpa_ErrorHandler !__________________________________________________________ END MODULE OOOPstpa_admStartPath","tags":"","loc":"sourcefile/ooopstpa_admstartpath.f90.html","title":"OOOPstpa_admStartPath.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf MODULE OOOPinmc_admInitialManager_CA !************************************************ ! Namespace: OOOP - Parallel !************************************************ ! Abstact Data Type Short Name: OOOPinmc !******************************************************** ! Abstract Data Type (ADT):         OOOPinmc_adtInitialManager_CA ! Abstract Data Type Module (adm):  OOOPinmc_admInitialManager_CA.f90 !******************************************************** ! Purpose:                    InitialManager_CA-Object ! Language:                   mainly Fortran 95 with Fortran 2008 coarrays ! Programmer:                 Michael Siehl ! Date:                       January 2016 !******************************************************** ! Naming Conventions: ! !  for scalar members: !                             m: ADT member !                             S: property set, G: property get, !                             CopyImgToImg: copy an ADT member image to image !  for array members: !                             A: array !                             mA: ADT array member !                             SA: set array property, GA: get array property, !                             CopyAImgToImg: copy an ADT array member image to image ! !  for elements of array members: !                             SAElement: set only one array element property !                             GAElement: get only one array element property !                             CopyAElementImgToImg: copy only one element of an ADT array member image to image ! !                             99: signals a static array member which has an upper array bound !                                 larger than necessary; the upper bound is given by a global parameter ! !  other naming conventions: !                             _CA: coarray routine / coarray declaration !                             _SYNC_: synchronization routine !                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image ! !                             DC: deep copy routine !                             Enum: enumeration ! !                             OO: public (outer) scope (the two leading namespace letters) !                             II: private (inner) scope !                             UU: sub-object !******************************************************** !___________________________________________________________ USE OOOGglob_Globals USE OOOEerro_admError !___________________________________________________________ IMPLICIT NONE !___________________________________________________________ PRIVATE !___________________________________________________________ ! !******************************* !****  Local ADT Routines:  **** !******************************* !*** ! access routines for scalar ! and static array members: !*** ! access routines for ! dynamic array members: ! !*** ! local ADT management: PUBLIC :: OOOPinmc_StructureConstructor !__________________________________________________________ ! !********************************* !****  Coarray ADT Routines:  **** !********************************* !*** ! access routines for scalar ! and static array members: PUBLIC :: OOOPinmcS_intNumberOfTeamManagers_CA , OOOPinmcG_intNumberOfTeamManagers_CA , & OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA PUBLIC :: OOOPinmcSA_intTeamManagerImages99_CA , OOOPinmcGA_intTeamManagerImages99_CA , & OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA PUBLIC :: OOOPinmcSA_chrTeamMembersFiles99_CA , OOOPinmcGA_chrTeamMembersFiles99_CA , & OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA !*** ! access routines for ! dynamic array members: !*** ! coarray ADT management: PUBLIC :: OOOPinmcDC_CopyCoarrayObjImgToImg_CA !___________________________________________________________ ! !*************************** !****  Error Handling:  **** !*************************** !*** ! local ADT: PRIVATE :: IIinmc_ErrorHandler !*** ! coarray ADT: PRIVATE :: IIinmc_ImageNumberBoundError_CA !___________________________________________________________ ! !************************ !****  Enumerations:  *** !************************ ! !___________________________________________________________ ! !******************************************************** !***  Abstract Data Type Specification: ***************** !******************************************************** TYPE , PUBLIC :: OOOPinmc_adtInitialManager_CA PRIVATE !***** INTEGER ( OOOGglob_kint ) :: m_intNumberOfTeamManagers = 0 !***** INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ) :: mA_intTeamManagerImages99 !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ) :: mA_chrTeamMembersFiles99 !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPinmc_adtInitialManager_CA !__________________________________________________________ ! !**************************************************** !***  Corresponding Coarray Declarations:  ********** !**************************************************** !*** TYPE ( OOOPinmc_adtInitialManager_CA ), PUBLIC , CODIMENSION [ * ], SAVE :: OOOPinmcInitialManager_CA_1 ! !__________________________________________________________ CONTAINS !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Local ADT Routines: *********************** !********************************************************** !************************* ! local ADT management:  * !************************* !___________________________________________________________ ! SUBROUTINE OOOPinmc_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPinmc_adtInitialManager_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPinmc_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmc_StructureConstructor !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines: ********************* !********************************************************** !******************************* ! access routines for scalar   * ! and static array members:    * !******************************* !___________________________________________________________ ! SUBROUTINE OOOPinmcS_intNumberOfTeamManagers_CA ( Object_CA , intNumberOfTeamManagers , & intImageNumber ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intNumberOfTeamManagers INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcS_intNumberOfTeamManagers_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( intNumberOfTeamManagers > OOOGglob_TeamManagers_UpperBound ) & THEN CALL IIinmc_ErrorHandler ( Object_CA , \"to many elements\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_intNumberOfTeamManagers = intNumberOfTeamManagers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcS_intNumberOfTeamManagers_CA !********** SUBROUTINE OOOPinmcG_intNumberOfTeamManagers_CA ( Object_CA , intNumberOfTeamManagers , & intImageNumber ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intNumberOfTeamManagers INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcG_intNumberOfTeamManagers_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! intNumberOfTeamManagers = Object_CA [ intImageNumber ] % m_intNumberOfTeamManagers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcG_intNumberOfTeamManagers_CA !********** SUBROUTINE OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % m_intNumberOfTeamManagers = Object_CA [ intImageNumberToCopyFrom ] % m_intNumberOfTeamManagers ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA !___________ ! SUBROUTINE OOOPinmcSA_intTeamManagerImages99_CA ( Object_CA , intTeamManagerImages99 ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ), INTENT ( IN ) :: intTeamManagerImages99 CALL OOOGglob_subSetProcedures & ( \"OOOPinmcSA_intTeamManagerImages99_CA\" ) Object_CA % mA_intTeamManagerImages99 = intTeamManagerImages99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcSA_intTeamManagerImages99_CA !********** SUBROUTINE OOOPinmcGA_intTeamManagerImages99_CA ( Object_CA , intTeamManagerImages99 ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ), INTENT ( OUT ) :: intTeamManagerImages99 CALL OOOGglob_subSetProcedures & ( \"OOOPinmcGA_intTeamManagerImages99_CA\" ) intTeamManagerImages99 = Object_CA % mA_intTeamManagerImages99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcGA_intTeamManagerImages99_CA !********** SUBROUTINE OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy only the required part of the array: ! IF ( Object_CA % m_intNumberOfTeamManagers & . LT . 1 ) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid number of TeamManagers\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % mA_intTeamManagerImages99 ( 1 : Object_CA % m_intNumberOfTeamManagers ) & = Object_CA [ intImageNumberToCopyFrom ] % mA_intTeamManagerImages99 ( 1 : Object_CA % m_intNumberOfTeamManagers ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA !__________________________________________________________ ! SUBROUTINE OOOPinmcSA_chrTeamMembersFiles99_CA ( Object_CA , chrTeamMembersFiles99 ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ), INTENT ( IN ) :: chrTeamMembersFiles99 CALL OOOGglob_subSetProcedures & ( \"OOOPinmcSA_chrTeamMembersFiles99_CA\" ) Object_CA % mA_chrTeamMembersFiles99 = chrTeamMembersFiles99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcSA_chrTeamMembersFiles99_CA !********** SUBROUTINE OOOPinmcGA_chrTeamMembersFiles99_CA ( Object_CA , chrTeamMembersFiles99 ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ), INTENT ( OUT ) :: chrTeamMembersFiles99 CALL OOOGglob_subSetProcedures & ( \"OOOPinmcGA_chrTeamMembersFiles99_CA\" ) chrTeamMembersFiles99 = Object_CA % mA_chrTeamMembersFiles99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcGA_chrTeamMembersFiles99_CA !********** SUBROUTINE OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy only the required part of the array: ! IF ( Object_CA % m_intNumberOfTeamManagers & . LT . 1 ) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid number of TeamManagers\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % mA_chrTeamMembersFiles99 ( 1 : Object_CA % m_intNumberOfTeamManagers ) & = Object_CA [ intImageNumberToCopyFrom ] % mA_chrTeamMembersFiles99 ( 1 : Object_CA % m_intNumberOfTeamManagers ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA !__________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !*************************** ! access routines for      * ! dynamic array members:   * !*************************** !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Coarray ADT Routines:  ******************** !********************************************************** !************************** ! coarray ADT management: * !************************** !___________________________________________________________ ! SUBROUTINE OOOPinmcDC_CopyCoarrayObjImgToImg_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) ! copy from any (remote) image to any other (remote) image ! (static members only) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status !****************************************** CALL OOOGglob_subSetProcedures & ( \"OOOPinmcDC_CopyCoarrayObjImgToImg_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! !******************************************* ! copy the properties: !**************** CALL OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** ! if necessary further properties must be copied here !******************************************* ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcDC_CopyCoarrayObjImgToImg_CA !___________________________________________________________ !################################################################################################## !################################################################################################## !################################################################################################## !********************************************************** !*************  Error Handling:   ************************* !********************************************************** !__________________________________________________________ ! !Private SUBROUTINE IIinmc_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPinmc_adtInitialManager_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIinmc_ErrorHandler !__________________________________________________________ ! !Private LOGICAL ( OOOGglob_klog ) FUNCTION IIinmc_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IIinmc_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IIinmc_ImageNumberBoundError_CA = . TRUE . END IF ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IIinmc_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IIinmc_ImageNumberBoundError_CA !__________________________________________________________ END MODULE OOOPinmc_admInitialManager_CA","tags":"","loc":"sourcefile/ooopinmc_adminitialmanager_ca.f90.html","title":"OOOPinmc_admInitialManager_CA.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Entry_Main_Sub definition. Source Code ! This file is part of: ! MPMD with Coarray Fortran Load Balancing â€“ Example Program ! copyright 2016 by Michael Siehl ! www.mpmd-with-coarray-fortran.de ! http://www.mpmd-with-coarray-fortran.de/MPMD_Load_Balancing_example.pdf !< *Entry_Main_Sub* definition. MODULE Main_Sub !< *Entry_Main_Sub* definition. ! CONTAINS ! !********** ! SUBROUTINE Entry_Main_Sub !< Main entry subroutine. !< !< @note Start the ImageManager on all images. ! USE OOOPimma_admImageManager ! IMPLICIT NONE ! CALL OOOPimma_Start ( OOOPimmaImageManager_1 ) ! start the ImageManager on all images ! END SUBROUTINE Entry_Main_Sub ! !********** ! END MODULE Main_Sub","tags":"","loc":"sourcefile/main_sub.f90.html","title":"Main_Sub.f90 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"type, public :: OOOPinma_adtInitialManager type~~ooopinma_adtinitialmanager~~InheritsGraph type~ooopinma_adtinitialmanager OOOPinma_adtInitialManager OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~ooopinma_adtinitialmanager m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), private :: m_intNumberOfTeamManagers = 0 **** array containing the image numbers of the TeamManager images: integer(kind=OOOGglob_kint), private, DIMENSION (1:OOOGglob_TeamManagers_UpperBound) :: mA_intTeamManagerImages99 **** array containing the file names of the TeamMembers files for each TeamManager: character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private, DIMENSION (1:OOOGglob_TeamManagers_UpperBound) :: mA_chrTeamMembersFiles99 type(OOOEerroc_colError), private :: m_UUerrocError Source Code TYPE , PUBLIC :: OOOPinma_adtInitialManager PRIVATE !**** INTEGER ( OOOGglob_kint ) :: m_intNumberOfTeamManagers = 0 !***** array containing the image numbers of the TeamManager images: INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ) :: mA_intTeamManagerImages99 !***** array containing the file names of the TeamMembers files for each TeamManager: CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ) :: mA_chrTeamMembersFiles99 !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error-Collection ! END TYPE OOOPinma_adtInitialManager","tags":"","loc":"type/ooopinma_adtinitialmanager.html","title":"OOOPinma_adtInitialManager â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPimsc_DontUse1 Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: InitialWaiting integer(kind=OOOGglob_kint), public :: TeamManager integer(kind=OOOGglob_kint), public :: TeamMember integer(kind=OOOGglob_kint), public :: ExecutionFinished Source Code TYPE , PUBLIC :: OOOPimsc_DontUse1 INTEGER ( KIND = OOOGglob_kint ) :: InitialWaiting ! = 1 INTEGER ( KIND = OOOGglob_kint ) :: TeamManager ! = 2 INTEGER ( KIND = OOOGglob_kint ) :: TeamMember ! = 3 ! 160414: INTEGER ( KIND = OOOGglob_kint ) :: ExecutionFinished ! = 4 END TYPE OOOPimsc_DontUse1","tags":"","loc":"type/ooopimsc_dontuse1.html","title":"OOOPimsc_DontUse1 â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPimsc_adtImageStatus_CA type~~ooopimsc_adtimagestatus_ca~~InheritsGraph type~ooopimsc_adtimagestatus_ca OOOPimsc_adtImageStatus_CA OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~ooopimsc_adtimagestatus_ca m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), private :: m_intImageActivityFlag = OOOPimscEnum_ImageActivityFlag%InitialWaiting type(OOOEerroc_colError), private :: m_UUerrocError Source Code TYPE , PUBLIC :: OOOPimsc_adtImageStatus_CA PRIVATE !***** INTEGER ( OOOGglob_kint ) :: m_intImageActivityFlag = OOOPimscEnum_ImageActivityFlag % InitialWaiting !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPimsc_adtImageStatus_CA","tags":"","loc":"type/ooopimsc_adtimagestatus_ca.html","title":"OOOPimsc_adtImageStatus_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPimma_adtImageManager type~~ooopimma_adtimagemanager~~InheritsGraph type~ooopimma_adtimagemanager OOOPimma_adtImageManager OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~ooopimma_adtimagemanager m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Abstract image manager. Components Type Visibility Attributes Name Initial type(OOOEerroc_colError), private :: m_UUerrocError error-Collection Source Code TYPE , PUBLIC :: OOOPimma_adtImageManager !< Abstract image manager. PRIVATE !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError !< error-Collection ! END TYPE OOOPimma_adtImageManager","tags":"","loc":"type/ooopimma_adtimagemanager.html","title":"OOOPimma_adtImageManager â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPtmec_adtTeamMember_CA type~~oooptmec_adtteammember_ca~~InheritsGraph type~oooptmec_adtteammember_ca OOOPtmec_adtTeamMember_CA OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~oooptmec_adtteammember_ca m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial type(OOOEerroc_colError), private :: m_UUerrocError Source Code TYPE , PUBLIC :: OOOPtmec_adtTeamMember_CA PRIVATE !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPtmec_adtTeamMember_CA","tags":"","loc":"type/oooptmec_adtteammember_ca.html","title":"OOOPtmec_adtTeamMember_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPtemc_adtTeamManager_CA type~~oooptemc_adtteammanager_ca~~InheritsGraph type~oooptemc_adtteammanager_ca OOOPtemc_adtTeamManager_CA OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~oooptemc_adtteammanager_ca m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private :: m_chrTeamMembersFileName integer(kind=OOOGglob_kint), private :: m_intNumberOfTeamMembers = 0 integer(kind=OOOGglob_kint), private, DIMENSION (1:OOOGglob_TeamMembers_UpperBound) :: mA_intTeamMemberImages99 type(OOOEerroc_colError), private :: m_UUerrocError Source Code TYPE , PUBLIC :: OOOPtemc_adtTeamManager_CA PRIVATE !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: m_chrTeamMembersFileName !***** INTEGER ( OOOGglob_kint ) :: m_intNumberOfTeamMembers = 0 !***** INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamMembers_UpperBound ) :: mA_intTeamMemberImages99 !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPtemc_adtTeamManager_CA","tags":"","loc":"type/oooptemc_adtteammanager_ca.html","title":"OOOPtemc_adtTeamManager_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPtmem_adtTeamMember type~~oooptmem_adtteammember~~InheritsGraph type~oooptmem_adtteammember OOOPtmem_adtTeamMember OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~oooptmem_adtteammember m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial type(OOOEerroc_colError), private :: m_UUerrocError Source Code TYPE , PUBLIC :: OOOPtmem_adtTeamMember PRIVATE !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error-Collection ! END TYPE OOOPtmem_adtTeamMember","tags":"","loc":"type/oooptmem_adtteammember.html","title":"OOOPtmem_adtTeamMember â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOEerroc_colError Errors handler class. Source Code TYPE , PUBLIC :: OOOEerroc_colError !< Errors handler class. PRIVATE ! END TYPE OOOEerroc_colError","tags":"","loc":"type/oooeerroc_colerror.html","title":"OOOEerroc_colError â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPimmc_adtImageManager_CA type~~ooopimmc_adtimagemanager_ca~~InheritsGraph type~ooopimmc_adtimagemanager_ca OOOPimmc_adtImageManager_CA OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~ooopimmc_adtimagemanager_ca m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), private :: m_intImageActivityFlag = OOOPimscEnum_ImageActivityFlag%InitialWaiting character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private :: m_chrTeamMembersFileName type(OOOEerroc_colError), private :: m_UUerrocError Source Code TYPE , PUBLIC :: OOOPimmc_adtImageManager_CA PRIVATE !***** INTEGER ( OOOGglob_kint ) :: m_intImageActivityFlag = OOOPimscEnum_ImageActivityFlag % InitialWaiting !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: m_chrTeamMembersFileName !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPimmc_adtImageManager_CA","tags":"","loc":"type/ooopimmc_adtimagemanager_ca.html","title":"OOOPimmc_adtImageManager_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPtema_adtTeamManager type~~oooptema_adtteammanager~~InheritsGraph type~oooptema_adtteammanager OOOPtema_adtTeamManager OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~oooptema_adtteammanager m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private :: m_chrTeamMembersFileName = \"\" integer(kind=OOOGglob_kint), private :: m_intNumberOfTeamMembers = 0 integer(kind=OOOGglob_kint), private, DIMENSION (1:OOOGglob_TeamMembers_UpperBound) :: mA_intTeamMemberImages99 type(OOOEerroc_colError), private :: m_UUerrocError Source Code TYPE , PUBLIC :: OOOPtema_adtTeamManager PRIVATE !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: m_chrTeamMembersFileName = \"\" !**** INTEGER ( OOOGglob_kint ) :: m_intNumberOfTeamMembers = 0 !***** INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamMembers_UpperBound ) :: mA_intTeamMemberImages99 !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error-Collection ! END TYPE OOOPtema_adtTeamManager","tags":"","loc":"type/oooptema_adtteammanager.html","title":"OOOPtema_adtTeamManager â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPstpa_adtStartPath type~~ooopstpa_adtstartpath~~InheritsGraph type~ooopstpa_adtstartpath OOOPstpa_adtStartPath OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~ooopstpa_adtstartpath m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial character(kind=OOOGglob_kcha,LEN=OOOGglob_Len200), private :: m_chrPath = \"\" type(OOOEerroc_colError), private :: m_UUerrocError Source Code TYPE , PUBLIC :: OOOPstpa_adtStartPath PRIVATE !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: m_chrPath = \"\" TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! Error-Collection ! END TYPE OOOPstpa_adtStartPath","tags":"","loc":"type/ooopstpa_adtstartpath.html","title":"OOOPstpa_adtStartPath â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"type, public :: OOOPinmc_adtInitialManager_CA type~~ooopinmc_adtinitialmanager_ca~~InheritsGraph type~ooopinmc_adtinitialmanager_ca OOOPinmc_adtInitialManager_CA OOOEerroc_colError OOOEerroc_colError OOOEerroc_colError->type~ooopinmc_adtinitialmanager_ca m_UUerrocError Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), private :: m_intNumberOfTeamManagers = 0 integer(kind=OOOGglob_kint), private, DIMENSION (1:OOOGglob_TeamManagers_UpperBound) :: mA_intTeamManagerImages99 character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private, DIMENSION (1:OOOGglob_TeamManagers_UpperBound) :: mA_chrTeamMembersFiles99 type(OOOEerroc_colError), private :: m_UUerrocError Source Code TYPE , PUBLIC :: OOOPinmc_adtInitialManager_CA PRIVATE !***** INTEGER ( OOOGglob_kint ) :: m_intNumberOfTeamManagers = 0 !***** INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ) :: mA_intTeamManagerImages99 !***** CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ) :: mA_chrTeamMembersFiles99 !***** TYPE ( OOOEerroc_colError ) :: m_UUerrocError ! error collection ! END TYPE OOOPinmc_adtInitialManager_CA","tags":"","loc":"type/ooopinmc_adtinitialmanager_ca.html","title":"OOOPinmc_adtInitialManager_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program "},{"text":"public subroutine OOOPinmaS_intNumberOfTeamManagers(Object, intNumberOfTeamManagers) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object integer(kind=OOOGglob_kint), intent(in) :: intNumberOfTeamManagers Calls proc~~ooopinmas_intnumberofteammanagers~~CallsGraph proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subresetprocedures proc~iiinma_errorhandler IIinma_ErrorHandler proc~ooopinmas_intnumberofteammanagers->proc~iiinma_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinma_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopinmas_intnumberofteammanagers~~CalledByGraph proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~iiinma_loadteammanagers proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocooopinmas_intnumberofteammanagersCalledByGraph = svgPanZoom('#procooopinmas_intnumberofteammanagersCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPinmaS_intNumberOfTeamManagers ( Object , intNumberOfTeamManagers ) TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intNumberOfTeamManagers INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures ( \"OOOPinmaS_intNumberOfTeamManagers\" ) ! IF ( intNumberOfTeamManagers > OOOGglob_TeamManagers_UpperBound ) THEN CALL IIinma_ErrorHandler ( Object , \"to many elements\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object % m_intNumberOfTeamManagers = intNumberOfTeamManagers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmaS_intNumberOfTeamManagers","tags":"","loc":"proc/ooopinmas_intnumberofteammanagers.html","title":"OOOPinmaS_intNumberOfTeamManagers â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmaG_intNumberOfTeamManagers(Object, intNumberOfTeamManagers) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(in) :: Object integer(kind=OOOGglob_kint), intent(out) :: intNumberOfTeamManagers Calls proc~~ooopinmag_intnumberofteammanagers~~CallsGraph proc~ooopinmag_intnumberofteammanagers OOOPinmaG_intNumberOfTeamManagers proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmag_intnumberofteammanagers->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmag_intnumberofteammanagers->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPinmaG_intNumberOfTeamManagers ( Object , intNumberOfTeamManagers ) TYPE ( OOOPinma_adtInitialManager ), INTENT ( IN ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intNumberOfTeamManagers CALL OOOGglob_subSetProcedures ( \"OOOPinmaG_intNumberOfTeamManagers\" ) intNumberOfTeamManagers = Object % m_intNumberOfTeamManagers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmaG_intNumberOfTeamManagers","tags":"","loc":"proc/ooopinmag_intnumberofteammanagers.html","title":"OOOPinmaG_intNumberOfTeamManagers â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinma_StructureConstructor(Object) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object Calls proc~~ooopinma_structureconstructor~~CallsGraph proc~ooopinma_structureconstructor OOOPinma_StructureConstructor proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinma_structureconstructor->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopinma_structureconstructor~~CalledByGraph proc~ooopinma_structureconstructor OOOPinma_StructureConstructor proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~ooopinma_structureconstructor proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocooopinma_structureconstructorCalledByGraph = svgPanZoom('#procooopinma_structureconstructorCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPinma_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPinma_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinma_StructureConstructor","tags":"","loc":"proc/ooopinma_structureconstructor.html","title":"OOOPinma_StructureConstructor â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinma_Start(Object) Uses: OOOPimsc_admImageStatus_CA Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object Description Calls proc~~ooopinma_start~~CallsGraph proc~ooopinma_start OOOPinma_Start ma_intteammanagerimages99 ma_intteammanagerimages99 proc~ooopinma_start->ma_intteammanagerimages99 proc~ooopinma_structureconstructor OOOPinma_StructureConstructor proc~ooopinma_start->proc~ooopinma_structureconstructor proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinma_start->proc~ooogglob_subresetprocedures proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinma_start->proc~ooogglob_subsetprocedures proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~ooopinma_start->proc~iiinma_loadteammanagers ma_chrteammembersfiles99 ma_chrteammembersfiles99 proc~ooopinma_start->ma_chrteammembersfiles99 proc~ooopinma_structureconstructor->proc~ooogglob_subresetprocedures proc~ooopinma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~iiinma_activateteammanagerimage->proc~ooogglob_subresetprocedures proc~iiinma_activateteammanagerimage->proc~ooogglob_subsetprocedures proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopimsc_structureconstructor_ca OOOPimsc_StructureConstructor_CA proc~iiinma_activateteammanagerimage->proc~ooopimsc_structureconstructor_ca proc~iiinma_loadteammanagers->ma_intteammanagerimages99 proc~iiinma_loadteammanagers->proc~ooogglob_subresetprocedures proc~iiinma_loadteammanagers->proc~ooogglob_subsetprocedures proc~iiinma_loadteammanagers->ma_chrteammembersfiles99 proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iiinma_loadteammanagers->proc~ooopstpag_chrpath proc~iiinma_errorhandler IIinma_ErrorHandler proc~iiinma_loadteammanagers->proc~iiinma_errorhandler proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subresetprocedures proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subsetprocedures proc~iiimmc_errorhandler->proc~oooeerroc_addobject proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~iiinma_errorhandler->proc~oooeerroc_addobject proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subresetprocedures proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subsetprocedures proc~ooopinmas_intnumberofteammanagers->proc~iiinma_errorhandler proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~iistpa_errorhandler->proc~oooeerroc_addobject var panprocooopinma_startCallsGraph = svgPanZoom('#procooopinma_startCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopinma_start~~CalledByGraph proc~ooopinma_start OOOPinma_Start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: intCounter = 0 Source Code SUBROUTINE OOOPinma_Start ( Object ) USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object ! INTEGER ( OOOGglob_kint ) :: intCounter = 0 ! CALL OOOGglob_subSetProcedures ( \"OOOPinma_Start\" ) ! CALL OOOPinma_StructureConstructor ( Object ) ! !******* CALL IIinma_LoadTeamManagers ( Object ) ! from TeamManagers.txt ! ! activate the TeamManagers on the (remote) images as given by TeamManagers.txt: DO intCounter = 1 , Object % m_intNumberOfTeamManagers ! (Object % mA_intTeamManagerImages99(intCounter) gives the (remote) image number) ! (Object % mA_chrTeamMembersFiles99(intCounter) gives the name of the file, !       containing the TeamManager's number of TeamMembers as well as the TeamMembers !       image numbers) : CALL IIinma_ActivateTeamManagerImage ( Object , Object % mA_intTeamManagerImages99 ( intCounter ), & Object % mA_chrTeamMembersFiles99 ( intCounter )) END DO ! !160414: ! communicate with local PGAS memory to finish image execution: CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % & ExecutionFinished , THIS_IMAGE ()) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinma_Start","tags":"","loc":"proc/ooopinma_start.html","title":"OOOPinma_Start â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IIinma_LoadTeamManagers(Object) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object Calls proc~~iiinma_loadteammanagers~~CallsGraph proc~iiinma_loadteammanagers IIinma_LoadTeamManagers ma_intteammanagerimages99 ma_intteammanagerimages99 proc~iiinma_loadteammanagers->ma_intteammanagerimages99 proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~iiinma_loadteammanagers->proc~ooogglob_subsetprocedures proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iiinma_loadteammanagers->proc~ooopstpag_chrpath proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~iiinma_loadteammanagers->proc~ooogglob_subresetprocedures proc~iiinma_errorhandler IIinma_ErrorHandler proc~iiinma_loadteammanagers->proc~iiinma_errorhandler proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath ma_chrteammembersfiles99 ma_chrteammembersfiles99 proc~iiinma_loadteammanagers->ma_chrteammembersfiles99 proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinma_errorhandler->proc~oooeerroc_addobject proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subsetprocedures proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subresetprocedures proc~ooopinmas_intnumberofteammanagers->proc~iiinma_errorhandler proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~iistpa_errorhandler->proc~oooeerroc_addobject var panprociiinma_loadteammanagersCallsGraph = svgPanZoom('#prociiinma_loadteammanagersCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iiinma_loadteammanagers~~CalledByGraph proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~iiinma_loadteammanagers proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type(OOOPstpa_adtStartPath), public :: UUStartPath1 character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenStatus = 'OLD' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenAccess = 'SEQUENTIAL' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenForm = 'FORMATTED' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenPosition = 'REWIND' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenAction = 'READ' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenBlank = 'NULL' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len200), public :: chrStartPath logical(kind=OOOGglob_klog), public :: logExist integer(kind=OOOGglob_kint), public :: intRecl = 0 integer(kind=OOOGglob_kint), public :: FileUnit = 0 integer(kind=OOOGglob_kint), public :: FileStatus = 0 character(kind=OOOGglob_kcha,LEN=OOOGglob_Len200), public :: chrPathAndFileName = \"\" integer(kind=OOOGglob_kint), public :: intCounter integer(kind=OOOGglob_kint), public :: intNumberOfTeamManagers Source Code SUBROUTINE IIinma_LoadTeamManagers ( Object ) ! method, loads the data from TeamManagers.txt TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object ! TYPE ( OOOPstpa_adtStartPath ) :: UUStartPath1 ! CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenStatus = 'OLD' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAccess = 'SEQUENTIAL' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenForm = 'FORMATTED' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenPosition = 'REWIND' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAction = 'READ' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenBlank = 'NULL' ! CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrStartPath ! ! for INQUIRE: LOGICAL ( KIND = OOOGglob_klog ) :: logExist INTEGER ( OOOGglob_kint ) :: intRecl = 0 ! INTEGER ( OOOGglob_kint ) :: FileUnit = 0 INTEGER ( OOOGglob_kint ) :: FileStatus = 0 ! File-error-Status CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrPathAndFileName = \"\" INTEGER ( OOOGglob_kint ) :: intCounter ! do loop counter INTEGER ( OOOGglob_kint ) :: intNumberOfTeamManagers ! CALL OOOGglob_subSetProcedures ( \"IIinma_LoadTeamManagers\" ) ! FileUnit = OOOGglob_FileUnitA ! CALL OOOPstpa_LoadPath ( UUStartPath1 ) CALL OOOPstpaG_chrPath ( UUStartPath1 , chrStartPath ) ! chrPathAndFileName = TRIM ( chrStartPath ) // 'TeamManagers.txt' ! OPEN ( UNIT = FileUnit , IOSTAT = FileStatus , FILE = TRIM ( chrPathAndFileName ), & STATUS = TRIM ( OpenStatus ), ACCESS = TRIM ( OpenAccess ), FORM = TRIM ( OpenForm ), & POSITION = TRIM ( OpenPosition ), ACTION = TRIM ( OpenAction ), & BLANK = TRIM ( OpenBlank ), DELIM = 'APOSTROPHE' ) ! IF ( FileStatus /= 0 ) THEN CALL IIinma_ErrorHandler ( Object , \"File Open-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) intNumberOfTeamManagers ! IF ( FileStatus /= 0 ) THEN CALL IIinma_ErrorHandler ( Object , \"File READ-Error 1\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOPinmaS_intNumberOfTeamManagers ( Object , intNumberOfTeamManagers ) ! contains error handling ! ! read the TeamManagerImages and there TeamMembers file name from the TeamManagers.txt file DO intCounter = 1 , Object % m_intNumberOfTeamManagers READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) Object % mA_intTeamManagerImages99 ( intCounter ), & Object % mA_chrTeamMembersFiles99 ( intCounter ) ! IF ( FileStatus /= 0 ) THEN ! FileStatus error CALL IIinma_ErrorHandler ( Object , \"File READ-Error 2\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF END DO ! CLOSE ( UNIT = FileUnit , IOSTAT = FileStatus , STATUS = 'KEEP' ) IF ( FileStatus /= 0 ) THEN CALL IIinma_ErrorHandler ( Object , \"File-Close-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOGglob_subResetProcedures ! END SUBROUTINE IIinma_LoadTeamManagers","tags":"","loc":"proc/iiinma_loadteammanagers.html","title":"IIinma_LoadTeamManagers â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IIinma_ActivateTeamManagerImage(Object, intTeamManagerImageNumber, chrTeamMembersFileName) Uses: OOOPimmc_admImageManager_CA OOOPimsc_admImageStatus_CA Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(in) :: Object integer(kind=OOOGglob_kint), intent(in) :: intTeamManagerImageNumber character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), intent(in) :: chrTeamMembersFileName Calls proc~~iiinma_activateteammanagerimage~~CallsGraph proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~iiinma_activateteammanagerimage->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~iiinma_activateteammanagerimage->proc~ooogglob_subresetprocedures proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopimsc_structureconstructor_ca OOOPimsc_StructureConstructor_CA proc~iiinma_activateteammanagerimage->proc~ooopimsc_structureconstructor_ca proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subsetprocedures proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subresetprocedures proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler->proc~oooeerroc_addobject proc~iiimsc_errorhandler->proc~oooeerroc_addobject var panprociiinma_activateteammanagerimageCallsGraph = svgPanZoom('#prociiinma_activateteammanagerimageCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iiinma_activateteammanagerimage~~CalledByGraph proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprociiinma_activateteammanagerimageCalledByGraph = svgPanZoom('#prociiinma_activateteammanagerimageCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IIinma_ActivateTeamManagerImage ( Object , intTeamManagerImageNumber , chrTeamMembersFileName ) !!!  synchronization counterpart routine  !!!! !!!  for IIimma_SYNC_CheckActivityFlag    !!!! ! activate a TeamManager on a remote image (as given by TeamManagers.txt) ! USE OOOPimmc_admImageManager_CA ! access corresponding coarrays to USE OOOPimsc_admImageStatus_CA ! communicate with remote or local PGAS memory ! TYPE ( OOOPinma_adtInitialManager ), INTENT ( IN ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intTeamManagerImageNumber CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ), INTENT ( IN ) :: chrTeamMembersFileName ! CALL OOOGglob_subSetProcedures ( \"IIinma_ActivateTeamManagerImage\" ) ! ! firstly, set up the required data on the remote image: CALL OOOPimmcS_chrTeamMembersFileName_CA ( OOOPimmcImageManager_CA_1 , chrTeamMembersFileName , & intTeamManagerImageNumber ) ! set the activity flag on the remote image: CALL OOOPimsc_StructureConstructor_CA ( OOOPimscImageStatus_CA_1 ) CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % TeamManager , & intTeamManagerImageNumber ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE IIinma_ActivateTeamManagerImage","tags":"","loc":"proc/iiinma_activateteammanagerimage.html","title":"IIinma_ActivateTeamManagerImage â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IIinma_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Calls proc~~iiinma_errorhandler~~CallsGraph proc~iiinma_errorhandler IIinma_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinma_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iiinma_errorhandler~~CalledByGraph proc~iiinma_errorhandler IIinma_ErrorHandler proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~ooopinmas_intnumberofteammanagers->proc~iiinma_errorhandler proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~iiinma_loadteammanagers->proc~iiinma_errorhandler proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~iiinma_loadteammanagers proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprociiinma_errorhandlerCalledByGraph = svgPanZoom('#prociiinma_errorhandlerCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IIinma_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT-Routines TYPE ( OOOPinma_adtInitialManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIinma_ErrorHandler","tags":"","loc":"proc/iiinma_errorhandler.html","title":"IIinma_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private function IIimsc_ImageNumberBoundError_CA(Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Called By proc~~iiimsc_imagenumberbounderror_ca~~CalledByGraph proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca OOOPimscDC_CopyCoarrayObjImgToImg_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~iiimsc_imagenumberbounderror_ca proc~ooopimsccopyimgtoimg_intimageactivityflag_ca OOOPimscCopyImgToImg_intImageActivityFlag_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooopimsccopyimgtoimg_intimageactivityflag_ca proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~oooptmem_start OOOPtmem_Start proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprociiimsc_imagenumberbounderror_caCalledByGraph = svgPanZoom('#prociiimsc_imagenumberbounderror_caCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code LOGICAL ( OOOGglob_klog ) FUNCTION IIimsc_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IIimsc_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IIimsc_ImageNumberBoundError_CA = . TRUE . END IF ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IIimsc_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IIimsc_ImageNumberBoundError_CA","tags":"","loc":"proc/iiimsc_imagenumberbounderror_ca.html","title":"IIimsc_ImageNumberBoundError_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimsc_StructureConstructor(Object) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout) :: Object Calls proc~~ooopimsc_structureconstructor~~CallsGraph proc~ooopimsc_structureconstructor OOOPimsc_StructureConstructor proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimsc_structureconstructor->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimsc_structureconstructor->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPimsc_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPimsc_adtImageStatus_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPimsc_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimsc_StructureConstructor","tags":"","loc":"proc/ooopimsc_structureconstructor.html","title":"OOOPimsc_StructureConstructor â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimscS_intImageActivityFlag_CA(Object_CA, intImageActivityFlag, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageActivityFlag integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~ooopimscs_intimageactivityflag_ca~~CallsGraph proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimscs_intimageactivityflag_ca~~CalledByGraph proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~oooptmem_start OOOPtmem_Start proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocooopimscs_intimageactivityflag_caCalledByGraph = svgPanZoom('#procooopimscs_intimageactivityflag_caCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimscS_intImageActivityFlag_CA ( Object_CA , intImageActivityFlag , & intImageNumber ) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageActivityFlag INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimscS_intImageActivityFlag_CA\" ) ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_intImageActivityFlag = intImageActivityFlag CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimscS_intImageActivityFlag_CA","tags":"","loc":"proc/ooopimscs_intimageactivityflag_ca.html","title":"OOOPimscS_intImageActivityFlag_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimscG_intImageActivityFlag_CA(Object_CA, intImageActivityFlag, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out) :: intImageActivityFlag integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~ooopimscg_intimageactivityflag_ca~~CallsGraph proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimscg_intimageactivityflag_ca~~CalledByGraph proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocooopimscg_intimageactivityflag_caCalledByGraph = svgPanZoom('#procooopimscg_intimageactivityflag_caCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimscG_intImageActivityFlag_CA ( Object_CA , intImageActivityFlag , & intImageNumber ) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intImageActivityFlag INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimscG_intImageActivityFlag_CA\" ) ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! intImageActivityFlag = Object_CA [ intImageNumber ] % m_intImageActivityFlag CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimscG_intImageActivityFlag_CA","tags":"","loc":"proc/ooopimscg_intimageactivityflag_ca.html","title":"OOOPimscG_intImageActivityFlag_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimscCopyImgToImg_intImageActivityFlag_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Calls proc~~ooopimsccopyimgtoimg_intimageactivityflag_ca~~CallsGraph proc~ooopimsccopyimgtoimg_intimageactivityflag_ca OOOPimscCopyImgToImg_intImageActivityFlag_CA proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject var panprocooopimsccopyimgtoimg_intimageactivityflag_caCallsGraph = svgPanZoom('#procooopimsccopyimgtoimg_intimageactivityflag_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimsccopyimgtoimg_intimageactivityflag_ca~~CalledByGraph proc~ooopimsccopyimgtoimg_intimageactivityflag_ca OOOPimscCopyImgToImg_intImageActivityFlag_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca OOOPimscDC_CopyCoarrayObjImgToImg_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooopimsccopyimgtoimg_intimageactivityflag_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimscCopyImgToImg_intImageActivityFlag_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimscCopyImgToImg_intImageActivityFlag_CA\" ) ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! Object_CA [ intImageNumberToCopyTo ] % m_intImageActivityFlag = Object_CA [ intImageNumberToCopyFrom ] % m_intImageActivityFlag ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimscCopyImgToImg_intImageActivityFlag_CA","tags":"","loc":"proc/ooopimsccopyimgtoimg_intimageactivityflag_ca.html","title":"OOOPimscCopyImgToImg_intImageActivityFlag_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimscDC_CopyCoarrayObjImgToImg_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Description copy the properties: if necessary further properties must be copied here Calls proc~~ooopimscdc_copycoarrayobjimgtoimg_ca~~CallsGraph proc~ooopimscdc_copycoarrayobjimgtoimg_ca OOOPimscDC_CopyCoarrayObjImgToImg_CA proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~iiimsc_errorhandler proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subsetprocedures proc~ooopimsccopyimgtoimg_intimageactivityflag_ca OOOPimscCopyImgToImg_intImageActivityFlag_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooopimsccopyimgtoimg_intimageactivityflag_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subresetprocedures proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~iiimsc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca var panprocooopimscdc_copycoarrayobjimgtoimg_caCallsGraph = svgPanZoom('#procooopimscdc_copycoarrayobjimgtoimg_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimscDC_CopyCoarrayObjImgToImg_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) ! copy from any (remote) image to any other (remote) image ! (static members only) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status !****************************************** CALL OOOGglob_subSetProcedures & ( \"OOOPimscDC_CopyCoarrayObjImgToImg_CA\" ) ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimsc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimsc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! !******************************************* ! copy the properties: !**************** CALL OOOPimscCopyImgToImg_intImageActivityFlag_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** ! if necessary further properties must be copied here !******************************************* ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimscDC_CopyCoarrayObjImgToImg_CA","tags":"","loc":"proc/ooopimscdc_copycoarrayobjimgtoimg_ca.html","title":"OOOPimscDC_CopyCoarrayObjImgToImg_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimsc_StructureConstructor_CA(Object_CA) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA Calls proc~~ooopimsc_structureconstructor_ca~~CallsGraph proc~ooopimsc_structureconstructor_ca OOOPimsc_StructureConstructor_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimsc_structureconstructor_ca~~CalledByGraph proc~ooopimsc_structureconstructor_ca OOOPimsc_StructureConstructor_CA proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~iiinma_activateteammanagerimage->proc~ooopimsc_structureconstructor_ca proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocooopimsc_structureconstructor_caCalledByGraph = svgPanZoom('#procooopimsc_structureconstructor_caCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPimsc_StructureConstructor_CA ( Object_CA ) TYPE ( OOOPimsc_adtImageStatus_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA ! CALL OOOGglob_subSetProcedures ( \"OOOPimsc_StructureConstructor_CA\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimsc_StructureConstructor_CA","tags":"","loc":"proc/ooopimsc_structureconstructor_ca.html","title":"OOOPimsc_StructureConstructor_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IIimsc_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Calls proc~~iiimsc_errorhandler~~CallsGraph proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iiimsc_errorhandler~~CalledByGraph proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscdc_copycoarrayobjimgtoimg_ca OOOPimscDC_CopyCoarrayObjImgToImg_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~iiimsc_errorhandler proc~ooopimsccopyimgtoimg_intimageactivityflag_ca OOOPimscCopyImgToImg_intImageActivityFlag_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooopimsccopyimgtoimg_intimageactivityflag_ca proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~oooptmem_start OOOPtmem_Start proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprociiimsc_errorhandlerCalledByGraph = svgPanZoom('#prociiimsc_errorhandlerCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IIimsc_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPimsc_adtImageStatus_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIimsc_ErrorHandler","tags":"","loc":"proc/iiimsc_errorhandler.html","title":"IIimsc_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimma_StructureConstructor(Object) Arguments Type Intent Optional Attributes Name type( OOOPimma_adtImageManager ), intent(inout) :: Object Abstract image manager. Description Structure constructor Calls proc~~ooopimma_structureconstructor~~CallsGraph proc~ooopimma_structureconstructor OOOPimma_StructureConstructor proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimma_structureconstructor->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimma_structureconstructor~~CalledByGraph proc~ooopimma_structureconstructor OOOPimma_StructureConstructor proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopimma_structureconstructor proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPimma_StructureConstructor ( Object ) !< Structure constructor TYPE ( OOOPimma_adtImageManager ), INTENT ( INOUT ) :: Object !< Abstract image manager. ! CALL OOOGglob_subSetProcedures ( \"OOOPimma_StructureConstructor\" ) ! ! initialize something here ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimma_StructureConstructor","tags":"","loc":"proc/ooopimma_structureconstructor.html","title":"OOOPimma_StructureConstructor â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimma_Start(Object) Arguments Type Intent Optional Attributes Name type( OOOPimma_adtImageManager ), intent(inout) :: Object Abstract image manager. Description Start image manager. Calls proc~~ooopimma_start~~CallsGraph proc~ooopimma_start OOOPimma_Start proc~ooopinma_start OOOPinma_Start proc~ooopimma_start->proc~ooopinma_start proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimma_start->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimma_start->proc~ooogglob_subresetprocedures images images proc~ooopimma_start->images proc~ooopimma_structureconstructor OOOPimma_StructureConstructor proc~ooopimma_start->proc~ooopimma_structureconstructor proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~ooopinma_start->proc~ooogglob_subsetprocedures proc~ooopinma_start->proc~ooogglob_subresetprocedures ma_intteammanagerimages99 ma_intteammanagerimages99 proc~ooopinma_start->ma_intteammanagerimages99 proc~ooopinma_structureconstructor OOOPinma_StructureConstructor proc~ooopinma_start->proc~ooopinma_structureconstructor proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~ooopinma_start->proc~iiinma_loadteammanagers ma_chrteammembersfiles99 ma_chrteammembersfiles99 proc~ooopinma_start->ma_chrteammembersfiles99 proc~ooopimma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopimma_structureconstructor->proc~ooogglob_subresetprocedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subsetprocedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subresetprocedures proc~oooptema_start OOOPtema_Start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~oooptmem_start OOOPtmem_Start proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~ooopinma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopinma_structureconstructor->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~iiinma_activateteammanagerimage->proc~ooogglob_subsetprocedures proc~iiinma_activateteammanagerimage->proc~ooogglob_subresetprocedures proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopimsc_structureconstructor_ca OOOPimsc_StructureConstructor_CA proc~iiinma_activateteammanagerimage->proc~ooopimsc_structureconstructor_ca proc~iiinma_loadteammanagers->proc~ooogglob_subsetprocedures proc~iiinma_loadteammanagers->proc~ooogglob_subresetprocedures proc~iiinma_loadteammanagers->ma_intteammanagerimages99 proc~iiinma_loadteammanagers->ma_chrteammembersfiles99 proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iiinma_loadteammanagers->proc~ooopstpag_chrpath proc~iiinma_errorhandler IIinma_ErrorHandler proc~iiinma_loadteammanagers->proc~iiinma_errorhandler proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subsetprocedures proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subresetprocedures proc~iiimmc_errorhandler->proc~oooeerroc_addobject proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures proc~iiinma_errorhandler->proc~oooeerroc_addobject proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subsetprocedures proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subresetprocedures proc~ooopinmas_intnumberofteammanagers->proc~iiinma_errorhandler proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~iistpa_errorhandler->proc~oooeerroc_addobject proc~oooptema_start->proc~ooogglob_subsetprocedures proc~oooptema_start->proc~ooogglob_subresetprocedures proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptemas_chrteammembersfilename OOOPtemaS_chrTeamMembersFileName proc~oooptema_start->proc~oooptemas_chrteammembersfilename proc~oooptema_structureconstructor OOOPtema_StructureConstructor proc~oooptema_start->proc~oooptema_structureconstructor ma_intteammemberimages99 ma_intteammemberimages99 proc~oooptema_start->ma_intteammemberimages99 proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_loadteammembers IItema_LoadTeamMembers proc~oooptema_start->proc~iitema_loadteammembers proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~oooptmem_start->proc~ooogglob_subsetprocedures proc~oooptmem_start->proc~ooogglob_subresetprocedures proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptmem_structureconstructor OOOPtmem_StructureConstructor proc~oooptmem_start->proc~oooptmem_structureconstructor proc~oooptemas_chrteammembersfilename->proc~ooogglob_subsetprocedures proc~oooptemas_chrteammembersfilename->proc~ooogglob_subresetprocedures proc~oooptema_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptema_structureconstructor->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subsetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~iitema_loadteammembers->proc~ooogglob_subsetprocedures proc~iitema_loadteammembers->proc~ooogglob_subresetprocedures proc~iitema_loadteammembers->proc~ooopstpag_chrpath proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~iitema_loadteammembers->ma_intteammemberimages99 proc~iitema_errorhandler IItema_ErrorHandler proc~iitema_loadteammembers->proc~iitema_errorhandler proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~iitema_errorhandler->proc~oooeerroc_addobject proc~oooptemas_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~oooptemas_intnumberofteammembers->proc~ooogglob_subresetprocedures proc~oooptemas_intnumberofteammembers->proc~iitema_errorhandler proc~oooptmem_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptmem_structureconstructor->proc~ooogglob_subresetprocedures var panprocooopimma_startCallsGraph = svgPanZoom('#procooopimma_startCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimma_start~~CalledByGraph proc~ooopimma_start OOOPimma_Start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPimma_Start ( Object ) !< Start image manager. TYPE ( OOOPimma_adtImageManager ), INTENT ( INOUT ) :: Object !< Abstract image manager. ! CALL OOOGglob_subSetProcedures ( \"OOOPimma_Start\" ) ! CALL OOOPimma_StructureConstructor ( Object ) SYNC ALL ! IF ( THIS_IMAGE () == 1 ) THEN ! on image 1 only: check if the number of images is not less 4, ! as a minimum requirement: IF ( NUM_IMAGES () . LT . 4 ) THEN WRITE ( * , * ) ' **************************************' WRITE ( * , * ) ' ** Total number of images is to small: ' , NUM_IMAGES (), '. ' WRITE ( * , * ) ' ** Total number of images must be greater' WRITE ( * , * ) ' ** than 3 for the program to execute !' WRITE ( * , * ) ' **** program execution stopped *******' WRITE ( * , * ) ' **************************************' ERROR STOP ! STOP only, crashes the Linux terminal window END IF ! SYNC IMAGES ( * ) ! all other images will wait for the executing image (image 1) ! to reach this (but do not wait for each other) ELSE SYNC IMAGES ( 1 ) ! image 1 will wait for each of the other (executing) images to reach this END IF !******** IF ( THIS_IMAGE () . GT . 1 ) THEN CALL IIimma_SYNC_CheckActivityFlag ( Object ) ! synchronization routine ELSE CALL OOOPinma_Start ( OOOPinmaInitialManager_1 ) ! start the InitialManager on image 1 ! 160414: CALL IIimma_SYNC_CheckActivityFlag ( Object ) ! synchronization routine, will finish execution on image 1 ! due to the call of subroutine IIinma_FinishExecution earlier ! in subroutine OOOPinma_Start END IF ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimma_Start","tags":"","loc":"proc/ooopimma_start.html","title":"OOOPimma_Start â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IIimma_SYNC_CheckActivityFlag(Object) Uses: OOOPimsc_admImageStatus_CA Arguments Type Intent Optional Attributes Name type( OOOPimma_adtImageManager ), intent(in) :: Object Description synchronization routine. Synchronization counterpart routines are: IIinma_ActivateTeamManagerImage IItema_ActivateTeamMemberImage Calls proc~~iiimma_sync_checkactivityflag~~CallsGraph proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~oooptema_start OOOPtema_Start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subresetprocedures proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~oooptmem_start OOOPtmem_Start proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~oooptema_start->proc~ooogglob_subsetprocedures proc~oooptema_start->proc~ooogglob_subresetprocedures proc~oooptemas_chrteammembersfilename OOOPtemaS_chrTeamMembersFileName proc~oooptema_start->proc~oooptemas_chrteammembersfilename proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptema_structureconstructor OOOPtema_StructureConstructor proc~oooptema_start->proc~oooptema_structureconstructor ma_intteammemberimages99 ma_intteammemberimages99 proc~oooptema_start->ma_intteammemberimages99 proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_loadteammembers IItema_LoadTeamMembers proc~oooptema_start->proc~iitema_loadteammembers proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~oooptmem_start->proc~ooogglob_subsetprocedures proc~oooptmem_start->proc~ooogglob_subresetprocedures proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptmem_structureconstructor OOOPtmem_StructureConstructor proc~oooptmem_start->proc~oooptmem_structureconstructor proc~oooptemas_chrteammembersfilename->proc~ooogglob_subsetprocedures proc~oooptemas_chrteammembersfilename->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~oooptema_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptema_structureconstructor->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subsetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~iitema_loadteammembers->proc~ooogglob_subsetprocedures proc~iitema_loadteammembers->proc~ooogglob_subresetprocedures proc~iitema_loadteammembers->ma_intteammemberimages99 proc~iitema_errorhandler IItema_ErrorHandler proc~iitema_loadteammembers->proc~iitema_errorhandler proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iitema_loadteammembers->proc~ooopstpag_chrpath proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject proc~iitema_errorhandler->proc~oooeerroc_addobject proc~oooptemas_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~oooptemas_intnumberofteammembers->proc~ooogglob_subresetprocedures proc~oooptemas_intnumberofteammembers->proc~iitema_errorhandler proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~iistpa_errorhandler->proc~oooeerroc_addobject proc~iiimmc_errorhandler->proc~oooeerroc_addobject proc~oooptmem_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptmem_structureconstructor->proc~ooogglob_subresetprocedures var panprociiimma_sync_checkactivityflagCallsGraph = svgPanZoom('#prociiimma_sync_checkactivityflagCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iiimma_sync_checkactivityflag~~CalledByGraph proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: intImageActivityFlag character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: chrTeamMembersFileName Source Code SUBROUTINE IIimma_SYNC_CheckActivityFlag ( Object ) !< synchronization routine. ! !< Synchronization counterpart routines are: !< !< - IIinma_ActivateTeamManagerImage !< - IItema_ActivateTeamMemberImage USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPimma_adtImageManager ), INTENT ( IN ) :: Object INTEGER ( OOOGglob_kint ) :: intImageActivityFlag CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: chrTeamMembersFileName ! CALL OOOGglob_subSetProcedures ( \"IIimma_SYNC_CheckActivityFlag\" ) ! ! DO ! check the ActivityFlag of the OOOPimscImageStatus_CA standalone coarray wrapper ! in local PGAS memory permanently until it is not InitialWaiting any more: CALL OOOPimscG_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , intImageActivityFlag , THIS_IMAGE ()) IF ( intImageActivityFlag /= OOOPimscEnum_ImageActivityFlag % InitialWaiting ) THEN EXIT END IF END DO ! ! DO ! 160414: check the ImageActivityFlag in local PGAS memory permanently until it has !         value OOOPimscEnum_ImageActivityFlag % ExecutionFinished ! 160414: CALL OOOPimscG_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , intImageActivityFlag , THIS_IMAGE ()) ! IF ( intImageActivityFlag == OOOPimscEnum_ImageActivityFlag % TeamManager ) THEN ! start a TeamManager CALL OOOPimmcG_chrTeamMembersFileName_CA ( OOOPimmcImageManager_CA_1 , chrTeamMembersFileName , THIS_IMAGE ()) CALL OOOPtema_Start ( OOOPtemaTeamManager_1 , chrTeamMembersFileName ) END IF ! IF ( intImageActivityFlag == OOOPimscEnum_ImageActivityFlag % TeamMember ) THEN ! start a TeamMember CALL OOOPtmem_Start ( OOOPtmemTeamMember_1 ) END IF ! 160414: finish image execution: IF ( intImageActivityFlag == OOOPimscEnum_ImageActivityFlag % ExecutionFinished ) THEN write ( * , * ) 'Execution finished on image' , THIS_IMAGE () EXIT END IF ! END DO ! 160414 CALL OOOGglob_subResetProcedures END SUBROUTINE IIimma_SYNC_CheckActivityFlag","tags":"","loc":"proc/iiimma_sync_checkactivityflag.html","title":"IIimma_SYNC_CheckActivityFlag â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IIimma_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPimma_adtImageManager ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Description ErrorHandler for the ADT-Routines Calls proc~~iiimma_errorhandler~~CallsGraph proc~iiimma_errorhandler IIimma_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimma_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IIimma_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) !< ErrorHandler for the ADT-Routines TYPE ( OOOPimma_adtImageManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIimma_ErrorHandler","tags":"","loc":"proc/iiimma_errorhandler.html","title":"IIimma_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public function IItmec_ImageNumberBoundError_CA(Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtmec_adtTeamMember_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Source Code LOGICAL ( OOOGglob_klog ) FUNCTION IItmec_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPtmec_adtTeamMember_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IItmec_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IItmec_ImageNumberBoundError_CA = . TRUE . END IF ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IItmec_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IItmec_ImageNumberBoundError_CA","tags":"","loc":"proc/iitmec_imagenumberbounderror_ca.html","title":"IItmec_ImageNumberBoundError_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtmec_StructureConstructor(Object) Arguments Type Intent Optional Attributes Name type( OOOPtmec_adtTeamMember_CA ), intent(inout) :: Object Calls proc~~oooptmec_structureconstructor~~CallsGraph proc~oooptmec_structureconstructor OOOPtmec_StructureConstructor proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptmec_structureconstructor->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptmec_structureconstructor->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtmec_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPtmec_adtTeamMember_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtmec_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtmec_StructureConstructor","tags":"","loc":"proc/oooptmec_structureconstructor.html","title":"OOOPtmec_StructureConstructor â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IItmec_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPtmec_adtTeamMember_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Calls proc~~iitmec_errorhandler~~CallsGraph proc~iitmec_errorhandler IItmec_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitmec_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IItmec_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPtmec_adtTeamMember_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IItmec_ErrorHandler","tags":"","loc":"proc/iitmec_errorhandler.html","title":"IItmec_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public function IItemc_ImageNumberBoundError_CA(Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Called By proc~~iitemc_imagenumberbounderror_ca~~CalledByGraph proc~iitemc_imagenumberbounderror_ca IItemc_ImageNumberBoundError_CA proc~oooptemccopyimgtoimg_chrteammembersfilename_ca OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~iitemc_imagenumberbounderror_ca proc~oooptemcs_intnumberofteammembers_ca OOOPtemcS_intNumberOfTeamMembers_CA proc~oooptemcs_intnumberofteammembers_ca->proc~iitemc_imagenumberbounderror_ca proc~oooptemcg_chrteammembersfilename_ca OOOPtemcG_chrTeamMembersFileName_CA proc~oooptemcg_chrteammembersfilename_ca->proc~iitemc_imagenumberbounderror_ca proc~oooptemccopyimgtoimg_intnumberofteammembers_ca OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~iitemc_imagenumberbounderror_ca proc~oooptemcs_chrteammembersfilename_ca OOOPtemcS_chrTeamMembersFileName_CA proc~oooptemcs_chrteammembersfilename_ca->proc~iitemc_imagenumberbounderror_ca proc~oooptemcdc_copycoarrayobjimgtoimg_ca OOOPtemcDC_CopyCoarrayObjImgToImg_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~iitemc_imagenumberbounderror_ca proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_chrteammembersfilename_ca proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_intnumberofteammembers_ca proc~oooptemccopyaimgtoimg_intteammemberimages99_ca OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyaimgtoimg_intteammemberimages99_ca proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~iitemc_imagenumberbounderror_ca proc~oooptemcg_intnumberofteammembers_ca OOOPtemcG_intNumberOfTeamMembers_CA proc~oooptemcg_intnumberofteammembers_ca->proc~iitemc_imagenumberbounderror_ca var panprociitemc_imagenumberbounderror_caCalledByGraph = svgPanZoom('#prociitemc_imagenumberbounderror_caCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code LOGICAL ( OOOGglob_klog ) FUNCTION IItemc_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IItemc_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IItemc_ImageNumberBoundError_CA = . TRUE . END IF ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IItemc_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IItemc_ImageNumberBoundError_CA","tags":"","loc":"proc/iitemc_imagenumberbounderror_ca.html","title":"IItemc_ImageNumberBoundError_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemc_StructureConstructor(Object) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout) :: Object Calls proc~~oooptemc_structureconstructor~~CallsGraph proc~oooptemc_structureconstructor OOOPtemc_StructureConstructor proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemc_structureconstructor->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemc_structureconstructor->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtemc_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPtemc_adtTeamManager_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtemc_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemc_StructureConstructor","tags":"","loc":"proc/oooptemc_structureconstructor.html","title":"OOOPtemc_StructureConstructor â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcS_chrTeamMembersFileName_CA(Object_CA, chrTeamMembersFileName, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrTeamMembersFileName integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~oooptemcs_chrteammembersfilename_ca~~CallsGraph proc~oooptemcs_chrteammembersfilename_ca OOOPtemcS_chrTeamMembersFileName_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemcs_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooptemcs_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemcs_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iitemc_imagenumberbounderror_ca IItemc_ImageNumberBoundError_CA proc~oooptemcs_chrteammembersfilename_ca->proc~iitemc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitemc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPtemcS_chrTeamMembersFileName_CA ( Object_CA , chrTeamMembersFileName , intImageNumber ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrTeamMembersFileName INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcS_chrTeamMembersFileName_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_chrTeamMembersFileName = chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcS_chrTeamMembersFileName_CA","tags":"","loc":"proc/oooptemcs_chrteammembersfilename_ca.html","title":"OOOPtemcS_chrTeamMembersFileName_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcG_chrTeamMembersFileName_CA(Object_CA, chrTeamMembersFileName, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(out) :: chrTeamMembersFileName integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~oooptemcg_chrteammembersfilename_ca~~CallsGraph proc~oooptemcg_chrteammembersfilename_ca OOOPtemcG_chrTeamMembersFileName_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemcg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooptemcg_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemcg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iitemc_imagenumberbounderror_ca IItemc_ImageNumberBoundError_CA proc~oooptemcg_chrteammembersfilename_ca->proc~iitemc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitemc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPtemcG_chrTeamMembersFileName_CA ( Object_CA , chrTeamMembersFileName , intImageNumber ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( OUT ) :: chrTeamMembersFileName INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcG_chrTeamMembersFileName_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! chrTeamMembersFileName = Object_CA [ intImageNumber ] % m_chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcG_chrTeamMembersFileName_CA","tags":"","loc":"proc/oooptemcg_chrteammembersfilename_ca.html","title":"OOOPtemcG_chrTeamMembersFileName_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Calls proc~~oooptemccopyimgtoimg_chrteammembersfilename_ca~~CallsGraph proc~oooptemccopyimgtoimg_chrteammembersfilename_ca OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iitemc_imagenumberbounderror_ca IItemc_ImageNumberBoundError_CA proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~iitemc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitemc_errorhandler->proc~oooeerroc_addobject var panprocoooptemccopyimgtoimg_chrteammembersfilename_caCallsGraph = svgPanZoom('#procoooptemccopyimgtoimg_chrteammembersfilename_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~oooptemccopyimgtoimg_chrteammembersfilename_ca~~CalledByGraph proc~oooptemccopyimgtoimg_chrteammembersfilename_ca OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca OOOPtemcDC_CopyCoarrayObjImgToImg_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_chrteammembersfilename_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy the array from image to image Object_CA [ intImageNumberToCopyTo ] % m_chrTeamMembersFileName & = Object_CA [ intImageNumberToCopyFrom ] % m_chrTeamMembersFileName ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA","tags":"","loc":"proc/oooptemccopyimgtoimg_chrteammembersfilename_ca.html","title":"OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcS_intNumberOfTeamMembers_CA(Object_CA, intNumberOfTeamMembers, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intNumberOfTeamMembers integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~oooptemcs_intnumberofteammembers_ca~~CallsGraph proc~oooptemcs_intnumberofteammembers_ca OOOPtemcS_intNumberOfTeamMembers_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemcs_intnumberofteammembers_ca->proc~ooogglob_subsetprocedures proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooptemcs_intnumberofteammembers_ca->proc~iitemc_errorhandler proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemcs_intnumberofteammembers_ca->proc~ooogglob_subresetprocedures proc~iitemc_imagenumberbounderror_ca IItemc_ImageNumberBoundError_CA proc~oooptemcs_intnumberofteammembers_ca->proc~iitemc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitemc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPtemcS_intNumberOfTeamMembers_CA ( Object_CA , intNumberOfTeamMembers , & intImageNumber ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intNumberOfTeamMembers INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcS_intNumberOfTeamMembers_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( intNumberOfTeamMembers > OOOGglob_TeamMembers_UpperBound ) THEN CALL IItemc_ErrorHandler ( Object_CA , \"to many elements\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_intNumberOfTeamMembers = intNumberOfTeamMembers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcS_intNumberOfTeamMembers_CA","tags":"","loc":"proc/oooptemcs_intnumberofteammembers_ca.html","title":"OOOPtemcS_intNumberOfTeamMembers_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcG_intNumberOfTeamMembers_CA(Object_CA, intNumberOfTeamMembers, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out) :: intNumberOfTeamMembers integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~oooptemcg_intnumberofteammembers_ca~~CallsGraph proc~oooptemcg_intnumberofteammembers_ca OOOPtemcG_intNumberOfTeamMembers_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemcg_intnumberofteammembers_ca->proc~ooogglob_subsetprocedures proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooptemcg_intnumberofteammembers_ca->proc~iitemc_errorhandler proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemcg_intnumberofteammembers_ca->proc~ooogglob_subresetprocedures proc~iitemc_imagenumberbounderror_ca IItemc_ImageNumberBoundError_CA proc~oooptemcg_intnumberofteammembers_ca->proc~iitemc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitemc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPtemcG_intNumberOfTeamMembers_CA ( Object_CA , intNumberOfTeamMembers , & intImageNumber ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intNumberOfTeamMembers INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcG_intNumberOfTeamMembers_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! intNumberOfTeamMembers = Object_CA [ intImageNumber ] % m_intNumberOfTeamMembers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcG_intNumberOfTeamMembers_CA","tags":"","loc":"proc/oooptemcg_intnumberofteammembers_ca.html","title":"OOOPtemcG_intNumberOfTeamMembers_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Calls proc~~oooptemccopyimgtoimg_intnumberofteammembers_ca~~CallsGraph proc~oooptemccopyimgtoimg_intnumberofteammembers_ca OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~ooogglob_subsetprocedures proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~iitemc_errorhandler proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~ooogglob_subresetprocedures proc~iitemc_imagenumberbounderror_ca IItemc_ImageNumberBoundError_CA proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~iitemc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitemc_errorhandler->proc~oooeerroc_addobject var panprocoooptemccopyimgtoimg_intnumberofteammembers_caCallsGraph = svgPanZoom('#procoooptemccopyimgtoimg_intnumberofteammembers_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~oooptemccopyimgtoimg_intnumberofteammembers_ca~~CalledByGraph proc~oooptemccopyimgtoimg_intnumberofteammembers_ca OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca OOOPtemcDC_CopyCoarrayObjImgToImg_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_intnumberofteammembers_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA\" ) ! ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % m_intNumberOfTeamMembers = Object_CA [ intImageNumberToCopyFrom ] % m_intNumberOfTeamMembers ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA","tags":"","loc":"proc/oooptemccopyimgtoimg_intnumberofteammembers_ca.html","title":"OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcSA_intTeamMemberImages99_CA(Object_CA, intTeamMemberImages99) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in), DIMENSION(1:OOOGglob_TeamMembers_UpperBound) :: intTeamMemberImages99 Calls proc~~oooptemcsa_intteammemberimages99_ca~~CallsGraph proc~oooptemcsa_intteammemberimages99_ca OOOPtemcSA_intTeamMemberImages99_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemcsa_intteammemberimages99_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemcsa_intteammemberimages99_ca->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtemcSA_intTeamMemberImages99_CA ( Object_CA , intTeamMemberImages99 ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamMembers_UpperBound ), INTENT ( IN ) :: intTeamMemberImages99 CALL OOOGglob_subSetProcedures & ( \"OOOPtemcSA_intTeamMemberImages99_CA\" ) Object_CA % mA_intTeamMemberImages99 = intTeamMemberImages99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcSA_intTeamMemberImages99_CA","tags":"","loc":"proc/oooptemcsa_intteammemberimages99_ca.html","title":"OOOPtemcSA_intTeamMemberImages99_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcGA_intTeamMemberImages99_CA(Object_CA, intTeamMemberImages99) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out), DIMENSION(1:OOOGglob_TeamMembers_UpperBound) :: intTeamMemberImages99 Calls proc~~oooptemcga_intteammemberimages99_ca~~CallsGraph proc~oooptemcga_intteammemberimages99_ca OOOPtemcGA_intTeamMemberImages99_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemcga_intteammemberimages99_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemcga_intteammemberimages99_ca->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtemcGA_intTeamMemberImages99_CA ( Object_CA , intTeamMemberImages99 ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamMembers_UpperBound ), INTENT ( OUT ) :: intTeamMemberImages99 CALL OOOGglob_subSetProcedures & ( \"OOOPtemcGA_intTeamMemberImages99_CA\" ) intTeamMemberImages99 = Object_CA % mA_intTeamMemberImages99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcGA_intTeamMemberImages99_CA","tags":"","loc":"proc/oooptemcga_intteammemberimages99_ca.html","title":"OOOPtemcGA_intTeamMemberImages99_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Calls proc~~oooptemccopyaimgtoimg_intteammemberimages99_ca~~CallsGraph proc~oooptemccopyaimgtoimg_intteammemberimages99_ca OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~ooogglob_subsetprocedures ma_intteammemberimages99 ma_intteammemberimages99 proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->ma_intteammemberimages99 proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~iitemc_errorhandler proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~ooogglob_subresetprocedures proc~iitemc_imagenumberbounderror_ca IItemc_ImageNumberBoundError_CA proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~iitemc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitemc_errorhandler->proc~oooeerroc_addobject var panprocoooptemccopyaimgtoimg_intteammemberimages99_caCallsGraph = svgPanZoom('#procoooptemccopyaimgtoimg_intteammemberimages99_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~oooptemccopyaimgtoimg_intteammemberimages99_ca~~CalledByGraph proc~oooptemccopyaimgtoimg_intteammemberimages99_ca OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca OOOPtemcDC_CopyCoarrayObjImgToImg_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyaimgtoimg_intteammemberimages99_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy only the required part of the array: Object_CA [ intImageNumberToCopyTo ] % mA_intTeamMemberImages99 ( 1 : Object_CA % m_intNumberOfTeamMembers ) & = Object_CA [ intImageNumberToCopyFrom ] % mA_intTeamMemberImages99 ( 1 : Object_CA % m_intNumberOfTeamMembers ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA","tags":"","loc":"proc/oooptemccopyaimgtoimg_intteammemberimages99_ca.html","title":"OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemcDC_CopyCoarrayObjImgToImg_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Description copy the properties: if necessary further properties must be copied here Calls proc~~oooptemcdc_copycoarrayobjimgtoimg_ca~~CallsGraph proc~oooptemcdc_copycoarrayobjimgtoimg_ca OOOPtemcDC_CopyCoarrayObjImgToImg_CA proc~oooptemccopyimgtoimg_chrteammembersfilename_ca OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_chrteammembersfilename_ca proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subsetprocedures proc~oooptemccopyimgtoimg_intnumberofteammembers_ca OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_intnumberofteammembers_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subresetprocedures proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~iitemc_errorhandler proc~oooptemccopyaimgtoimg_intteammemberimages99_ca OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyaimgtoimg_intteammemberimages99_ca proc~iitemc_imagenumberbounderror_ca IItemc_ImageNumberBoundError_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~iitemc_imagenumberbounderror_ca proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~iitemc_imagenumberbounderror_ca proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~ooogglob_subsetprocedures proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~ooogglob_subresetprocedures proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~iitemc_errorhandler proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~iitemc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitemc_errorhandler->proc~oooeerroc_addobject proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~ooogglob_subsetprocedures proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~ooogglob_subresetprocedures proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~iitemc_errorhandler proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~iitemc_imagenumberbounderror_ca ma_intteammemberimages99 ma_intteammemberimages99 proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->ma_intteammemberimages99 var panprocoooptemcdc_copycoarrayobjimgtoimg_caCallsGraph = svgPanZoom('#procoooptemcdc_copycoarrayobjimgtoimg_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPtemcDC_CopyCoarrayObjImgToImg_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) ! copy from any (remote) image to any other (remote) image ! (static members only) TYPE ( OOOPtemc_adtTeamManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status !****************************************** CALL OOOGglob_subSetProcedures & ( \"OOOPtemcDC_CopyCoarrayObjImgToImg_CA\" ) ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IItemc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IItemc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! !******************************************* ! copy the properties: !**************** CALL OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** ! if necessary further properties must be copied here !******************************************* ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemcDC_CopyCoarrayObjImgToImg_CA","tags":"","loc":"proc/oooptemcdc_copycoarrayobjimgtoimg_ca.html","title":"OOOPtemcDC_CopyCoarrayObjImgToImg_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IItemc_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Calls proc~~iitemc_errorhandler~~CallsGraph proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitemc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iitemc_errorhandler~~CalledByGraph proc~iitemc_errorhandler IItemc_ErrorHandler proc~oooptemccopyimgtoimg_chrteammembersfilename_ca OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~oooptemcs_intnumberofteammembers_ca OOOPtemcS_intNumberOfTeamMembers_CA proc~oooptemcs_intnumberofteammembers_ca->proc~iitemc_errorhandler proc~oooptemcg_chrteammembersfilename_ca OOOPtemcG_chrTeamMembersFileName_CA proc~oooptemcg_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~oooptemccopyimgtoimg_intnumberofteammembers_ca OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~iitemc_errorhandler proc~oooptemcs_chrteammembersfilename_ca OOOPtemcS_chrTeamMembersFileName_CA proc~oooptemcs_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~oooptemcdc_copycoarrayobjimgtoimg_ca OOOPtemcDC_CopyCoarrayObjImgToImg_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~iitemc_errorhandler proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_chrteammembersfilename_ca proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_intnumberofteammembers_ca proc~oooptemccopyaimgtoimg_intteammemberimages99_ca OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyaimgtoimg_intteammemberimages99_ca proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~iitemc_errorhandler proc~oooptemcg_intnumberofteammembers_ca OOOPtemcG_intNumberOfTeamMembers_CA proc~oooptemcg_intnumberofteammembers_ca->proc~iitemc_errorhandler var panprociitemc_errorhandlerCalledByGraph = svgPanZoom('#prociitemc_errorhandlerCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IItemc_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPtemc_adtTeamManager_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IItemc_ErrorHandler","tags":"","loc":"proc/iitemc_errorhandler.html","title":"IItemc_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtmem_StructureConstructor(Object) Arguments Type Intent Optional Attributes Name type( OOOPtmem_adtTeamMember ), intent(inout) :: Object Calls proc~~oooptmem_structureconstructor~~CallsGraph proc~oooptmem_structureconstructor OOOPtmem_StructureConstructor proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptmem_structureconstructor->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptmem_structureconstructor->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~oooptmem_structureconstructor~~CalledByGraph proc~oooptmem_structureconstructor OOOPtmem_StructureConstructor proc~oooptmem_start OOOPtmem_Start proc~oooptmem_start->proc~oooptmem_structureconstructor proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocoooptmem_structureconstructorCalledByGraph = svgPanZoom('#procoooptmem_structureconstructorCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtmem_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPtmem_adtTeamMember ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtmem_StructureConstructor\" ) ! initialize something here ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtmem_StructureConstructor","tags":"","loc":"proc/oooptmem_structureconstructor.html","title":"OOOPtmem_StructureConstructor â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtmem_Start(Object) Uses: OOOPimsc_admImageStatus_CA Arguments Type Intent Optional Attributes Name type( OOOPtmem_adtTeamMember ), intent(inout) :: Object Calls proc~~oooptmem_start~~CallsGraph proc~oooptmem_start OOOPtmem_Start proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptmem_start->proc~ooogglob_subsetprocedures proc~oooptmem_structureconstructor OOOPtmem_StructureConstructor proc~oooptmem_start->proc~oooptmem_structureconstructor proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptmem_start->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptmem_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptmem_structureconstructor->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject var panprocoooptmem_startCallsGraph = svgPanZoom('#procoooptmem_startCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~oooptmem_start~~CalledByGraph proc~oooptmem_start OOOPtmem_Start proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocoooptmem_startCalledByGraph = svgPanZoom('#procoooptmem_startCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtmem_Start ( Object ) USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPtmem_adtTeamMember ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtmem_Start\" ) ! CALL OOOPtmem_StructureConstructor ( Object ) ! write ( * , * ) 'TeamMember started on Image: ' , THIS_IMAGE () ! !160414: ! communicate with local PGAS memory to finish image execution: CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % & ExecutionFinished , THIS_IMAGE ()) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtmem_Start","tags":"","loc":"proc/oooptmem_start.html","title":"OOOPtmem_Start â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IItmem_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPtmem_adtTeamMember ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Calls proc~~iitmem_errorhandler~~CallsGraph proc~iitmem_errorhandler IItmem_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitmem_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IItmem_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT-Routines TYPE ( OOOPtmem_adtTeamMember ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IItmem_ErrorHandler","tags":"","loc":"proc/iitmem_errorhandler.html","title":"IItmem_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOGglob_subSetProcedures(chrCurrentProcedure) Arguments Type Intent Optional Attributes Name character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrCurrentProcedure Current procedure name. Description Error-Handling and Tracing Called By proc~~ooogglob_subsetprocedures~~CalledByGraph proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmcs_intnumberofteammanagers_ca OOOPinmcS_intNumberOfTeamManagers_CA proc~ooopinmcs_intnumberofteammanagers_ca->proc~ooogglob_subsetprocedures proc~oooptemccopyimgtoimg_chrteammembersfilename_ca OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooogglob_subsetprocedures proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~ooopinma_start OOOPinma_Start proc~ooopimma_start->proc~ooopinma_start proc~ooopimma_structureconstructor OOOPimma_StructureConstructor proc~ooopimma_start->proc~ooopimma_structureconstructor proc~oooptemag_chrteammembersfilename OOOPtemaG_chrTeamMembersFileName proc~oooptemag_chrteammembersfilename->proc~ooogglob_subsetprocedures proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~ooogglob_subsetprocedures proc~ooopinmag_intnumberofteammanagers OOOPinmaG_intNumberOfTeamManagers proc~ooopinmag_intnumberofteammanagers->proc~ooogglob_subsetprocedures proc~ooopinmcsa_intteammanagerimages99_ca OOOPinmcSA_intTeamManagerImages99_CA proc~ooopinmcsa_intteammanagerimages99_ca->proc~ooogglob_subsetprocedures proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~oooptemccopyimgtoimg_intnumberofteammembers_ca OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~ooogglob_subsetprocedures proc~ooopimmcs_intimageactivityflag_ca OOOPimmcS_intImageActivityFlag_CA proc~ooopimmcs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimsc_structureconstructor OOOPimsc_StructureConstructor proc~ooopimsc_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptemcga_intteammemberimages99_ca OOOPtemcGA_intTeamMemberImages99_CA proc~oooptemcga_intteammemberimages99_ca->proc~ooogglob_subsetprocedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subsetprocedures proc~oooptmem_start OOOPtmem_Start proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~oooptema_start OOOPtema_Start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~ooopinmc_structureconstructor OOOPinmc_StructureConstructor proc~ooopinmc_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptmem_start->proc~ooogglob_subsetprocedures proc~oooptmem_structureconstructor OOOPtmem_StructureConstructor proc~oooptmem_start->proc~oooptmem_structureconstructor proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptemc_structureconstructor OOOPtemc_StructureConstructor proc~oooptemc_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopinma_start->proc~ooogglob_subsetprocedures proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~ooopinma_start->proc~iiinma_loadteammanagers proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~ooopinma_structureconstructor OOOPinma_StructureConstructor proc~ooopinma_start->proc~ooopinma_structureconstructor proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~oooptema_start->proc~ooogglob_subsetprocedures proc~oooptemas_chrteammembersfilename OOOPtemaS_chrTeamMembersFileName proc~oooptema_start->proc~oooptemas_chrteammembersfilename proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptema_structureconstructor OOOPtema_StructureConstructor proc~oooptema_start->proc~oooptema_structureconstructor proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_loadteammembers IItema_LoadTeamMembers proc~oooptema_start->proc~iitema_loadteammembers proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~ooogglob_subsetprocedures proc~oooptmem_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopinmcga_chrteammembersfiles99_ca OOOPinmcGA_chrTeamMembersFiles99_CA proc~ooopinmcga_chrteammembersfiles99_ca->proc~ooogglob_subsetprocedures proc~oooptemcs_chrteammembersfilename_ca OOOPtemcS_chrTeamMembersFileName_CA proc~oooptemcs_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmcg_intimageactivityflag_ca OOOPimmcG_intImageActivityFlag_CA proc~ooopimmcg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopinmcg_intnumberofteammanagers_ca OOOPinmcG_intNumberOfTeamManagers_CA proc~ooopinmcg_intnumberofteammanagers_ca->proc~ooogglob_subsetprocedures proc~oooptmec_structureconstructor OOOPtmec_StructureConstructor proc~oooptmec_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptemcg_chrteammembersfilename_ca OOOPtemcG_chrTeamMembersFileName_CA proc~oooptemcg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimma_structureconstructor->proc~ooogglob_subsetprocedures proc~iiinma_loadteammanagers->proc~ooogglob_subsetprocedures proc~iiinma_loadteammanagers->proc~ooopstpag_chrpath proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~ooopimscdc_copycoarrayobjimgtoimg_ca OOOPimscDC_CopyCoarrayObjImgToImg_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subsetprocedures proc~ooopimsccopyimgtoimg_intimageactivityflag_ca OOOPimscCopyImgToImg_intImageActivityFlag_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooopimsccopyimgtoimg_intimageactivityflag_ca proc~ooopinmcdc_copycoarrayobjimgtoimg_ca OOOPinmcDC_CopyCoarrayObjImgToImg_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subsetprocedures proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca proc~oooptemas_chrteammembersfilename->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimmc_structureconstructor OOOPimmc_StructureConstructor proc~ooopimmc_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~oooptemag_intnumberofteammembers OOOPtemaG_intNumberOfTeamMembers proc~oooptemag_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~ooopimsc_structureconstructor_ca OOOPimsc_StructureConstructor_CA proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subsetprocedures proc~oooptema_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopinmcsa_chrteammembersfiles99_ca OOOPinmcSA_chrTeamMembersFiles99_CA proc~ooopinmcsa_chrteammembersfiles99_ca->proc~ooogglob_subsetprocedures proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopinma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopimmccopyimgtoimg_intimageactivityflag_ca OOOPimmcCopyImgToImg_intImageActivityFlag_CA proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~oooptemcg_intnumberofteammembers_ca OOOPtemcG_intNumberOfTeamMembers_CA proc~oooptemcg_intnumberofteammembers_ca->proc~ooogglob_subsetprocedures proc~oooptemccopyaimgtoimg_intteammemberimages99_ca OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~ooogglob_subsetprocedures proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopinmcga_intteammanagerimages99_ca OOOPinmcGA_intTeamManagerImages99_CA proc~ooopinmcga_intteammanagerimages99_ca->proc~ooogglob_subsetprocedures proc~oooptemcsa_intteammemberimages99_ca OOOPtemcSA_intTeamMemberImages99_CA proc~oooptemcsa_intteammemberimages99_ca->proc~ooogglob_subsetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~oooptemas_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subsetprocedures proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~oooptemcdc_copycoarrayobjimgtoimg_ca OOOPtemcDC_CopyCoarrayObjImgToImg_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subsetprocedures proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_chrteammembersfilename_ca proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_intnumberofteammembers_ca proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyaimgtoimg_intteammemberimages99_ca proc~iitema_loadteammembers->proc~ooogglob_subsetprocedures proc~iitema_loadteammembers->proc~ooopstpag_chrpath proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~ooopimmcdc_copycoarrayobjimgtoimg_ca OOOPimmcDC_CopyCoarrayObjImgToImg_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subsetprocedures proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_intimageactivityflag_ca proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca proc~iiinma_activateteammanagerimage->proc~ooogglob_subsetprocedures proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~iiinma_activateteammanagerimage->proc~ooopimsc_structureconstructor_ca proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subsetprocedures proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~ooogglob_subsetprocedures proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~oooptemcs_intnumberofteammembers_ca OOOPtemcS_intNumberOfTeamMembers_CA proc~oooptemcs_intnumberofteammembers_ca->proc~ooogglob_subsetprocedures proc~ooopstpas_chrpath OOOPstpaS_chrPath proc~ooopstpas_chrpath->proc~ooogglob_subsetprocedures proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocooogglob_subsetproceduresCalledByGraph = svgPanZoom('#procooogglob_subsetproceduresCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOGglob_subSetProcedures ( chrCurrentProcedure ) !< Error-Handling and Tracing CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrCurrentProcedure !< Current procedure name. ! refresh the Stack Trace: OOOGglob_intStackTraceCounter = OOOGglob_intStackTraceCounter + 1 OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter ) = chrCurrentProcedure OOOGglob_chrCurrentProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter ) OOOGglob_chrCallingProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter - 1 ) OOOGglob_chrReturningProcedure = '' ! END SUBROUTINE OOOGglob_subSetProcedures","tags":"","loc":"proc/ooogglob_subsetprocedures.html","title":"OOOGglob_subSetProcedures â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOGglob_subResetProcedures() Arguments None Description Error-Handling and Tracing Called By proc~~ooogglob_subresetprocedures~~CalledByGraph proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmcs_intnumberofteammanagers_ca OOOPinmcS_intNumberOfTeamManagers_CA proc~ooopinmcs_intnumberofteammanagers_ca->proc~ooogglob_subresetprocedures proc~oooptemccopyimgtoimg_chrteammembersfilename_ca OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooogglob_subresetprocedures proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~ooopinma_start OOOPinma_Start proc~ooopimma_start->proc~ooopinma_start proc~ooopimma_structureconstructor OOOPimma_StructureConstructor proc~ooopimma_start->proc~ooopimma_structureconstructor proc~oooptemag_chrteammembersfilename OOOPtemaG_chrTeamMembersFileName proc~oooptemag_chrteammembersfilename->proc~ooogglob_subresetprocedures proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~ooogglob_subresetprocedures proc~ooopinmag_intnumberofteammanagers OOOPinmaG_intNumberOfTeamManagers proc~ooopinmag_intnumberofteammanagers->proc~ooogglob_subresetprocedures proc~ooopinmcsa_intteammanagerimages99_ca OOOPinmcSA_intTeamManagerImages99_CA proc~ooopinmcsa_intteammanagerimages99_ca->proc~ooogglob_subresetprocedures proc~oooptema_structureconstructor OOOPtema_StructureConstructor proc~oooptema_structureconstructor->proc~ooogglob_subresetprocedures proc~oooptemccopyimgtoimg_intnumberofteammembers_ca OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~ooogglob_subresetprocedures proc~ooopimmcs_intimageactivityflag_ca OOOPimmcS_intImageActivityFlag_CA proc~ooopimmcs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopimsc_structureconstructor OOOPimsc_StructureConstructor proc~ooopimsc_structureconstructor->proc~ooogglob_subresetprocedures proc~oooptemcga_intteammemberimages99_ca OOOPtemcGA_intTeamMemberImages99_CA proc~oooptemcga_intteammemberimages99_ca->proc~ooogglob_subresetprocedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subresetprocedures proc~oooptmem_start OOOPtmem_Start proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~oooptema_start OOOPtema_Start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~ooopinmc_structureconstructor OOOPinmc_StructureConstructor proc~ooopinmc_structureconstructor->proc~ooogglob_subresetprocedures proc~oooptmem_start->proc~ooogglob_subresetprocedures proc~oooptmem_structureconstructor OOOPtmem_StructureConstructor proc~oooptmem_start->proc~oooptmem_structureconstructor proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptemc_structureconstructor OOOPtemc_StructureConstructor proc~oooptemc_structureconstructor->proc~ooogglob_subresetprocedures proc~ooopinma_start->proc~ooogglob_subresetprocedures proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~ooopinma_start->proc~iiinma_loadteammanagers proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~ooopinma_structureconstructor OOOPinma_StructureConstructor proc~ooopinma_start->proc~ooopinma_structureconstructor proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~oooptema_start->proc~ooogglob_subresetprocedures proc~oooptema_start->proc~oooptema_structureconstructor proc~oooptemas_chrteammembersfilename OOOPtemaS_chrTeamMembersFileName proc~oooptema_start->proc~oooptemas_chrteammembersfilename proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_loadteammembers IItema_LoadTeamMembers proc~oooptema_start->proc~iitema_loadteammembers proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~ooogglob_subresetprocedures proc~oooptmem_structureconstructor->proc~ooogglob_subresetprocedures proc~ooopinmcga_chrteammembersfiles99_ca OOOPinmcGA_chrTeamMembersFiles99_CA proc~ooopinmcga_chrteammembersfiles99_ca->proc~ooogglob_subresetprocedures proc~oooptemcs_chrteammembersfilename_ca OOOPtemcS_chrTeamMembersFileName_CA proc~oooptemcs_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~ooopimmcg_intimageactivityflag_ca OOOPimmcG_intImageActivityFlag_CA proc~ooopimmcg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopinmcg_intnumberofteammanagers_ca OOOPinmcG_intNumberOfTeamManagers_CA proc~ooopinmcg_intnumberofteammanagers_ca->proc~ooogglob_subresetprocedures proc~oooptmec_structureconstructor OOOPtmec_StructureConstructor proc~oooptmec_structureconstructor->proc~ooogglob_subresetprocedures proc~oooptemcg_chrteammembersfilename_ca OOOPtemcG_chrTeamMembersFileName_CA proc~oooptemcg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~ooopimma_structureconstructor->proc~ooogglob_subresetprocedures proc~iiinma_loadteammanagers->proc~ooogglob_subresetprocedures proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iiinma_loadteammanagers->proc~ooopstpag_chrpath proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~ooopimscdc_copycoarrayobjimgtoimg_ca OOOPimscDC_CopyCoarrayObjImgToImg_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subresetprocedures proc~ooopimsccopyimgtoimg_intimageactivityflag_ca OOOPimscCopyImgToImg_intImageActivityFlag_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooopimsccopyimgtoimg_intimageactivityflag_ca proc~ooopinmcdc_copycoarrayobjimgtoimg_ca OOOPinmcDC_CopyCoarrayObjImgToImg_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subresetprocedures proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca proc~oooptemas_chrteammembersfilename->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopimmc_structureconstructor OOOPimmc_StructureConstructor proc~ooopimmc_structureconstructor->proc~ooogglob_subresetprocedures proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~oooptemag_intnumberofteammembers OOOPtemaG_intNumberOfTeamMembers proc~oooptemag_intnumberofteammembers->proc~ooogglob_subresetprocedures proc~ooopimsc_structureconstructor_ca OOOPimsc_StructureConstructor_CA proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subresetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures proc~ooopinmcsa_chrteammembersfiles99_ca OOOPinmcSA_chrTeamMembersFiles99_CA proc~ooopinmcsa_chrteammembersfiles99_ca->proc~ooogglob_subresetprocedures proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopinma_structureconstructor->proc~ooogglob_subresetprocedures proc~ooopimmccopyimgtoimg_intimageactivityflag_ca OOOPimmcCopyImgToImg_intImageActivityFlag_CA proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~oooptemcg_intnumberofteammembers_ca OOOPtemcG_intNumberOfTeamMembers_CA proc~oooptemcg_intnumberofteammembers_ca->proc~ooogglob_subresetprocedures proc~oooptemccopyaimgtoimg_intteammemberimages99_ca OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~ooogglob_subresetprocedures proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopinmcga_intteammanagerimages99_ca OOOPinmcGA_intTeamManagerImages99_CA proc~ooopinmcga_intteammanagerimages99_ca->proc~ooogglob_subresetprocedures proc~oooptemcsa_intteammemberimages99_ca OOOPtemcSA_intTeamMemberImages99_CA proc~oooptemcsa_intteammemberimages99_ca->proc~ooogglob_subresetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~oooptemas_intnumberofteammembers->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~oooptemcdc_copycoarrayobjimgtoimg_ca OOOPtemcDC_CopyCoarrayObjImgToImg_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subresetprocedures proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_chrteammembersfilename_ca proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_intnumberofteammembers_ca proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyaimgtoimg_intteammemberimages99_ca proc~iitema_loadteammembers->proc~ooogglob_subresetprocedures proc~iitema_loadteammembers->proc~ooopstpag_chrpath proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~ooopimmcdc_copycoarrayobjimgtoimg_ca OOOPimmcDC_CopyCoarrayObjImgToImg_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subresetprocedures proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_intimageactivityflag_ca proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca proc~iiinma_activateteammanagerimage->proc~ooogglob_subresetprocedures proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~iiinma_activateteammanagerimage->proc~ooopimsc_structureconstructor_ca proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subresetprocedures proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~ooogglob_subresetprocedures proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~oooptemcs_intnumberofteammembers_ca OOOPtemcS_intNumberOfTeamMembers_CA proc~oooptemcs_intnumberofteammembers_ca->proc~ooogglob_subresetprocedures proc~ooopstpas_chrpath OOOPstpaS_chrPath proc~ooopstpas_chrpath->proc~ooogglob_subresetprocedures proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocooogglob_subresetproceduresCalledByGraph = svgPanZoom('#procooogglob_subresetproceduresCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOGglob_subResetProcedures !< Error-Handling and Tracing ! refresh the Stack Trace: OOOGglob_intStackTraceCounter = OOOGglob_intStackTraceCounter - 1 OOOGglob_chrCurrentProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter ) OOOGglob_chrReturningProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter + 1 ) IF ( OOOGglob_intStackTraceCounter > 1 ) THEN OOOGglob_chrCallingProcedure = OOOGglob_chrStackTrace ( OOOGglob_intStackTraceCounter - 1 ) END IF ! END SUBROUTINE OOOGglob_subResetProcedures","tags":"","loc":"proc/ooogglob_subresetprocedures.html","title":"OOOGglob_subResetProcedures â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOEerroc_AddObject(Collection, chrErrorDescription, intErrorType) Arguments Type Intent Optional Attributes Name type( OOOEerroc_colError ), intent(inout) :: Collection Error collection. character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrErrorDescription Error description. integer(kind=OOOGglob_kint), intent(in) :: intErrorType Error code. Called By proc~~oooeerroc_addobject~~CalledByGraph proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~iiimmc_errorhandler->proc~oooeerroc_addobject proc~iitema_errorhandler IItema_ErrorHandler proc~iitema_errorhandler->proc~oooeerroc_addobject proc~iiinma_errorhandler IIinma_ErrorHandler proc~iiinma_errorhandler->proc~oooeerroc_addobject proc~iitemc_errorhandler IItemc_ErrorHandler proc~iitemc_errorhandler->proc~oooeerroc_addobject proc~iiimma_errorhandler IIimma_ErrorHandler proc~iiimma_errorhandler->proc~oooeerroc_addobject proc~iistpa_errorhandler IIstpa_ErrorHandler proc~iistpa_errorhandler->proc~oooeerroc_addobject proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~iiimsc_errorhandler->proc~oooeerroc_addobject proc~iitmem_errorhandler IItmem_ErrorHandler proc~iitmem_errorhandler->proc~oooeerroc_addobject proc~iiinmc_errorhandler IIinmc_ErrorHandler proc~iiinmc_errorhandler->proc~oooeerroc_addobject proc~iitmec_errorhandler IItmec_ErrorHandler proc~iitmec_errorhandler->proc~oooeerroc_addobject proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimmcs_intimageactivityflag_ca OOOPimmcS_intImageActivityFlag_CA proc~ooopimmcs_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~ooopimmcdc_copycoarrayobjimgtoimg_ca OOOPimmcDC_CopyCoarrayObjImgToImg_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~iiimmc_errorhandler proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca proc~ooopimmccopyimgtoimg_intimageactivityflag_ca OOOPimmcCopyImgToImg_intImageActivityFlag_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_intimageactivityflag_ca proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~ooopimmcg_intimageactivityflag_ca OOOPimmcG_intImageActivityFlag_CA proc~ooopimmcg_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~oooptema_start OOOPtema_Start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~oooptmem_start OOOPtmem_Start proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~ooopinma_start OOOPinma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~ooopinma_start->proc~iiinma_loadteammanagers proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~iitema_loadteammembers IItema_LoadTeamMembers proc~iitema_loadteammembers->proc~iitema_errorhandler proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~oooptemas_intnumberofteammembers->proc~iitema_errorhandler proc~oooptema_start->proc~iitema_loadteammembers proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~ooopinmas_intnumberofteammanagers->proc~iiinma_errorhandler proc~iiinma_loadteammanagers->proc~iiinma_errorhandler proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath proc~oooptemccopyimgtoimg_chrteammembersfilename_ca OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA proc~oooptemccopyimgtoimg_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~oooptemcs_intnumberofteammembers_ca OOOPtemcS_intNumberOfTeamMembers_CA proc~oooptemcs_intnumberofteammembers_ca->proc~iitemc_errorhandler proc~oooptemcg_chrteammembersfilename_ca OOOPtemcG_chrTeamMembersFileName_CA proc~oooptemcg_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~oooptemccopyimgtoimg_intnumberofteammembers_ca OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA proc~oooptemccopyimgtoimg_intnumberofteammembers_ca->proc~iitemc_errorhandler proc~oooptemcs_chrteammembersfilename_ca OOOPtemcS_chrTeamMembersFileName_CA proc~oooptemcs_chrteammembersfilename_ca->proc~iitemc_errorhandler proc~oooptemcdc_copycoarrayobjimgtoimg_ca OOOPtemcDC_CopyCoarrayObjImgToImg_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~iitemc_errorhandler proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_chrteammembersfilename_ca proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyimgtoimg_intnumberofteammembers_ca proc~oooptemccopyaimgtoimg_intteammemberimages99_ca OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA proc~oooptemcdc_copycoarrayobjimgtoimg_ca->proc~oooptemccopyaimgtoimg_intteammemberimages99_ca proc~oooptemccopyaimgtoimg_intteammemberimages99_ca->proc~iitemc_errorhandler proc~oooptemcg_intnumberofteammembers_ca OOOPtemcG_intNumberOfTeamMembers_CA proc~oooptemcg_intnumberofteammembers_ca->proc~iitemc_errorhandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~ooopimscdc_copycoarrayobjimgtoimg_ca OOOPimscDC_CopyCoarrayObjImgToImg_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~iiimsc_errorhandler proc~ooopimsccopyimgtoimg_intimageactivityflag_ca OOOPimscCopyImgToImg_intImageActivityFlag_CA proc~ooopimscdc_copycoarrayobjimgtoimg_ca->proc~ooopimsccopyimgtoimg_intimageactivityflag_ca proc~ooopimsccopyimgtoimg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopinmcdc_copycoarrayobjimgtoimg_ca OOOPinmcDC_CopyCoarrayObjImgToImg_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~iiinmc_errorhandler proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~iiinmc_errorhandler proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~iiinmc_errorhandler proc~ooopinmcs_intnumberofteammanagers_ca OOOPinmcS_intNumberOfTeamManagers_CA proc~ooopinmcs_intnumberofteammanagers_ca->proc~iiinmc_errorhandler proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~iiinmc_errorhandler proc~ooopinmcg_intnumberofteammanagers_ca OOOPinmcG_intNumberOfTeamManagers_CA proc~ooopinmcg_intnumberofteammanagers_ca->proc~iiinmc_errorhandler var panprocoooeerroc_addobjectCalledByGraph = svgPanZoom('#procoooeerroc_addobjectCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(kind=OOOGglob_kcha,LEN=OOOGglob_Len200), public :: chrSelection Dummy string for handling user's input.\n Handle errors occurrence. Note Prompt user for errors-handling choice. Source Code SUBROUTINE OOOEerroc_AddObject ( Collection , chrErrorDescription , & intErrorType ) TYPE ( OOOEerroc_colError ), INTENT ( INOUT ) :: Collection !< Error collection. CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrErrorDescription !< Error description. INTEGER ( KIND = OOOGglob_kint ), INTENT ( IN ) :: intErrorType !< Error code. CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrSelection !< Dummy string for handling user's input. !< Handle errors occurrence. !< !< @note Prompt user for errors-handling choice. ! ! Write ( * , * ) \"CurrentProc: \" , OOOGglob_chrCurrentProcedure ! write ( * , * ) \"ErrDescr: \" , TRIM ( chrErrorDescription ) ! write ( * , * ) \"ErrTyp: \" , intErrorType ! Write ( * , * ) Write ( * , * ) \"CallingProc: \" , TRIM ( OOOGglob_chrCallingProcedure ) ! Write ( * , * ) \"ReturningProc: \" , TRIM ( OOOGglob_chrReturningProcedure ) ! PRINT * Write ( * , * ) \"     *** An error occured ! *** \" PRINT * , ' Please select: ' PRINT * PRINT * , ' x  - Exit Program, or' PRINT * , ' c  - Continue Execution' PRINT * ! PRINT * , ' -> ' READ * , chrSelection PRINT * chrSelection = TRIM ( chrSelection ) SELECT CASE ( chrSelection ) CASE ( 'x' , 'X' ) ! ERROR STOP ! end of execution ! END SELECT ! END SUBROUTINE OOOEerroc_AddObject","tags":"","loc":"proc/oooeerroc_addobject.html","title":"OOOEerroc_AddObject â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public function IIimmc_ImageNumberBoundError_CA(Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Description Called By proc~~iiimmc_imagenumberbounderror_ca~~CalledByGraph proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmcs_intimageactivityflag_ca OOOPimmcS_intImageActivityFlag_CA proc~ooopimmcs_intimageactivityflag_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmcdc_copycoarrayobjimgtoimg_ca OOOPimmcDC_CopyCoarrayObjImgToImg_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca proc~ooopimmccopyimgtoimg_intimageactivityflag_ca OOOPimmcCopyImgToImg_intImageActivityFlag_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_intimageactivityflag_ca proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmcg_intimageactivityflag_ca OOOPimmcG_intImageActivityFlag_CA proc~ooopimmcg_intimageactivityflag_ca->proc~iiimmc_imagenumberbounderror_ca proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~ooopinma_start OOOPinma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopinma_start->proc~iiinma_activateteammanagerimage var panprociiimmc_imagenumberbounderror_caCalledByGraph = svgPanZoom('#prociiimmc_imagenumberbounderror_caCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code LOGICAL ( OOOGglob_klog ) FUNCTION IIimmc_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IIimmc_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IIimmc_ImageNumberBoundError_CA = . TRUE . END IF ! !******** ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IIimmc_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IIimmc_ImageNumberBoundError_CA","tags":"","loc":"proc/iiimmc_imagenumberbounderror_ca.html","title":"IIimmc_ImageNumberBoundError_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimmc_StructureConstructor(Object) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout) :: Object Calls proc~~ooopimmc_structureconstructor~~CallsGraph proc~ooopimmc_structureconstructor OOOPimmc_StructureConstructor proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimmc_structureconstructor->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimmc_structureconstructor->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPimmc_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPimmc_adtImageManager_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPimmc_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmc_StructureConstructor","tags":"","loc":"proc/ooopimmc_structureconstructor.html","title":"OOOPimmc_StructureConstructor â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimmcS_intImageActivityFlag_CA(Object_CA, intImageActivityFlag, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageActivityFlag integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~ooopimmcs_intimageactivityflag_ca~~CallsGraph proc~ooopimmcs_intimageactivityflag_ca OOOPimmcS_intImageActivityFlag_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimmcs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcs_intimageactivityflag_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimmcs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcs_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimmcS_intImageActivityFlag_CA ( Object_CA , intImageActivityFlag , & intImageNumber ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageActivityFlag INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcS_intImageActivityFlag_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_intImageActivityFlag = intImageActivityFlag ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcS_intImageActivityFlag_CA","tags":"","loc":"proc/ooopimmcs_intimageactivityflag_ca.html","title":"OOOPimmcS_intImageActivityFlag_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimmcG_intImageActivityFlag_CA(Object_CA, intImageActivityFlag, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out) :: intImageActivityFlag integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~ooopimmcg_intimageactivityflag_ca~~CallsGraph proc~ooopimmcg_intimageactivityflag_ca OOOPimmcG_intImageActivityFlag_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimmcg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcg_intimageactivityflag_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimmcg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcg_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimmcG_intImageActivityFlag_CA ( Object_CA , intImageActivityFlag , & intImageNumber ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intImageActivityFlag INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcG_intImageActivityFlag_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! intImageActivityFlag = Object_CA [ intImageNumber ] % m_intImageActivityFlag CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcG_intImageActivityFlag_CA","tags":"","loc":"proc/ooopimmcg_intimageactivityflag_ca.html","title":"OOOPimmcG_intImageActivityFlag_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimmcCopyImgToImg_intImageActivityFlag_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Calls proc~~ooopimmccopyimgtoimg_intimageactivityflag_ca~~CallsGraph proc~ooopimmccopyimgtoimg_intimageactivityflag_ca OOOPimmcCopyImgToImg_intImageActivityFlag_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler->proc~oooeerroc_addobject var panprocooopimmccopyimgtoimg_intimageactivityflag_caCallsGraph = svgPanZoom('#procooopimmccopyimgtoimg_intimageactivityflag_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimmccopyimgtoimg_intimageactivityflag_ca~~CalledByGraph proc~ooopimmccopyimgtoimg_intimageactivityflag_ca OOOPimmcCopyImgToImg_intImageActivityFlag_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca OOOPimmcDC_CopyCoarrayObjImgToImg_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_intimageactivityflag_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimmcCopyImgToImg_intImageActivityFlag_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcCopyImgToImg_intImageActivityFlag_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % m_intImageActivityFlag = Object_CA [ intImageNumberToCopyFrom ] % m_intImageActivityFlag ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcCopyImgToImg_intImageActivityFlag_CA","tags":"","loc":"proc/ooopimmccopyimgtoimg_intimageactivityflag_ca.html","title":"OOOPimmcCopyImgToImg_intImageActivityFlag_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimmcS_chrTeamMembersFileName_CA(Object_CA, chr_TeamMembersFileName, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chr_TeamMembersFileName integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~ooopimmcs_chrteammembersfilename_ca~~CallsGraph proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimmcs_chrteammembersfilename_ca~~CalledByGraph proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocooopimmcs_chrteammembersfilename_caCalledByGraph = svgPanZoom('#procooopimmcs_chrteammembersfilename_caCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimmcS_chrTeamMembersFileName_CA ( Object_CA , chr_TeamMembersFileName , intImageNumber ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chr_TeamMembersFileName INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcS_chrTeamMembersFileName_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_chrTeamMembersFileName = chr_TeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcS_chrTeamMembersFileName_CA","tags":"","loc":"proc/ooopimmcs_chrteammembersfilename_ca.html","title":"OOOPimmcS_chrTeamMembersFileName_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimmcG_chrTeamMembersFileName_CA(Object_CA, chr_TeamMembersFileName, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(out), DIMENSION(1) :: chr_TeamMembersFileName integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~ooopimmcg_chrteammembersfilename_ca~~CallsGraph proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimmcg_chrteammembersfilename_ca~~CalledByGraph proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocooopimmcg_chrteammembersfilename_caCalledByGraph = svgPanZoom('#procooopimmcg_chrteammembersfilename_caCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimmcG_chrTeamMembersFileName_CA ( Object_CA , chr_TeamMembersFileName , intImageNumber ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), DIMENSION ( 1 ), INTENT ( OUT ) :: chr_TeamMembersFileName INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcG_chrTeamMembersFileName_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! chr_TeamMembersFileName = Object_CA [ intImageNumber ] % m_chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcG_chrTeamMembersFileName_CA","tags":"","loc":"proc/ooopimmcg_chrteammembersfilename_ca.html","title":"OOOPimmcG_chrTeamMembersFileName_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Calls proc~~ooopimmccopyimgtoimg_chrteammembersfilename_ca~~CallsGraph proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler->proc~oooeerroc_addobject var panprocooopimmccopyimgtoimg_chrteammembersfilename_caCallsGraph = svgPanZoom('#procooopimmccopyimgtoimg_chrteammembersfilename_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopimmccopyimgtoimg_chrteammembersfilename_ca~~CalledByGraph proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca OOOPimmcDC_CopyCoarrayObjImgToImg_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy image to image Object_CA [ intImageNumberToCopyTo ] % m_chrTeamMembersFileName & = Object_CA [ intImageNumberToCopyFrom ] % m_chrTeamMembersFileName ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA","tags":"","loc":"proc/ooopimmccopyimgtoimg_chrteammembersfilename_ca.html","title":"OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPimmcDC_CopyCoarrayObjImgToImg_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Description copy the properties: if necessary further properties must be copied here Calls proc~~ooopimmcdc_copycoarrayobjimgtoimg_ca~~CallsGraph proc~ooopimmcdc_copycoarrayobjimgtoimg_ca OOOPimmcDC_CopyCoarrayObjImgToImg_CA proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~iiimmc_errorhandler proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subsetprocedures proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subresetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmccopyimgtoimg_intimageactivityflag_ca OOOPimmcCopyImgToImg_intImageActivityFlag_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_intimageactivityflag_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler->proc~oooeerroc_addobject proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~iiimmc_imagenumberbounderror_ca var panprocooopimmcdc_copycoarrayobjimgtoimg_caCallsGraph = svgPanZoom('#procooopimmcdc_copycoarrayobjimgtoimg_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPimmcDC_CopyCoarrayObjImgToImg_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) ! copy from any (remote) image to any other (remote) image ! (static members only) TYPE ( OOOPimmc_adtImageManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status !****************************************** CALL OOOGglob_subSetProcedures & ( \"OOOPimmcDC_CopyCoarrayObjImgToImg_CA\" ) ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( IIimmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIimmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! !******************************************* ! copy the properties: !**************** CALL OOOPimmcCopyImgToImg_intImageActivityFlag_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** ! if necessary further properties must be copied here !******************************************* ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPimmcDC_CopyCoarrayObjImgToImg_CA","tags":"","loc":"proc/ooopimmcdc_copycoarrayobjimgtoimg_ca.html","title":"OOOPimmcDC_CopyCoarrayObjImgToImg_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IIimmc_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Calls proc~~iiimmc_errorhandler~~CallsGraph proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimmc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iiimmc_errorhandler~~CalledByGraph proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimmcs_intimageactivityflag_ca OOOPimmcS_intImageActivityFlag_CA proc~ooopimmcs_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~ooopimmcdc_copycoarrayobjimgtoimg_ca OOOPimmcDC_CopyCoarrayObjImgToImg_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~iiimmc_errorhandler proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_chrteammembersfilename_ca proc~ooopimmccopyimgtoimg_intimageactivityflag_ca OOOPimmcCopyImgToImg_intImageActivityFlag_CA proc~ooopimmcdc_copycoarrayobjimgtoimg_ca->proc~ooopimmccopyimgtoimg_intimageactivityflag_ca proc~ooopimmccopyimgtoimg_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~ooopimmcg_intimageactivityflag_ca OOOPimmcG_intImageActivityFlag_CA proc~ooopimmcg_intimageactivityflag_ca->proc~iiimmc_errorhandler proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~ooopinma_start OOOPinma_Start proc~ooopimma_start->proc~ooopinma_start proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopinma_start->proc~iiinma_activateteammanagerimage var panprociiimmc_errorhandlerCalledByGraph = svgPanZoom('#prociiimmc_errorhandlerCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IIimmc_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPimmc_adtImageManager_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIimmc_ErrorHandler","tags":"","loc":"proc/iiimmc_errorhandler.html","title":"IIimmc_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemaS_chrTeamMembersFileName(Object, chrTeamMembersFileName) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrTeamMembersFileName Calls proc~~oooptemas_chrteammembersfilename~~CallsGraph proc~oooptemas_chrteammembersfilename OOOPtemaS_chrTeamMembersFileName proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemas_chrteammembersfilename->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemas_chrteammembersfilename->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~oooptemas_chrteammembersfilename~~CalledByGraph proc~oooptemas_chrteammembersfilename OOOPtemaS_chrTeamMembersFileName proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~oooptemas_chrteammembersfilename proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocoooptemas_chrteammembersfilenameCalledByGraph = svgPanZoom('#procoooptemas_chrteammembersfilenameCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtemaS_chrTeamMembersFileName ( Object , chrTeamMembersFileName ) TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrTeamMembersFileName CALL OOOGglob_subSetProcedures ( \"OOOPtemaS_chrTeamMembersFileName\" ) Object % m_chrTeamMembersFileName = chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemaS_chrTeamMembersFileName","tags":"","loc":"proc/oooptemas_chrteammembersfilename.html","title":"OOOPtemaS_chrTeamMembersFileName â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemaG_chrTeamMembersFileName(Object, chrTeamMembersFileName) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(in) :: Object character(kind=OOOGglob_kcha,LEN=*), intent(out) :: chrTeamMembersFileName Calls proc~~oooptemag_chrteammembersfilename~~CallsGraph proc~oooptemag_chrteammembersfilename OOOPtemaG_chrTeamMembersFileName proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemag_chrteammembersfilename->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemag_chrteammembersfilename->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtemaG_chrTeamMembersFileName ( Object , chrTeamMembersFileName ) TYPE ( OOOPtema_adtTeamManager ), INTENT ( IN ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( OUT ) :: chrTeamMembersFileName CALL OOOGglob_subSetProcedures ( \"OOOPtemaG_chrTeamMembersFileName\" ) chrTeamMembersFileName = Object % m_chrTeamMembersFileName CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemaG_chrTeamMembersFileName","tags":"","loc":"proc/oooptemag_chrteammembersfilename.html","title":"OOOPtemaG_chrTeamMembersFileName â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemaS_intNumberOfTeamMembers(Object, intNumberOfTeamMembers) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object integer(kind=OOOGglob_kint), intent(in) :: intNumberOfTeamMembers Calls proc~~oooptemas_intnumberofteammembers~~CallsGraph proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemas_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemas_intnumberofteammembers->proc~ooogglob_subresetprocedures proc~iitema_errorhandler IItema_ErrorHandler proc~oooptemas_intnumberofteammembers->proc~iitema_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitema_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~oooptemas_intnumberofteammembers~~CalledByGraph proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~iitema_loadteammembers IItema_LoadTeamMembers proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~iitema_loadteammembers proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocoooptemas_intnumberofteammembersCalledByGraph = svgPanZoom('#procoooptemas_intnumberofteammembersCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPtemaS_intNumberOfTeamMembers ( Object , intNumberOfTeamMembers ) TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intNumberOfTeamMembers INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures ( \"OOOPtemaS_intNumberOfTeamMembers\" ) ! IF ( intNumberOfTeamMembers > OOOGglob_TeamMembers_UpperBound ) THEN CALL IItema_ErrorHandler ( Object , \"to many elements\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object % m_intNumberOfTeamMembers = intNumberOfTeamMembers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemaS_intNumberOfTeamMembers","tags":"","loc":"proc/oooptemas_intnumberofteammembers.html","title":"OOOPtemaS_intNumberOfTeamMembers â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtemaG_intNumberOfTeamMembers(Object, intNumberOfTeamMembers) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(in) :: Object integer(kind=OOOGglob_kint), intent(out) :: intNumberOfTeamMembers Calls proc~~oooptemag_intnumberofteammembers~~CallsGraph proc~oooptemag_intnumberofteammembers OOOPtemaG_intNumberOfTeamMembers proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptemag_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptemag_intnumberofteammembers->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtemaG_intNumberOfTeamMembers ( Object , intNumberOfTeamMembers ) TYPE ( OOOPtema_adtTeamManager ), INTENT ( IN ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intNumberOfTeamMembers CALL OOOGglob_subSetProcedures ( \"OOOPtemaG_intNumberOfTeamMembers\" ) intNumberOfTeamMembers = Object % m_intNumberOfTeamMembers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtemaG_intNumberOfTeamMembers","tags":"","loc":"proc/oooptemag_intnumberofteammembers.html","title":"OOOPtemaG_intNumberOfTeamMembers â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtema_StructureConstructor(Object) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object Calls proc~~oooptema_structureconstructor~~CallsGraph proc~oooptema_structureconstructor OOOPtema_StructureConstructor proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptema_structureconstructor->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptema_structureconstructor->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~oooptema_structureconstructor~~CalledByGraph proc~oooptema_structureconstructor OOOPtema_StructureConstructor proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~oooptema_structureconstructor proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocoooptema_structureconstructorCalledByGraph = svgPanZoom('#procoooptema_structureconstructorCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPtema_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPtema_StructureConstructor\" ) ! initialize something here ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtema_StructureConstructor","tags":"","loc":"proc/oooptema_structureconstructor.html","title":"OOOPtema_StructureConstructor â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPtema_Start(Object, chrTeamMembersFileName) Uses: OOOPimsc_admImageStatus_CA Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), intent(in) :: chrTeamMembersFileName Calls proc~~oooptema_start~~CallsGraph proc~oooptema_start OOOPtema_Start proc~oooptemas_chrteammembersfilename OOOPtemaS_chrTeamMembersFileName proc~oooptema_start->proc~oooptemas_chrteammembersfilename proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~oooptema_start->proc~ooogglob_subsetprocedures proc~oooptema_structureconstructor OOOPtema_StructureConstructor proc~oooptema_start->proc~oooptema_structureconstructor proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~oooptema_start->proc~ooogglob_subresetprocedures ma_intteammemberimages99 ma_intteammemberimages99 proc~oooptema_start->ma_intteammemberimages99 proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_loadteammembers IItema_LoadTeamMembers proc~oooptema_start->proc~iitema_loadteammembers proc~oooptemas_chrteammembersfilename->proc~ooogglob_subsetprocedures proc~oooptemas_chrteammembersfilename->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~oooptema_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptema_structureconstructor->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~iitema_activateteammemberimage->proc~ooogglob_subsetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subresetprocedures proc~iitema_loadteammembers->proc~ooogglob_subsetprocedures proc~iitema_loadteammembers->proc~ooogglob_subresetprocedures proc~iitema_loadteammembers->ma_intteammemberimages99 proc~iitema_errorhandler IItema_ErrorHandler proc~iitema_loadteammembers->proc~iitema_errorhandler proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iitema_loadteammembers->proc~ooopstpag_chrpath proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject proc~iitema_errorhandler->proc~oooeerroc_addobject proc~oooptemas_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~oooptemas_intnumberofteammembers->proc~ooogglob_subresetprocedures proc~oooptemas_intnumberofteammembers->proc~iitema_errorhandler proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~iistpa_errorhandler->proc~oooeerroc_addobject var panprocoooptema_startCallsGraph = svgPanZoom('#procoooptema_startCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~oooptema_start~~CalledByGraph proc~oooptema_start OOOPtema_Start proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprocoooptema_startCalledByGraph = svgPanZoom('#procoooptema_startCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: intTeamMemberImageNumber integer(kind=OOOGglob_kint), public :: intCounter = 0 Source Code SUBROUTINE OOOPtema_Start ( Object , chrTeamMembersFileName ) USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ), INTENT ( IN ) :: chrTeamMembersFileName INTEGER ( OOOGglob_kint ) :: intTeamMemberImageNumber ! 160414 INTEGER ( OOOGglob_kint ) :: intCounter = 0 ! CALL OOOGglob_subSetProcedures ( \"OOOPtema_Start\" ) ! CALL OOOPtema_StructureConstructor ( Object ) ! write ( * , * ) 'TeamManager started on Image: ' , THIS_IMAGE () ! ! 160414: ! we do an early setting of the ImageActivityFlag at this place ! to allow supersession of the ExecutionFinished value later on: CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % & ExecutionFinished , THIS_IMAGE ()) ! CALL OOOPtemaS_chrTeamMembersFileName ( Object , chrTeamMembersFileName ) CALL IItema_LoadTeamMembers ( Object ) ! from TeamMembers.txt ! ! activate the TeamMembers on their images as given by TeamMembers_x.txt: DO intCounter = 1 , Object % m_intNumberOfTeamMembers ! (mA_intTeamMemberImages99(intCounter) gives the (remote) image number of the TeamMember): 160414 intTeamMemberImageNumber = Object % mA_intTeamMemberImages99 ( intCounter ) ! 160414 CALL IItema_ActivateTeamMemberImage ( Object , intTeamMemberImageNumber ) ! 160414 END DO ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPtema_Start","tags":"","loc":"proc/oooptema_start.html","title":"OOOPtema_Start â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IItema_LoadTeamMembers(Object) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object Calls proc~~iitema_loadteammembers~~CallsGraph proc~iitema_loadteammembers IItema_LoadTeamMembers proc~iitema_errorhandler IItema_ErrorHandler proc~iitema_loadteammembers->proc~iitema_errorhandler proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~iitema_loadteammembers->proc~ooogglob_subsetprocedures proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~iitema_loadteammembers->proc~ooogglob_subresetprocedures proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iitema_loadteammembers->proc~ooopstpag_chrpath ma_intteammemberimages99 ma_intteammemberimages99 proc~iitema_loadteammembers->ma_intteammemberimages99 proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitema_errorhandler->proc~oooeerroc_addobject proc~oooptemas_intnumberofteammembers->proc~iitema_errorhandler proc~oooptemas_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~oooptemas_intnumberofteammembers->proc~ooogglob_subresetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~iistpa_errorhandler->proc~oooeerroc_addobject var panprociitema_loadteammembersCallsGraph = svgPanZoom('#prociitema_loadteammembersCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iitema_loadteammembers~~CalledByGraph proc~iitema_loadteammembers IItema_LoadTeamMembers proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~iitema_loadteammembers proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprociitema_loadteammembersCalledByGraph = svgPanZoom('#prociitema_loadteammembersCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type(OOOPstpa_adtStartPath), public :: UUStartPath1 character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenStatus = 'OLD' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenAccess = 'SEQUENTIAL' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenForm = 'FORMATTED' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenPosition = 'REWIND' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenAction = 'READ' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenBlank = 'NULL' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len200), public :: chrStartPath logical(kind=OOOGglob_klog), public :: logExist integer(kind=OOOGglob_kint), public :: intRecl = 0 integer(kind=OOOGglob_kint), public :: FileUnit = 0 integer(kind=OOOGglob_kint), public :: FileStatus = 0 character(kind=OOOGglob_kcha,LEN=OOOGglob_Len200), public :: chrPathAndFileName = \"\" integer(kind=OOOGglob_kint), public :: intNumberOfTeamMembers Source Code SUBROUTINE IItema_LoadTeamMembers ( Object ) ! method, loads the data from TeamMembers_x.txt TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object ! TYPE ( OOOPstpa_adtStartPath ) :: UUStartPath1 ! CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenStatus = 'OLD' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAccess = 'SEQUENTIAL' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenForm = 'FORMATTED' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenPosition = 'REWIND' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAction = 'READ' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenBlank = 'NULL' ! CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrStartPath ! ! for INQUIRE: LOGICAL ( KIND = OOOGglob_klog ) :: logExist INTEGER ( OOOGglob_kint ) :: intRecl = 0 ! INTEGER ( OOOGglob_kint ) :: FileUnit = 0 INTEGER ( OOOGglob_kint ) :: FileStatus = 0 ! File-error-Status CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrPathAndFileName = \"\" INTEGER ( OOOGglob_kint ) :: intNumberOfTeamMembers ! CALL OOOGglob_subSetProcedures ( \"IItema_LoadTeamMembers\" ) ! FileUnit = OOOGglob_FileUnitA ! ! get the path to the files directory: CALL OOOPstpa_LoadPath ( UUStartPath1 ) CALL OOOPstpaG_chrPath ( UUStartPath1 , chrStartPath ) ! chrPathAndFileName = TRIM ( chrStartPath ) // Object % m_chrTeamMembersFileName ! OPEN ( UNIT = FileUnit , IOSTAT = FileStatus , FILE = TRIM ( chrPathAndFileName ), & STATUS = TRIM ( OpenStatus ), ACCESS = TRIM ( OpenAccess ), FORM = TRIM ( OpenForm ), & POSITION = TRIM ( OpenPosition ), ACTION = TRIM ( OpenAction ), & BLANK = TRIM ( OpenBlank ), DELIM = 'APOSTROPHE' ) ! IF ( FileStatus /= 0 ) THEN CALL IItema_ErrorHandler ( Object , \"File-Open-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) intNumberOfTeamMembers ! IF ( FileStatus /= 0 ) THEN CALL IItema_ErrorHandler ( Object , \"File READ-Error 1\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOPtemaS_intNumberOfTeamMembers ( Object , intNumberOfTeamMembers ) ! contains error handling ! ! read the TeamMember image numbers from file: READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) Object % mA_intTeamMemberImages99 ( 1 : Object % m_intNumberOfTeamMembers ) ! IF ( FileStatus /= 0 ) THEN ! FileStatus error CALL IItema_ErrorHandler ( Object , \"File READ-Error 2\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CLOSE ( UNIT = FileUnit , IOSTAT = FileStatus , STATUS = 'KEEP' ) IF ( FileStatus /= 0 ) THEN CALL IItema_ErrorHandler ( Object , \"File-Close-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOGglob_subResetProcedures ! END SUBROUTINE IItema_LoadTeamMembers","tags":"","loc":"proc/iitema_loadteammembers.html","title":"IItema_LoadTeamMembers â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IItema_ActivateTeamMemberImage(Object, intTeamMemberImageNumber) Uses: OOOPimsc_admImageStatus_CA Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object integer(kind=OOOGglob_kint), intent(in) :: intTeamMemberImageNumber Calls proc~~iitema_activateteammemberimage~~CallsGraph proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~iitema_activateteammemberimage->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~iitema_activateteammemberimage->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject var panprociitema_activateteammemberimageCallsGraph = svgPanZoom('#prociitema_activateteammemberimageCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iitema_activateteammemberimage~~CalledByGraph proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~iitema_activateteammemberimage proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprociitema_activateteammemberimageCalledByGraph = svgPanZoom('#prociitema_activateteammemberimageCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IItema_ActivateTeamMemberImage ( Object , intTeamMemberImageNumber ) ! 160414 !!!  synchronization counterpart routine  !!!! !!!  for IIimma_SYNC_CheckActivityFlag    !!!! ! starts a single TeamMember on its image ! USE OOOPimsc_admImageStatus_CA ! access corresponding coarrays to ! communicate with remote or local PGAS memory TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intTeamMemberImageNumber ! 160414 ! CALL OOOGglob_subSetProcedures ( \"IItema_ActivateTeamMemberImage\" ) ! communicate with remote or local PGAS memory to activate a TeamMember image: 160414 CALL OOOPimscS_intImageActivityFlag_CA ( OOOPimscImageStatus_CA_1 , OOOPimscEnum_ImageActivityFlag % TeamMember , & intTeamMemberImageNumber ) ! 160414 ! CALL OOOGglob_subResetProcedures END SUBROUTINE IItema_ActivateTeamMemberImage","tags":"","loc":"proc/iitema_activateteammemberimage.html","title":"IItema_ActivateTeamMemberImage â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IItema_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Calls proc~~iitema_errorhandler~~CallsGraph proc~iitema_errorhandler IItema_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iitema_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iitema_errorhandler~~CalledByGraph proc~iitema_errorhandler IItema_ErrorHandler proc~iitema_loadteammembers IItema_LoadTeamMembers proc~iitema_loadteammembers->proc~iitema_errorhandler proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~oooptemas_intnumberofteammembers->proc~iitema_errorhandler proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~iitema_loadteammembers proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub var panprociitema_errorhandlerCalledByGraph = svgPanZoom('#prociitema_errorhandlerCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IItema_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT-Routines TYPE ( OOOPtema_adtTeamManager ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IItema_ErrorHandler","tags":"","loc":"proc/iitema_errorhandler.html","title":"IItema_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPstpaS_chrPath(Object, chrPath) Arguments Type Intent Optional Attributes Name type( OOOPstpa_adtStartPath ), intent(inout) :: Object character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrPath Calls proc~~ooopstpas_chrpath~~CallsGraph proc~ooopstpas_chrpath OOOPstpaS_chrPath proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopstpas_chrpath->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopstpas_chrpath->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPstpaS_chrPath ( Object , chrPath ) TYPE ( OOOPstpa_adtStartPath ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( IN ) :: chrPath CALL OOOGglob_subSetProcedures ( \"OOOPstpaS_chrPath\" ) Object % m_chrPath = chrPath CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPstpaS_chrPath","tags":"","loc":"proc/ooopstpas_chrpath.html","title":"OOOPstpaS_chrPath â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPstpaG_chrPath(Object, chrPath) Arguments Type Intent Optional Attributes Name type( OOOPstpa_adtStartPath ), intent(in) :: Object character(kind=OOOGglob_kcha,LEN=*), intent(out) :: chrPath Calls proc~~ooopstpag_chrpath~~CallsGraph proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopstpag_chrpath~~CalledByGraph proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~iiinma_loadteammanagers->proc~ooopstpag_chrpath proc~iitema_loadteammembers IItema_LoadTeamMembers proc~iitema_loadteammembers->proc~ooopstpag_chrpath proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~iiinma_loadteammanagers proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~iitema_loadteammembers proc~iiimma_sync_checkactivityflag->proc~oooptema_start var panprocooopstpag_chrpathCalledByGraph = svgPanZoom('#procooopstpag_chrpathCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPstpaG_chrPath ( Object , chrPath ) TYPE ( OOOPstpa_adtStartPath ), INTENT ( IN ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), INTENT ( OUT ) :: chrPath CALL OOOGglob_subSetProcedures ( \"OOOPstpaG_chrPath\" ) chrPath = Object % m_chrPath CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPstpaG_chrPath","tags":"","loc":"proc/ooopstpag_chrpath.html","title":"OOOPstpaG_chrPath â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPstpa_LoadPath(Object) Arguments Type Intent Optional Attributes Name type( OOOPstpa_adtStartPath ), intent(inout) :: Object Calls proc~~ooopstpa_loadpath~~CallsGraph proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iistpa_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopstpa_loadpath~~CalledByGraph proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath proc~iitema_loadteammembers IItema_LoadTeamMembers proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~iiinma_loadteammanagers proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~iitema_loadteammembers proc~iiimma_sync_checkactivityflag->proc~oooptema_start var panprocooopstpa_loadpathCalledByGraph = svgPanZoom('#procooopstpa_loadpathCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenStatus = 'OLD' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenAccess = 'SEQUENTIAL' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenForm = 'FORMATTED' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenPosition = 'REWIND' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenAction = 'READ' character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), public :: OpenBlank = 'NULL' logical(kind=OOOGglob_klog), public :: logExist integer(kind=OOOGglob_kint), public :: intRecl = 0 integer(kind=OOOGglob_kint), public :: FileStatus = 0 character(kind=OOOGglob_kcha,LEN=OOOGglob_Len200), public :: chrPathAndFileName = \"\" integer(kind=OOOGglob_kint), public :: FileUnit = 0 Source Code SUBROUTINE OOOPstpa_LoadPath ( Object ) ! method, loads the start-Path from file TYPE ( OOOPstpa_adtStartPath ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenStatus = 'OLD' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAccess = 'SEQUENTIAL' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenForm = 'FORMATTED' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenPosition = 'REWIND' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenAction = 'READ' CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len40 ) :: OpenBlank = 'NULL' ! ! for INQUIRE: LOGICAL ( KIND = OOOGglob_klog ) :: logExist INTEGER ( OOOGglob_kint ) :: intRecl = 0 ! INTEGER ( OOOGglob_kint ) :: FileStatus = 0 ! File-error-Status CHARACTER ( KIND = OOOGglob_kcha , LEN = OOOGglob_Len200 ) :: chrPathAndFileName = \"\" INTEGER ( OOOGglob_kint ) :: FileUnit = 0 ! CALL OOOGglob_subSetProcedures ( \"OOOPstpa_LoadPath\" ) ! chrPathAndFileName = 'start.txt' ! the file must be in the program directory FileUnit = OOOGglob_FileUnitA ! ! check the existence of the file: INQUIRE ( FILE = chrPathAndFileName , EXIST = logExist ) IF (. NOT . logExist ) THEN ! File does not exist CALL IIstpa_ErrorHandler ( Object , & \"INQUIRE: File does not exist\" , & OOOGglob_warning , OOOGglob_NoErrNumber ) CALL OOOGglob_subResetProcedures Return END IF ! OPEN ( UNIT = FileUnit , IOSTAT = FileStatus , FILE = TRIM ( chrPathAndFileName ), & STATUS = TRIM ( OpenStatus ), ACCESS = TRIM ( OpenAccess ), FORM = TRIM ( OpenForm ), & POSITION = TRIM ( OpenPosition ), ACTION = TRIM ( OpenAction ), & BLANK = TRIM ( OpenBlank ), DELIM = 'APOSTROPHE' ) IF ( FileStatus . NE . 0 ) THEN CALL IIstpa_ErrorHandler ( Object , \"File-Open-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! READ ( UNIT = FileUnit , FMT =* , IOSTAT = FileStatus ) Object % m_chrPath IF ( FileStatus . NE . 0 ) THEN CALL IIstpa_ErrorHandler ( Object , \"File-Read-error 1\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CLOSE ( UNIT = FileUnit , IOSTAT = FileStatus , STATUS = 'KEEP' ) IF ( FileStatus . NE . 0 ) THEN CALL IIstpa_ErrorHandler ( Object , \"File-Close-error\" , & OOOGglob_error , FileStatus ) CALL OOOGglob_subResetProcedures RETURN END IF ! CALL OOOGglob_subResetProcedures ! END SUBROUTINE OOOPstpa_LoadPath","tags":"","loc":"proc/ooopstpa_loadpath.html","title":"OOOPstpa_LoadPath â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IIstpa_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPstpa_adtStartPath ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Calls proc~~iistpa_errorhandler~~CallsGraph proc~iistpa_errorhandler IIstpa_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iistpa_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iistpa_errorhandler~~CalledByGraph proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath proc~iitema_loadteammembers IItema_LoadTeamMembers proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~ooopinma_start OOOPinma_Start proc~ooopinma_start->proc~iiinma_loadteammanagers proc~ooopimma_start OOOPimma_Start proc~ooopimma_start->proc~ooopinma_start proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~entry_main_sub Entry_Main_Sub proc~entry_main_sub->proc~ooopimma_start program~main Main program~main->proc~entry_main_sub proc~oooptema_start OOOPtema_Start proc~oooptema_start->proc~iitema_loadteammembers proc~iiimma_sync_checkactivityflag->proc~oooptema_start var panprociistpa_errorhandlerCalledByGraph = svgPanZoom('#prociistpa_errorhandlerCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IIstpa_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT-Routines TYPE ( OOOPstpa_adtStartPath ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIstpa_ErrorHandler","tags":"","loc":"proc/iistpa_errorhandler.html","title":"IIstpa_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private function IIinmc_ImageNumberBoundError_CA(Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Called By proc~~iiinmc_imagenumberbounderror_ca~~CalledByGraph proc~iiinmc_imagenumberbounderror_ca IIinmc_ImageNumberBoundError_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca OOOPinmcDC_CopyCoarrayObjImgToImg_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooopinmcs_intnumberofteammanagers_ca OOOPinmcS_intNumberOfTeamManagers_CA proc~ooopinmcs_intnumberofteammanagers_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooopinmcg_intnumberofteammanagers_ca OOOPinmcG_intNumberOfTeamManagers_CA proc~ooopinmcg_intnumberofteammanagers_ca->proc~iiinmc_imagenumberbounderror_ca var panprociiinmc_imagenumberbounderror_caCalledByGraph = svgPanZoom('#prociiinmc_imagenumberbounderror_caCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code LOGICAL ( OOOGglob_klog ) FUNCTION IIinmc_ImageNumberBoundError_CA ( Object_CA , intImageNumber ) ! error handling routine ! checks if the image number does exist TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber ! IIinmc_ImageNumberBoundError_CA = . FALSE . ! IF ( intImageNumber . LT . 1 ) THEN ! image number is too small IIinmc_ImageNumberBoundError_CA = . TRUE . END IF ! IF ( intImageNumber . GT . NUM_IMAGES ()) THEN ! image number is too large IIinmc_ImageNumberBoundError_CA = . TRUE . END IF ! END FUNCTION IIinmc_ImageNumberBoundError_CA","tags":"","loc":"proc/iiinmc_imagenumberbounderror_ca.html","title":"IIinmc_ImageNumberBoundError_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmc_StructureConstructor(Object) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout) :: Object Calls proc~~ooopinmc_structureconstructor~~CallsGraph proc~ooopinmc_structureconstructor OOOPinmc_StructureConstructor proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmc_structureconstructor->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmc_structureconstructor->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPinmc_StructureConstructor ( Object ) ! structure constructor TYPE ( OOOPinmc_adtInitialManager_CA ), INTENT ( INOUT ) :: Object ! CALL OOOGglob_subSetProcedures ( \"OOOPinmc_StructureConstructor\" ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmc_StructureConstructor","tags":"","loc":"proc/ooopinmc_structureconstructor.html","title":"OOOPinmc_StructureConstructor â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcS_intNumberOfTeamManagers_CA(Object_CA, intNumberOfTeamManagers, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intNumberOfTeamManagers integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~ooopinmcs_intnumberofteammanagers_ca~~CallsGraph proc~ooopinmcs_intnumberofteammanagers_ca OOOPinmcS_intNumberOfTeamManagers_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmcs_intnumberofteammanagers_ca->proc~ooogglob_subsetprocedures proc~iiinmc_imagenumberbounderror_ca IIinmc_ImageNumberBoundError_CA proc~ooopinmcs_intnumberofteammanagers_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmcs_intnumberofteammanagers_ca->proc~ooogglob_subresetprocedures proc~iiinmc_errorhandler IIinmc_ErrorHandler proc~ooopinmcs_intnumberofteammanagers_ca->proc~iiinmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinmc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPinmcS_intNumberOfTeamManagers_CA ( Object_CA , intNumberOfTeamManagers , & intImageNumber ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intNumberOfTeamManagers INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcS_intNumberOfTeamManagers_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! IF ( intNumberOfTeamManagers > OOOGglob_TeamManagers_UpperBound ) & THEN CALL IIinmc_ErrorHandler ( Object_CA , \"to many elements\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumber ] % m_intNumberOfTeamManagers = intNumberOfTeamManagers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcS_intNumberOfTeamManagers_CA","tags":"","loc":"proc/ooopinmcs_intnumberofteammanagers_ca.html","title":"OOOPinmcS_intNumberOfTeamManagers_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcG_intNumberOfTeamManagers_CA(Object_CA, intNumberOfTeamManagers, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out) :: intNumberOfTeamManagers integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Calls proc~~ooopinmcg_intnumberofteammanagers_ca~~CallsGraph proc~ooopinmcg_intnumberofteammanagers_ca OOOPinmcG_intNumberOfTeamManagers_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmcg_intnumberofteammanagers_ca->proc~ooogglob_subsetprocedures proc~iiinmc_imagenumberbounderror_ca IIinmc_ImageNumberBoundError_CA proc~ooopinmcg_intnumberofteammanagers_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmcg_intnumberofteammanagers_ca->proc~ooogglob_subresetprocedures proc~iiinmc_errorhandler IIinmc_ErrorHandler proc~ooopinmcg_intnumberofteammanagers_ca->proc~iiinmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinmc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPinmcG_intNumberOfTeamManagers_CA ( Object_CA , intNumberOfTeamManagers , & intImageNumber ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( OUT ) :: intNumberOfTeamManagers INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumber INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcG_intNumberOfTeamManagers_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumber )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! intNumberOfTeamManagers = Object_CA [ intImageNumber ] % m_intNumberOfTeamManagers CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcG_intNumberOfTeamManagers_CA","tags":"","loc":"proc/ooopinmcg_intnumberofteammanagers_ca.html","title":"OOOPinmcG_intNumberOfTeamManagers_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Calls proc~~ooopinmccopyimgtoimg_intnumberofteammanagers_ca~~CallsGraph proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~ooogglob_subsetprocedures proc~iiinmc_imagenumberbounderror_ca IIinmc_ImageNumberBoundError_CA proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~ooogglob_subresetprocedures proc~iiinmc_errorhandler IIinmc_ErrorHandler proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~iiinmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinmc_errorhandler->proc~oooeerroc_addobject var panprocooopinmccopyimgtoimg_intnumberofteammanagers_caCallsGraph = svgPanZoom('#procooopinmccopyimgtoimg_intnumberofteammanagers_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopinmccopyimgtoimg_intnumberofteammanagers_ca~~CalledByGraph proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca OOOPinmcDC_CopyCoarrayObjImgToImg_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % m_intNumberOfTeamManagers = Object_CA [ intImageNumberToCopyFrom ] % m_intNumberOfTeamManagers ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA","tags":"","loc":"proc/ooopinmccopyimgtoimg_intnumberofteammanagers_ca.html","title":"OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcSA_intTeamManagerImages99_CA(Object_CA, intTeamManagerImages99) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in), DIMENSION(1:OOOGglob_TeamManagers_UpperBound) :: intTeamManagerImages99 Calls proc~~ooopinmcsa_intteammanagerimages99_ca~~CallsGraph proc~ooopinmcsa_intteammanagerimages99_ca OOOPinmcSA_intTeamManagerImages99_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmcsa_intteammanagerimages99_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmcsa_intteammanagerimages99_ca->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPinmcSA_intTeamManagerImages99_CA ( Object_CA , intTeamManagerImages99 ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ), INTENT ( IN ) :: intTeamManagerImages99 CALL OOOGglob_subSetProcedures & ( \"OOOPinmcSA_intTeamManagerImages99_CA\" ) Object_CA % mA_intTeamManagerImages99 = intTeamManagerImages99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcSA_intTeamManagerImages99_CA","tags":"","loc":"proc/ooopinmcsa_intteammanagerimages99_ca.html","title":"OOOPinmcSA_intTeamManagerImages99_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcGA_intTeamManagerImages99_CA(Object_CA, intTeamManagerImages99) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out), DIMENSION(1:OOOGglob_TeamManagers_UpperBound) :: intTeamManagerImages99 Calls proc~~ooopinmcga_intteammanagerimages99_ca~~CallsGraph proc~ooopinmcga_intteammanagerimages99_ca OOOPinmcGA_intTeamManagerImages99_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmcga_intteammanagerimages99_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmcga_intteammanagerimages99_ca->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPinmcGA_intTeamManagerImages99_CA ( Object_CA , intTeamManagerImages99 ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ), INTENT ( OUT ) :: intTeamManagerImages99 CALL OOOGglob_subSetProcedures & ( \"OOOPinmcGA_intTeamManagerImages99_CA\" ) intTeamManagerImages99 = Object_CA % mA_intTeamManagerImages99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcGA_intTeamManagerImages99_CA","tags":"","loc":"proc/ooopinmcga_intteammanagerimages99_ca.html","title":"OOOPinmcGA_intTeamManagerImages99_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Calls proc~~ooopinmccopyaimgtoimg_intteammanagerimages99_ca~~CallsGraph proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~ooogglob_subsetprocedures ma_intteammanagerimages99 ma_intteammanagerimages99 proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->ma_intteammanagerimages99 proc~iiinmc_imagenumberbounderror_ca IIinmc_ImageNumberBoundError_CA proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~ooogglob_subresetprocedures proc~iiinmc_errorhandler IIinmc_ErrorHandler proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~iiinmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinmc_errorhandler->proc~oooeerroc_addobject var panprocooopinmccopyaimgtoimg_intteammanagerimages99_caCallsGraph = svgPanZoom('#procooopinmccopyaimgtoimg_intteammanagerimages99_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopinmccopyaimgtoimg_intteammanagerimages99_ca~~CalledByGraph proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca OOOPinmcDC_CopyCoarrayObjImgToImg_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy only the required part of the array: ! IF ( Object_CA % m_intNumberOfTeamManagers & . LT . 1 ) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid number of TeamManagers\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % mA_intTeamManagerImages99 ( 1 : Object_CA % m_intNumberOfTeamManagers ) & = Object_CA [ intImageNumberToCopyFrom ] % mA_intTeamManagerImages99 ( 1 : Object_CA % m_intNumberOfTeamManagers ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA","tags":"","loc":"proc/ooopinmccopyaimgtoimg_intteammanagerimages99_ca.html","title":"OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcSA_chrTeamMembersFiles99_CA(Object_CA, chrTeamMembersFiles99) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(in), DIMENSION(1:OOOGglob_TeamManagers_UpperBound) :: chrTeamMembersFiles99 Calls proc~~ooopinmcsa_chrteammembersfiles99_ca~~CallsGraph proc~ooopinmcsa_chrteammembersfiles99_ca OOOPinmcSA_chrTeamMembersFiles99_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmcsa_chrteammembersfiles99_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmcsa_chrteammembersfiles99_ca->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPinmcSA_chrTeamMembersFiles99_CA ( Object_CA , chrTeamMembersFiles99 ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ), INTENT ( IN ) :: chrTeamMembersFiles99 CALL OOOGglob_subSetProcedures & ( \"OOOPinmcSA_chrTeamMembersFiles99_CA\" ) Object_CA % mA_chrTeamMembersFiles99 = chrTeamMembersFiles99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcSA_chrTeamMembersFiles99_CA","tags":"","loc":"proc/ooopinmcsa_chrteammembersfiles99_ca.html","title":"OOOPinmcSA_chrTeamMembersFiles99_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcGA_chrTeamMembersFiles99_CA(Object_CA, chrTeamMembersFiles99) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(out), DIMENSION(1:OOOGglob_TeamManagers_UpperBound) :: chrTeamMembersFiles99 Calls proc~~ooopinmcga_chrteammembersfiles99_ca~~CallsGraph proc~ooopinmcga_chrteammembersfiles99_ca OOOPinmcGA_chrTeamMembersFiles99_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmcga_chrteammembersfiles99_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmcga_chrteammembersfiles99_ca->proc~ooogglob_subresetprocedures Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE OOOPinmcGA_chrTeamMembersFiles99_CA ( Object_CA , chrTeamMembersFiles99 ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA CHARACTER ( KIND = OOOGglob_kcha , LEN =* ), DIMENSION ( 1 : OOOGglob_TeamManagers_UpperBound ), INTENT ( OUT ) :: chrTeamMembersFiles99 CALL OOOGglob_subSetProcedures & ( \"OOOPinmcGA_chrTeamMembersFiles99_CA\" ) chrTeamMembersFiles99 = Object_CA % mA_chrTeamMembersFiles99 CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcGA_chrTeamMembersFiles99_CA","tags":"","loc":"proc/ooopinmcga_chrteammembersfiles99_ca.html","title":"OOOPinmcGA_chrTeamMembersFiles99_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Calls proc~~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca~~CallsGraph proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA ma_chrteammembersfiles99 ma_chrteammembersfiles99 proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->ma_chrteammembersfiles99 proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~ooogglob_subsetprocedures proc~iiinmc_imagenumberbounderror_ca IIinmc_ImageNumberBoundError_CA proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~ooogglob_subresetprocedures proc~iiinmc_errorhandler IIinmc_ErrorHandler proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~iiinmc_errorhandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinmc_errorhandler->proc~oooeerroc_addobject var panprocooopinmccopyaimgtoimg_chrteammembersfiles99_caCallsGraph = svgPanZoom('#procooopinmccopyaimgtoimg_chrteammembersfiles99_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca~~CalledByGraph proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca OOOPinmcDC_CopyCoarrayObjImgToImg_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status CALL OOOGglob_subSetProcedures & ( \"OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! copy only the required part of the array: ! IF ( Object_CA % m_intNumberOfTeamManagers & . LT . 1 ) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid number of TeamManagers\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! Object_CA [ intImageNumberToCopyTo ] % mA_chrTeamMembersFiles99 ( 1 : Object_CA % m_intNumberOfTeamManagers ) & = Object_CA [ intImageNumberToCopyFrom ] % mA_chrTeamMembersFiles99 ( 1 : Object_CA % m_intNumberOfTeamManagers ) ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA","tags":"","loc":"proc/ooopinmccopyaimgtoimg_chrteammembersfiles99_ca.html","title":"OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine OOOPinmcDC_CopyCoarrayObjImgToImg_CA(Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Description copy the properties: if necessary further properties must be copied here Calls proc~~ooopinmcdc_copycoarrayobjimgtoimg_ca~~CallsGraph proc~ooopinmcdc_copycoarrayobjimgtoimg_ca OOOPinmcDC_CopyCoarrayObjImgToImg_CA proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooogglob_subresetprocedures proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca proc~iiinmc_imagenumberbounderror_ca IIinmc_ImageNumberBoundError_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~iiinmc_imagenumberbounderror_ca proc~iiinmc_errorhandler IIinmc_ErrorHandler proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~iiinmc_errorhandler proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~ooogglob_subsetprocedures proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~ooogglob_subresetprocedures proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~iiinmc_errorhandler ma_intteammanagerimages99 ma_intteammanagerimages99 proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->ma_intteammanagerimages99 proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinmc_errorhandler->proc~oooeerroc_addobject proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~ooogglob_subsetprocedures proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~ooogglob_subresetprocedures proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~iiinmc_errorhandler proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~ooogglob_subsetprocedures proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~ooogglob_subresetprocedures proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~iiinmc_imagenumberbounderror_ca proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~iiinmc_errorhandler ma_chrteammembersfiles99 ma_chrteammembersfiles99 proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->ma_chrteammembersfiles99 var panprocooopinmcdc_copycoarrayobjimgtoimg_caCallsGraph = svgPanZoom('#procooopinmcdc_copycoarrayobjimgtoimg_caCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: Status = 0 Source Code SUBROUTINE OOOPinmcDC_CopyCoarrayObjImgToImg_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) ! copy from any (remote) image to any other (remote) image ! (static members only) TYPE ( OOOPinmc_adtInitialManager_CA ), CODIMENSION [ * ], INTENT ( INOUT ) :: Object_CA INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyFrom INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intImageNumberToCopyTo INTEGER ( OOOGglob_kint ) :: Status = 0 ! error status !****************************************** CALL OOOGglob_subSetProcedures & ( \"OOOPinmcDC_CopyCoarrayObjImgToImg_CA\" ) ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyFrom )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 1\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! ! IF ( IIinmc_ImageNumberBoundError_CA & ( Object_CA , intImageNumberToCopyTo )) THEN CALL IIinmc_ErrorHandler ( Object_CA , & \"no valid image number 2\" , & OOOGglob_error , Status ) CALL OOOGglob_subResetProcedures RETURN END IF ! !******************************************* ! copy the properties: !**************** CALL OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** CALL OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA ( Object_CA , intImageNumberToCopyFrom , intImageNumberToCopyTo ) !**************** ! if necessary further properties must be copied here !******************************************* ! CALL OOOGglob_subResetProcedures END SUBROUTINE OOOPinmcDC_CopyCoarrayObjImgToImg_CA","tags":"","loc":"proc/ooopinmcdc_copycoarrayobjimgtoimg_ca.html","title":"OOOPinmcDC_CopyCoarrayObjImgToImg_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"private subroutine IIinmc_ErrorHandler(Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Calls proc~~iiinmc_errorhandler~~CallsGraph proc~iiinmc_errorhandler IIinmc_ErrorHandler proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiinmc_errorhandler->proc~oooeerroc_addobject Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~iiinmc_errorhandler~~CalledByGraph proc~iiinmc_errorhandler IIinmc_ErrorHandler proc~ooopinmcdc_copycoarrayobjimgtoimg_ca OOOPinmcDC_CopyCoarrayObjImgToImg_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~iiinmc_errorhandler proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA proc~ooopinmcdc_copycoarrayobjimgtoimg_ca->proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca proc~ooopinmccopyaimgtoimg_intteammanagerimages99_ca->proc~iiinmc_errorhandler proc~ooopinmccopyaimgtoimg_chrteammembersfiles99_ca->proc~iiinmc_errorhandler proc~ooopinmcs_intnumberofteammanagers_ca OOOPinmcS_intNumberOfTeamManagers_CA proc~ooopinmcs_intnumberofteammanagers_ca->proc~iiinmc_errorhandler proc~ooopinmccopyimgtoimg_intnumberofteammanagers_ca->proc~iiinmc_errorhandler proc~ooopinmcg_intnumberofteammanagers_ca OOOPinmcG_intNumberOfTeamManagers_CA proc~ooopinmcg_intnumberofteammanagers_ca->proc~iiinmc_errorhandler var panprociiinmc_errorhandlerCalledByGraph = svgPanZoom('#prociiinmc_errorhandlerCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE IIinmc_ErrorHandler ( Object , chrErrorDescription , & intErrorType , intErrorNumber ) ! ErrorHandler for the ADT and CA routines TYPE ( OOOPinmc_adtInitialManager_CA ), INTENT ( INOUT ) :: Object CHARACTER ( KIND = 1 , LEN =* ), INTENT ( IN ) :: chrErrorDescription INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorType ! 1=warning, 2=Severe System error INTEGER ( OOOGglob_kint ), INTENT ( IN ) :: intErrorNumber ! Run Time error Number (e.g. Status) CALL OOOEerroc_AddObject ( Object % m_UUerrocError , chrErrorDescription , & intErrorType ) END SUBROUTINE IIinmc_ErrorHandler","tags":"","loc":"proc/iiinmc_errorhandler.html","title":"IIinmc_ErrorHandler â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"public subroutine Entry_Main_Sub() Uses: OOOPimma_admImageManager Arguments None Description Main entry subroutine. Note Start the ImageManager on all images. Calls proc~~entry_main_sub~~CallsGraph proc~entry_main_sub Entry_Main_Sub proc~ooopimma_start OOOPimma_Start proc~entry_main_sub->proc~ooopimma_start proc~ooopinma_start OOOPinma_Start proc~ooopimma_start->proc~ooopinma_start proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimma_start->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimma_start->proc~ooogglob_subresetprocedures images images proc~ooopimma_start->images proc~ooopimma_structureconstructor OOOPimma_StructureConstructor proc~ooopimma_start->proc~ooopimma_structureconstructor proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~ooopinma_start->proc~ooogglob_subsetprocedures proc~ooopinma_start->proc~ooogglob_subresetprocedures ma_intteammanagerimages99 ma_intteammanagerimages99 proc~ooopinma_start->ma_intteammanagerimages99 proc~ooopinma_structureconstructor OOOPinma_StructureConstructor proc~ooopinma_start->proc~ooopinma_structureconstructor proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~ooopinma_start->proc~iiinma_loadteammanagers ma_chrteammembersfiles99 ma_chrteammembersfiles99 proc~ooopinma_start->ma_chrteammembersfiles99 proc~ooopimma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopimma_structureconstructor->proc~ooogglob_subresetprocedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subsetprocedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subresetprocedures proc~oooptema_start OOOPtema_Start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~oooptmem_start OOOPtmem_Start proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~ooopinma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopinma_structureconstructor->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~iiinma_activateteammanagerimage->proc~ooogglob_subsetprocedures proc~iiinma_activateteammanagerimage->proc~ooogglob_subresetprocedures proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopimsc_structureconstructor_ca OOOPimsc_StructureConstructor_CA proc~iiinma_activateteammanagerimage->proc~ooopimsc_structureconstructor_ca proc~iiinma_loadteammanagers->proc~ooogglob_subsetprocedures proc~iiinma_loadteammanagers->proc~ooogglob_subresetprocedures proc~iiinma_loadteammanagers->ma_intteammanagerimages99 proc~iiinma_loadteammanagers->ma_chrteammembersfiles99 proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iiinma_loadteammanagers->proc~ooopstpag_chrpath proc~iiinma_errorhandler IIinma_ErrorHandler proc~iiinma_loadteammanagers->proc~iiinma_errorhandler proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subsetprocedures proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subresetprocedures proc~iiimmc_errorhandler->proc~oooeerroc_addobject proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures proc~iiinma_errorhandler->proc~oooeerroc_addobject proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subsetprocedures proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subresetprocedures proc~ooopinmas_intnumberofteammanagers->proc~iiinma_errorhandler proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~iistpa_errorhandler->proc~oooeerroc_addobject proc~oooptema_start->proc~ooogglob_subsetprocedures proc~oooptema_start->proc~ooogglob_subresetprocedures proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptemas_chrteammembersfilename OOOPtemaS_chrTeamMembersFileName proc~oooptema_start->proc~oooptemas_chrteammembersfilename proc~oooptema_structureconstructor OOOPtema_StructureConstructor proc~oooptema_start->proc~oooptema_structureconstructor ma_intteammemberimages99 ma_intteammemberimages99 proc~oooptema_start->ma_intteammemberimages99 proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_loadteammembers IItema_LoadTeamMembers proc~oooptema_start->proc~iitema_loadteammembers proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~oooptmem_start->proc~ooogglob_subsetprocedures proc~oooptmem_start->proc~ooogglob_subresetprocedures proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptmem_structureconstructor OOOPtmem_StructureConstructor proc~oooptmem_start->proc~oooptmem_structureconstructor proc~oooptemas_chrteammembersfilename->proc~ooogglob_subsetprocedures proc~oooptemas_chrteammembersfilename->proc~ooogglob_subresetprocedures proc~oooptema_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptema_structureconstructor->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subsetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~iitema_loadteammembers->proc~ooogglob_subsetprocedures proc~iitema_loadteammembers->proc~ooogglob_subresetprocedures proc~iitema_loadteammembers->proc~ooopstpag_chrpath proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~iitema_loadteammembers->ma_intteammemberimages99 proc~iitema_errorhandler IItema_ErrorHandler proc~iitema_loadteammembers->proc~iitema_errorhandler proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~iitema_errorhandler->proc~oooeerroc_addobject proc~oooptemas_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~oooptemas_intnumberofteammembers->proc~ooogglob_subresetprocedures proc~oooptemas_intnumberofteammembers->proc~iitema_errorhandler proc~oooptmem_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptmem_structureconstructor->proc~ooogglob_subresetprocedures var panprocentry_main_subCallsGraph = svgPanZoom('#procentry_main_subCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~entry_main_sub~~CalledByGraph proc~entry_main_sub Entry_Main_Sub program~main Main program~main->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code SUBROUTINE Entry_Main_Sub !< Main entry subroutine. !< !< @note Start the ImageManager on all images. ! USE OOOPimma_admImageManager ! IMPLICIT NONE ! CALL OOOPimma_Start ( OOOPimmaImageManager_1 ) ! start the ImageManager on all images ! END SUBROUTINE Entry_Main_Sub","tags":"","loc":"proc/entry_main_sub.html","title":"Entry_Main_Sub â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError OOOPstpa_admStartPath OOOPinmc_admInitialManager_CA module~~ooopinma_adminitialmanager~~UsesGraph module~ooopinma_adminitialmanager OOOPinma_admInitialManager module~ooopinmc_adminitialmanager_ca OOOPinmc_admInitialManager_CA module~ooopinmc_adminitialmanager_ca->module~ooopinma_adminitialmanager module~ooopstpa_admstartpath OOOPstpa_admStartPath module~ooopstpa_admstartpath->module~ooopinma_adminitialmanager module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~ooopinma_adminitialmanager module~ooogglob_globals->module~ooopinmc_adminitialmanager_ca module~ooogglob_globals->module~ooopstpa_admstartpath module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~oooeerro_admerror->module~ooopinma_adminitialmanager module~oooeerro_admerror->module~ooopinmc_adminitialmanager_ca module~oooeerro_admerror->module~ooopstpa_admstartpath var panmoduleooopinma_adminitialmanagerUsesGraph = svgPanZoom('#moduleooopinma_adminitialmanagerUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPinma Abstract Data Type (ADT):         OOOPinma_adtInitialManager\n Abstract Data Type Module (adm):  OOOPinma_admInitialManager.f90 Purpose:                    InitialManager-Object\n Language:                   mainly Fortran 95 with Fortran 2008 coarrays\n Programmer:                 Michael Siehl\n Date:                       January 2016 Naming Conventions: for scalar members:\n                             m: ADT member\n                             S: property set, G: property get,\n                             CopyImgToImg: copy an ADT member image to image\n  for array members:\n                             A: array\n                             mA: ADT array member\n                             SA: set array property, GA: get array property,\n                             CopyAImgToImg: copy an ADT array member image to image for elements of array members:\n                             SAElement: set only one array element property\n                             GAElement: get only one array element property\n                             CopyAElementImgToImg: copy only one element of an ADT array member image to image 99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: CA: coarray routine / coarray declaration\n                             _SYNC : synchronization routine\n                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object access routines for scalar *\n and static array members:  * access routines for dynamic     *\n array and derived type members: * access routines for the   *\n coarray wrapper member:   * ADT-Management: ** Program Logic: ** Error Handling: ** Enumerations:  ** Abstract Data Type Declaration: * * **** Corresponding Local Object Declaration: **** ** access routines for scalar   *\n and static array members:    * access routines for the   *\n coarray wrapper member:   * ADT-Management:  * Program Logic:   * * * Error Handling: * * * * * * * * * * * * _ _ _ _ _ _ _ _ __ Used By module~~ooopinma_adminitialmanager~~UsedByGraph module~ooopinma_adminitialmanager OOOPinma_admInitialManager module~ooopimma_admimagemanager OOOPimma_admImageManager module~ooopinma_adminitialmanager->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( OOOPinma_adtInitialManager ), public, SAVE :: OOOPinmaInitialManager_1 Derived Types type, public :: OOOPinma_adtInitialManager Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), private :: m_intNumberOfTeamManagers = 0 **** array containing the image numbers of the TeamManager images: integer(kind=OOOGglob_kint), private, DIMENSION (1:OOOGglob_TeamManagers_UpperBound) :: mA_intTeamManagerImages99 **** array containing the file names of the TeamMembers files for each TeamManager: character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private, DIMENSION (1:OOOGglob_TeamManagers_UpperBound) :: mA_chrTeamMembersFiles99 type(OOOEerroc_colError), private :: m_UUerrocError Description Subroutines public subroutine OOOPinmaS_intNumberOfTeamManagers (Object, intNumberOfTeamManagers) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object integer(kind=OOOGglob_kint), intent(in) :: intNumberOfTeamManagers public subroutine OOOPinmaG_intNumberOfTeamManagers (Object, intNumberOfTeamManagers) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(in) :: Object integer(kind=OOOGglob_kint), intent(out) :: intNumberOfTeamManagers public subroutine OOOPinma_StructureConstructor (Object) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object public subroutine OOOPinma_Start (Object) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object Description private subroutine IIinma_LoadTeamManagers (Object) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object private subroutine IIinma_ActivateTeamManagerImage (Object, intTeamManagerImageNumber, chrTeamMembersFileName) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(in) :: Object integer(kind=OOOGglob_kint), intent(in) :: intTeamManagerImageNumber character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), intent(in) :: chrTeamMembersFileName private subroutine IIinma_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPinma_adtInitialManager ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber","tags":"","loc":"module/ooopinma_adminitialmanager.html","title":"OOOPinma_admInitialManager â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError module~~ooopimsc_admimagestatus_ca~~UsesGraph module~ooopimsc_admimagestatus_ca OOOPimsc_admImageStatus_CA module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~ooopimsc_admimagestatus_ca module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~oooeerro_admerror->module~ooopimsc_admimagestatus_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPimsc Abstract Data Type (ADT):         OOOPimsc_adtImageStatus_CA\n Abstract Data Type Module (adm):  OOOPimsc_admImageStatus_CA.f90 Purpose:                    ImageStatus_CA-Object\n Language:                   mainly Fortran 95 with Fortran 2008 coarrays\n Programmer:                 Michael Siehl\n Date:                       January 2016 Naming Conventions: for scalar members:\n                             m: ADT member\n                             S: property set, G: property get,\n                             CopyImgToImg: copy an ADT member image to image\n  for array members:\n                             A: array\n                             mA: ADT array member\n                             SA: set array property, GA: get array property,\n                             CopyAImgToImg: copy an ADT array member image to image for elements of array members:\n                             SAElement: set only one array element property\n                             GAElement: get only one array element property\n                             CopyAElementImgToImg: copy only one element of an ADT array member image to image 99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: CA: coarray routine / coarray declaration\n                             _SYNC : synchronization routine\n                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object Local ADT Routines: * * * * * access routines for scalar\n and static array members: **\n access routines for\n dynamic array members: **\n local ADT management: Coarray ADT Routines: * * * * * * *\n access routines for scalar\n and static array members: access routines for\n dynamic array members: **\n coarray ADT management: Error Handling: * * * * local ADT: coarray ADT: * * * Enumerations: * * * ImageActivityFlag: * * * * * * * Corresponding Coarray Declarations: * * * * * * * * * * * * * * * * * * * Local ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Local ADT Routines: * * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Local ADT Routines: * * * * * * * * * * * * local ADT management:  * * * Coarray ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Coarray ADT Routines: * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Coarray ADT Routines: * * * * * * * * * * * coarray ADT management: * * * Error Handling: * * * * * * * * * * * * _ _ _ _ _ _ _ _ __ Private Used By module~~ooopimsc_admimagestatus_ca~~UsedByGraph module~ooopimsc_admimagestatus_ca OOOPimsc_admImageStatus_CA proc~ooopinma_start OOOPinma_Start module~ooopimsc_admimagestatus_ca->proc~ooopinma_start proc~oooptema_start OOOPtema_Start module~ooopimsc_admimagestatus_ca->proc~oooptema_start module~ooopimmc_admimagemanager_ca OOOPimmc_admImageManager_CA module~ooopimsc_admimagestatus_ca->module~ooopimmc_admimagemanager_ca proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage module~ooopimsc_admimagestatus_ca->proc~iiinma_activateteammanagerimage proc~oooptmem_start OOOPtmem_Start module~ooopimsc_admimagestatus_ca->proc~oooptmem_start module~oooptema_admteammanager OOOPtema_admTeamManager module~ooopimsc_admimagestatus_ca->module~oooptema_admteammanager proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag module~ooopimsc_admimagestatus_ca->proc~iiimma_sync_checkactivityflag proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage module~ooopimsc_admimagestatus_ca->proc~iitema_activateteammemberimage module~ooopimmc_admimagemanager_ca->proc~iiinma_activateteammanagerimage module~ooopimma_admimagemanager OOOPimma_admImageManager module~ooopimmc_admimagemanager_ca->module~ooopimma_admimagemanager module~oooptema_admteammanager->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub var panmoduleooopimsc_admimagestatus_caUsedByGraph = svgPanZoom('#moduleooopimsc_admimagestatus_caUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( OOOPimsc_DontUse1 ), public, parameter :: OOOPimscEnum_ImageActivityFlag = OOOPimsc_DontUse1(1, 2, 3, 4) Abstract Data Type Specification: * * * type( OOOPimsc_adtImageStatus_CA ), public, CODIMENSION[*], SAVE :: OOOPimscImageStatus_CA_1 Derived Types type, public :: OOOPimsc_DontUse1 Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), public :: InitialWaiting integer(kind=OOOGglob_kint), public :: TeamManager integer(kind=OOOGglob_kint), public :: TeamMember integer(kind=OOOGglob_kint), public :: ExecutionFinished type, public :: OOOPimsc_adtImageStatus_CA Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), private :: m_intImageActivityFlag = OOOPimscEnum_ImageActivityFlag%InitialWaiting type(OOOEerroc_colError), private :: m_UUerrocError Description Functions private function IIimsc_ImageNumberBoundError_CA (Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Subroutines public subroutine OOOPimsc_StructureConstructor (Object) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout) :: Object public subroutine OOOPimscS_intImageActivityFlag_CA (Object_CA, intImageActivityFlag, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageActivityFlag integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPimscG_intImageActivityFlag_CA (Object_CA, intImageActivityFlag, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out) :: intImageActivityFlag integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPimscCopyImgToImg_intImageActivityFlag_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo public subroutine OOOPimscDC_CopyCoarrayObjImgToImg_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Description copy the properties: public subroutine OOOPimsc_StructureConstructor_CA (Object_CA) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout), CODIMENSION[*] :: Object_CA private subroutine IIimsc_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPimsc_adtImageStatus_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber","tags":"","loc":"module/ooopimsc_admimagestatus_ca.html","title":"OOOPimsc_admImageStatus_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError OOOPimmc_admImageManager_CA OOOPtema_admTeamManager OOOPtmem_admTeamMember OOOPinma_admInitialManager module~~ooopimma_admimagemanager~~UsesGraph module~ooopimma_admimagemanager OOOPimma_admImageManager module~ooopimmc_admimagemanager_ca OOOPimmc_admImageManager_CA module~ooopimmc_admimagemanager_ca->module~ooopimma_admimagemanager module~oooptema_admteammanager OOOPtema_admTeamManager module~oooptema_admteammanager->module~ooopimma_admimagemanager module~oooeerro_admerror OOOEerro_admError module~oooeerro_admerror->module~ooopimma_admimagemanager module~oooeerro_admerror->module~ooopimmc_admimagemanager_ca module~oooeerro_admerror->module~oooptema_admteammanager module~ooopinma_adminitialmanager OOOPinma_admInitialManager module~oooeerro_admerror->module~ooopinma_adminitialmanager module~oooptmem_admteammember OOOPtmem_admTeamMember module~oooeerro_admerror->module~oooptmem_admteammember module~ooopimsc_admimagestatus_ca OOOPimsc_admImageStatus_CA module~oooeerro_admerror->module~ooopimsc_admimagestatus_ca module~oooptemc_admteammanager_ca OOOPtemc_admTeamManager_CA module~oooeerro_admerror->module~oooptemc_admteammanager_ca module~ooopstpa_admstartpath OOOPstpa_admStartPath module~oooeerro_admerror->module~ooopstpa_admstartpath module~ooopinmc_adminitialmanager_ca OOOPinmc_admInitialManager_CA module~oooeerro_admerror->module~ooopinmc_adminitialmanager_ca module~oooptmec_admteammember_ca OOOPtmec_admTeamMember_CA module~oooeerro_admerror->module~oooptmec_admteammember_ca module~ooopinma_adminitialmanager->module~ooopimma_admimagemanager module~oooptmem_admteammember->module~ooopimma_admimagemanager module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~ooopimma_admimagemanager module~ooogglob_globals->module~ooopimmc_admimagemanager_ca module~ooogglob_globals->module~oooptema_admteammanager module~ooogglob_globals->module~oooeerro_admerror module~ooogglob_globals->module~ooopinma_adminitialmanager module~ooogglob_globals->module~oooptmem_admteammember module~ooogglob_globals->module~ooopimsc_admimagestatus_ca module~ooogglob_globals->module~oooptemc_admteammanager_ca module~ooogglob_globals->module~ooopstpa_admstartpath module~ooogglob_globals->module~ooopinmc_adminitialmanager_ca module~ooogglob_globals->module~oooptmec_admteammember_ca module~ooopimsc_admimagestatus_ca->module~ooopimmc_admimagemanager_ca module~ooopimsc_admimagestatus_ca->module~oooptema_admteammanager module~oooptemc_admteammanager_ca->module~oooptema_admteammanager module~ooopstpa_admstartpath->module~oooptema_admteammanager module~ooopstpa_admstartpath->module~ooopinma_adminitialmanager module~ooopinmc_adminitialmanager_ca->module~ooopinma_adminitialmanager module~oooptmec_admteammember_ca->module~oooptmem_admteammember var panmoduleooopimma_admimagemanagerUsesGraph = svgPanZoom('#moduleooopimma_admimagemanagerUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Image manager object definition. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPimma Abstract Data Type (ADT):         OOOPimma_adtImageManager Abstract Data Type Module (adm):  OOOPimma_admImageManager.f90 Purpose:                    ImageManager-Object Language:                   mainly Fortran 95 with Fortran 2008 coarrays Programmer:                 Michael Siehl Date:                       January 2016 Naming Conventions: for scalar members: m: ADT member\n                         S: property set, G: property get,\n                         CopyImgToImg: copy an ADT member image to image for array members: A: array\n                         mA: ADT array member\n                         SA: set array property, GA: get array property,\n                         CopyAImgToImg: copy an ADT array member image to image for elements of array members: SAElement: set only one array element property\n                         GAElement: get only one array element property\n                         CopyAElementImgToImg: copy only one element of an ADT array member image to image\n\n                         99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: _CA: coarray routine / coarray declaration\n                         _SYNC_: synchronization routine\n                         CopyCoarrayObjImgToImg: copy a coarray ADT object image to image\n\n                         DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object Used By module~~ooopimma_admimagemanager~~UsedByGraph module~ooopimma_admimagemanager OOOPimma_admImageManager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( OOOPimma_adtImageManager ), public, SAVE :: OOOPimmaImageManager_1 Local Image Manager. Derived Types type, public :: OOOPimma_adtImageManager Components Type Visibility Attributes Name Initial type(OOOEerroc_colError), private :: m_UUerrocError error-Collection Description Abstract image manager. Subroutines public subroutine OOOPimma_StructureConstructor (Object) Arguments Type Intent Optional Attributes Name type( OOOPimma_adtImageManager ), intent(inout) :: Object Abstract image manager. Description Structure constructor public subroutine OOOPimma_Start (Object) Arguments Type Intent Optional Attributes Name type( OOOPimma_adtImageManager ), intent(inout) :: Object Abstract image manager. Description Start image manager. private subroutine IIimma_SYNC_CheckActivityFlag (Object) Arguments Type Intent Optional Attributes Name type( OOOPimma_adtImageManager ), intent(in) :: Object Description synchronization routine. private subroutine IIimma_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPimma_adtImageManager ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber Description ErrorHandler for the ADT-Routines","tags":"","loc":"module/ooopimma_admimagemanager.html","title":"OOOPimma_admImageManager â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError module~~oooptmec_admteammember_ca~~UsesGraph module~oooptmec_admteammember_ca OOOPtmec_admTeamMember_CA module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~oooptmec_admteammember_ca module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~oooeerro_admerror->module~oooptmec_admteammember_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPtmec Abstract Data Type (ADT):         OOOPtmec_adtTeamMember_CA\n Abstract Data Type Module (adm):  OOOPtmec_admTeamMember_CA.f90 Purpose:                    TeamMember_CA-Object\n Language:                   mainly Fortran 95 with Fortran 2008 coarrays\n Programmer:                 Michael Siehl\n Date:                       January 2016 Naming Conventions: for scalar members:\n                             m: ADT member\n                             S: property set, G: property get,\n                             CopyImgToImg: copy an ADT member image to image\n  for array members:\n                             A: array\n                             mA: ADT array member\n                             SA: set array property, GA: get array property,\n                             CopyAImgToImg: copy an ADT array member image to image for elements of array members:\n                             SAElement: set only one array element property\n                             GAElement: get only one array element property\n                             CopyAElementImgToImg: copy only one element of an ADT array member image to image 99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: CA: coarray routine / coarray declaration\n                             _SYNC : synchronization routine\n                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object Local ADT Routines: * * * * access routines for scalar\n and static array members: *\n access routines for\n dynamic array members: **\n local ADT management: Coarray ADT Routines: * * * * * ** access routines for scalar\n and static array members: **\n access routines for\n dynamic array members: **\n coarray ADT management: Error Handling: * * * * local ADT: coarray ADT: * * * Enumerations: * * * * Abstract Data Type Specification: * * * Corresponding Coarray Declarations: * * ** * * Local ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Local ADT Routines: * * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Local ADT Routines: * * * * * * * * * * * * local ADT management:  * * * Coarray ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Coarray ADT Routines: * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Coarray ADT Routines: * * * * * * * * * * * coarray ADT management: * * * Error Handling: * * * * * * * * * * * * _ _ _ _ _ _ _ _ __ Private Used By module~~oooptmec_admteammember_ca~~UsedByGraph module~oooptmec_admteammember_ca OOOPtmec_admTeamMember_CA module~oooptmem_admteammember OOOPtmem_admTeamMember module~oooptmec_admteammember_ca->module~oooptmem_admteammember module~ooopimma_admimagemanager OOOPimma_admImageManager module~oooptmem_admteammember->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub var panmoduleoooptmec_admteammember_caUsedByGraph = svgPanZoom('#moduleoooptmec_admteammember_caUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( OOOPtmec_adtTeamMember_CA ), public, CODIMENSION[*], SAVE :: OOOPtmecTeamMember_CA_1 Derived Types type, public :: OOOPtmec_adtTeamMember_CA Components Type Visibility Attributes Name Initial type(OOOEerroc_colError), private :: m_UUerrocError Description Functions public function IItmec_ImageNumberBoundError_CA (Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtmec_adtTeamMember_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Subroutines public subroutine OOOPtmec_StructureConstructor (Object) Arguments Type Intent Optional Attributes Name type( OOOPtmec_adtTeamMember_CA ), intent(inout) :: Object private subroutine IItmec_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPtmec_adtTeamMember_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber","tags":"","loc":"module/oooptmec_admteammember_ca.html","title":"OOOPtmec_admTeamMember_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError module~~oooptemc_admteammanager_ca~~UsesGraph module~oooptemc_admteammanager_ca OOOPtemc_admTeamManager_CA module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~oooptemc_admteammanager_ca module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~oooeerro_admerror->module~oooptemc_admteammanager_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPtemc Abstract Data Type (ADT):         OOOPtemc_adtTeamManager_CA\n Abstract Data Type Module (adm):  OOOPtemc_admTeamManager_CA.f90 Purpose:                    TeamManager_CA-Object\n Language:                   mainly Fortran 95 with Fortran 2008 coarrays\n Programmer:                 Michael Siehl\n Date:                       January 2016 Naming Conventions: for scalar members:\n                             m: ADT member\n                             S: property set, G: property get,\n                             CopyImgToImg: copy an ADT member image to image\n  for array members:\n                             A: array\n                             mA: ADT array member\n                             SA: set array property, GA: get array property,\n                             CopyAImgToImg: copy an ADT array member image to image for elements of array members:\n                             SAElement: set only one array element property\n                             GAElement: get only one array element property\n                             CopyAElementImgToImg: copy only one element of an ADT array member image to image 99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: CA: coarray routine / coarray declaration\n                             _SYNC : synchronization routine\n                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object Local ADT Routines: * * * * * access routines for scalar\n and static array members: **\n access routines for\n dynamic array members: **\n local ADT management: Coarray ADT Routines: * * * * * * *\n access routines for scalar\n and static array members: access routines for\n dynamic array members: **\n coarray ADT management: Error Handling: * * * * local ADT: coarray ADT: * * * Enumerations: * * * * Abstract Data Type Specification: * * * Corresponding Coarray Declarations: * * ** * * Local ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Local ADT Routines: * * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Local ADT Routines: * * * * * * * * * * * * local ADT management:  * * * Coarray ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Coarray ADT Routines: * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Coarray ADT Routines: * * * * * * * * * * * coarray ADT management: * * * Error Handling: * * * * * * * * * * * * _ _ _ _ _ _ _ _ __ Private Used By module~~oooptemc_admteammanager_ca~~UsedByGraph module~oooptemc_admteammanager_ca OOOPtemc_admTeamManager_CA module~oooptema_admteammanager OOOPtema_admTeamManager module~oooptemc_admteammanager_ca->module~oooptema_admteammanager module~ooopimma_admimagemanager OOOPimma_admImageManager module~oooptema_admteammanager->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub var panmoduleoooptemc_admteammanager_caUsedByGraph = svgPanZoom('#moduleoooptemc_admteammanager_caUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( OOOPtemc_adtTeamManager_CA ), public, CODIMENSION[*], SAVE :: OOOPtemcTeamManager_CA_1 Derived Types type, public :: OOOPtemc_adtTeamManager_CA Components Type Visibility Attributes Name Initial character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private :: m_chrTeamMembersFileName integer(kind=OOOGglob_kint), private :: m_intNumberOfTeamMembers = 0 integer(kind=OOOGglob_kint), private, DIMENSION (1:OOOGglob_TeamMembers_UpperBound) :: mA_intTeamMemberImages99 type(OOOEerroc_colError), private :: m_UUerrocError Description Functions public function IItemc_ImageNumberBoundError_CA (Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Subroutines public subroutine OOOPtemc_StructureConstructor (Object) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout) :: Object public subroutine OOOPtemcS_chrTeamMembersFileName_CA (Object_CA, chrTeamMembersFileName, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrTeamMembersFileName integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPtemcG_chrTeamMembersFileName_CA (Object_CA, chrTeamMembersFileName, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(out) :: chrTeamMembersFileName integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPtemcCopyImgToImg_chrTeamMembersFileName_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo public subroutine OOOPtemcS_intNumberOfTeamMembers_CA (Object_CA, intNumberOfTeamMembers, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intNumberOfTeamMembers integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPtemcG_intNumberOfTeamMembers_CA (Object_CA, intNumberOfTeamMembers, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out) :: intNumberOfTeamMembers integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPtemcCopyImgToImg_intNumberOfTeamMembers_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo public subroutine OOOPtemcSA_intTeamMemberImages99_CA (Object_CA, intTeamMemberImages99) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in), DIMENSION(1:OOOGglob_TeamMembers_UpperBound) :: intTeamMemberImages99 public subroutine OOOPtemcGA_intTeamMemberImages99_CA (Object_CA, intTeamMemberImages99) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out), DIMENSION(1:OOOGglob_TeamMembers_UpperBound) :: intTeamMemberImages99 public subroutine OOOPtemcCopyAImgToImg_intTeamMemberImages99_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo public subroutine OOOPtemcDC_CopyCoarrayObjImgToImg_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Description copy the properties: private subroutine IItemc_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPtemc_adtTeamManager_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber","tags":"","loc":"module/oooptemc_admteammanager_ca.html","title":"OOOPtemc_admTeamManager_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError OOOPtmec_admTeamMember_CA module~~oooptmem_admteammember~~UsesGraph module~oooptmem_admteammember OOOPtmem_admTeamMember module~oooptmec_admteammember_ca OOOPtmec_admTeamMember_CA module~oooptmec_admteammember_ca->module~oooptmem_admteammember module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~oooptmem_admteammember module~ooogglob_globals->module~oooptmec_admteammember_ca module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~oooeerro_admerror->module~oooptmem_admteammember module~oooeerro_admerror->module~oooptmec_admteammember_ca var panmoduleoooptmem_admteammemberUsesGraph = svgPanZoom('#moduleoooptmem_admteammemberUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPtmem Abstract Data Type (ADT):         OOOPtmem_adtTeamMember\n Abstract Data Type Module (adm):  OOOPtmem_admTeamMember.f90 Purpose:                    TeamMember-Object\n Language:                   mainly Fortran 95 with Fortran 2008 coarrays\n Programmer:                 Michael Siehl\n Date:                       January 2016 Naming Conventions: for scalar members:\n                             m: ADT member\n                             S: property set, G: property get,\n                             CopyImgToImg: copy an ADT member image to image\n  for array members:\n                             A: array\n                             mA: ADT array member\n                             SA: set array property, GA: get array property,\n                             CopyAImgToImg: copy an ADT array member image to image for elements of array members:\n                             SAElement: set only one array element property\n                             GAElement: get only one array element property\n                             CopyAElementImgToImg: copy only one element of an ADT array member image to image 99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: CA: coarray routine / coarray declaration\n                             _SYNC : synchronization routine\n                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object access routines for scalar *\n and static array members:  * access routines for dynamic     *\n array and derived type members: * access routines for the   *\n coarray wrapper member:   * ADT-Management: ** Program Logic: ** Error Handling: ** Enumerations:  ** Abstract Data Type Declaration: * * **** Corresponding Local Object Declaration: **** ** access routines for scalar   *\n and static array members:    * access routines for the   *\n coarray wrapper member:   * ADT-Management:  * Program Logic:   * * * Error Handling: * * * * * * * * * * * * _ _ _ _ _ _ _ _ __ Private Used By module~~oooptmem_admteammember~~UsedByGraph module~oooptmem_admteammember OOOPtmem_admTeamMember module~ooopimma_admimagemanager OOOPimma_admImageManager module~oooptmem_admteammember->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( OOOPtmem_adtTeamMember ), public, SAVE :: OOOPtmemTeamMember_1 Derived Types type, public :: OOOPtmem_adtTeamMember Components Type Visibility Attributes Name Initial type(OOOEerroc_colError), private :: m_UUerrocError Description Subroutines public subroutine OOOPtmem_StructureConstructor (Object) Arguments Type Intent Optional Attributes Name type( OOOPtmem_adtTeamMember ), intent(inout) :: Object public subroutine OOOPtmem_Start (Object) Arguments Type Intent Optional Attributes Name type( OOOPtmem_adtTeamMember ), intent(inout) :: Object private subroutine IItmem_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPtmem_adtTeamMember ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber","tags":"","loc":"module/oooptmem_admteammember.html","title":"OOOPtmem_admTeamMember â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Definition of global parameters/variables. Used By module~~ooogglob_globals~~UsedByGraph module~ooogglob_globals OOOGglob_Globals module~ooopimmc_admimagemanager_ca OOOPimmc_admImageManager_CA module~ooogglob_globals->module~ooopimmc_admimagemanager_ca module~ooopimsc_admimagestatus_ca OOOPimsc_admImageStatus_CA module~ooogglob_globals->module~ooopimsc_admimagestatus_ca module~oooptmem_admteammember OOOPtmem_admTeamMember module~ooogglob_globals->module~oooptmem_admteammember module~ooopimma_admimagemanager OOOPimma_admImageManager module~ooogglob_globals->module~ooopimma_admimagemanager module~ooopstpa_admstartpath OOOPstpa_admStartPath module~ooogglob_globals->module~ooopstpa_admstartpath module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~oooptema_admteammanager OOOPtema_admTeamManager module~ooogglob_globals->module~oooptema_admteammanager module~ooopinma_adminitialmanager OOOPinma_admInitialManager module~ooogglob_globals->module~ooopinma_adminitialmanager module~oooptemc_admteammanager_ca OOOPtemc_admTeamManager_CA module~ooogglob_globals->module~oooptemc_admteammanager_ca module~ooopinmc_adminitialmanager_ca OOOPinmc_admInitialManager_CA module~ooogglob_globals->module~ooopinmc_adminitialmanager_ca module~oooptmec_admteammember_ca OOOPtmec_admTeamMember_CA module~ooogglob_globals->module~oooptmec_admteammember_ca module~ooopimmc_admimagemanager_ca->module~ooopimma_admimagemanager proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage module~ooopimmc_admimagemanager_ca->proc~iiinma_activateteammanagerimage module~ooopimsc_admimagestatus_ca->module~ooopimmc_admimagemanager_ca module~ooopimsc_admimagestatus_ca->module~oooptema_admteammanager module~ooopimsc_admimagestatus_ca->proc~iiinma_activateteammanagerimage proc~ooopinma_start OOOPinma_Start module~ooopimsc_admimagestatus_ca->proc~ooopinma_start proc~oooptema_start OOOPtema_Start module~ooopimsc_admimagestatus_ca->proc~oooptema_start proc~oooptmem_start OOOPtmem_Start module~ooopimsc_admimagestatus_ca->proc~oooptmem_start proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag module~ooopimsc_admimagestatus_ca->proc~iiimma_sync_checkactivityflag proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage module~ooopimsc_admimagestatus_ca->proc~iitema_activateteammemberimage module~oooptmem_admteammember->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub module~ooopstpa_admstartpath->module~oooptema_admteammanager module~ooopstpa_admstartpath->module~ooopinma_adminitialmanager module~oooeerro_admerror->module~ooopimmc_admimagemanager_ca module~oooeerro_admerror->module~ooopimsc_admimagestatus_ca module~oooeerro_admerror->module~oooptmem_admteammember module~oooeerro_admerror->module~ooopimma_admimagemanager module~oooeerro_admerror->module~ooopstpa_admstartpath module~oooeerro_admerror->module~oooptema_admteammanager module~oooeerro_admerror->module~ooopinma_adminitialmanager module~oooeerro_admerror->module~oooptemc_admteammanager_ca module~oooeerro_admerror->module~ooopinmc_adminitialmanager_ca module~oooeerro_admerror->module~oooptmec_admteammember_ca module~oooptema_admteammanager->module~ooopimma_admimagemanager module~ooopinma_adminitialmanager->module~ooopimma_admimagemanager module~oooptemc_admteammanager_ca->module~oooptema_admteammanager module~ooopinmc_adminitialmanager_ca->module~ooopinma_adminitialmanager module~oooptmec_admteammember_ca->module~oooptmem_admteammember var panmoduleooogglob_globalsUsedByGraph = svgPanZoom('#moduleooogglob_globalsUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(kind=1,LEN=240), public :: OOOGglob_chrAppPath = '' Application Main Directory Path: integer, public, parameter :: OOOGglob_TeamManagers_UpperBound = 5 max number of TeamManagers integer, public, parameter :: OOOGglob_TeamMembers_UpperBound = 10 max number of TeamMembers per team integer, public, parameter :: OOOGglob_NumImages_UpperBound = 100 max number of images Stack Trace: character(kind=1,LEN=35), public, DIMENSION (1:50) :: OOOGglob_chrStackTrace Stack trace. integer(kind=4), public :: OOOGglob_intStackTraceCounter = 0 Stack trace counter. KIND values: integer, public, parameter :: OOOGglob_kint = 4 KIND for INTEGER integer, public, parameter :: OOOGglob_krea = 4 KIND for REAL integer, public, parameter :: OOOGglob_kcom = 4 KIND for COMPLEX integer, public, parameter :: OOOGglob_klog = 4 KIND for LOGICAL integer, public, parameter :: OOOGglob_kcha = 1 KIND for CHARACTER, 1=ASCII integer, public, parameter :: OOOGglob_Len40 = 40 LEN for CHARACTER integer, public, parameter :: OOOGglob_Len200 = 200 LEN for CHARACTER integer, public, parameter :: OOOGglob_Len240 = 240 LEN for CHARACTER integer, public, parameter :: OOOGglob_Len2400 = 2400 LEN for CHARACTER Input/Output-constants\n FILE UNITs: integer(kind=4), public, parameter :: OOOGglob_FileUnitA = 1 File unit A. integer(kind=4), public, parameter :: OOOGglob_FileUnitB = 2 File unit B. integer(kind=4), public, parameter :: OOOGglob_TracingFileUnit = 3 Trace file unit. integer(kind=4), public, parameter :: OOOGglob_StackTraceFileUnit = 4 Stack trace file unit. integer(kind=4), public, parameter :: OOOGglob_ErrorLogFileUnit = 7 Error log file unit. Error-Handling character(kind=1,LEN=40), public :: OOOGglob_chrCurrentProcedure = \"Main\" Error-handling, current procedure name. character(kind=1,LEN=40), public :: OOOGglob_chrCallingProcedure = \"User\" Error-handling, calling procedure name. character(kind=1,LEN=40), public :: OOOGglob_chrReturningProcedure = '' Error-handling, returning procedure name. character(kind=1,LEN=40), public :: OOOGglob_chrTempCallingProcedur = '' Error-handling, temporary calling procedure name. Error-Handling real(kind=4), public :: OOOGglob_reaNaN Error-handling, real NaN occurrence. real(kind=4), public :: OOOGglob_reaPositiveInfinity Error-handling, real positive infinity occurrence. real(kind=4), public :: OOOGglob_reaNegativeInfinity Error-handling, real negative infinity occurrence. Error-Handling integer(kind=4), public, parameter :: OOOGglob_warning = 1 Error-handling, warning code. integer(kind=4), public, parameter :: OOOGglob_error = 2 Error-handling, error code. integer(kind=4), public, parameter :: OOOGglob_NoErrNumber = 0 Error-handling, not an error code. Subroutines public subroutine OOOGglob_subSetProcedures (chrCurrentProcedure) Arguments Type Intent Optional Attributes Name character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrCurrentProcedure Current procedure name. Description Error-Handling and Tracing public subroutine OOOGglob_subResetProcedures () Arguments None Description Error-Handling and Tracing","tags":"","loc":"module/ooogglob_globals.html","title":"OOOGglob_Globals â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals module~~oooeerro_admerror~~UsesGraph module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~oooeerro_admerror Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. OOOEerro_admError definition. Used By module~~oooeerro_admerror~~UsedByGraph module~oooeerro_admerror OOOEerro_admError module~ooopimmc_admimagemanager_ca OOOPimmc_admImageManager_CA module~oooeerro_admerror->module~ooopimmc_admimagemanager_ca module~ooopimsc_admimagestatus_ca OOOPimsc_admImageStatus_CA module~oooeerro_admerror->module~ooopimsc_admimagestatus_ca module~oooptmem_admteammember OOOPtmem_admTeamMember module~oooeerro_admerror->module~oooptmem_admteammember module~ooopimma_admimagemanager OOOPimma_admImageManager module~oooeerro_admerror->module~ooopimma_admimagemanager module~ooopstpa_admstartpath OOOPstpa_admStartPath module~oooeerro_admerror->module~ooopstpa_admstartpath module~oooptema_admteammanager OOOPtema_admTeamManager module~oooeerro_admerror->module~oooptema_admteammanager module~ooopinma_adminitialmanager OOOPinma_admInitialManager module~oooeerro_admerror->module~ooopinma_adminitialmanager module~oooptemc_admteammanager_ca OOOPtemc_admTeamManager_CA module~oooeerro_admerror->module~oooptemc_admteammanager_ca module~ooopinmc_adminitialmanager_ca OOOPinmc_admInitialManager_CA module~oooeerro_admerror->module~ooopinmc_adminitialmanager_ca module~oooptmec_admteammember_ca OOOPtmec_admTeamMember_CA module~oooeerro_admerror->module~oooptmec_admteammember_ca module~ooopimmc_admimagemanager_ca->module~ooopimma_admimagemanager proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage module~ooopimmc_admimagemanager_ca->proc~iiinma_activateteammanagerimage module~ooopimsc_admimagestatus_ca->module~ooopimmc_admimagemanager_ca module~ooopimsc_admimagestatus_ca->module~oooptema_admteammanager module~ooopimsc_admimagestatus_ca->proc~iiinma_activateteammanagerimage proc~ooopinma_start OOOPinma_Start module~ooopimsc_admimagestatus_ca->proc~ooopinma_start proc~oooptema_start OOOPtema_Start module~ooopimsc_admimagestatus_ca->proc~oooptema_start proc~oooptmem_start OOOPtmem_Start module~ooopimsc_admimagestatus_ca->proc~oooptmem_start proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag module~ooopimsc_admimagestatus_ca->proc~iiimma_sync_checkactivityflag proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage module~ooopimsc_admimagestatus_ca->proc~iitema_activateteammemberimage module~oooptmem_admteammember->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub module~ooopstpa_admstartpath->module~oooptema_admteammanager module~ooopstpa_admstartpath->module~ooopinma_adminitialmanager module~oooptema_admteammanager->module~ooopimma_admimagemanager module~ooopinma_adminitialmanager->module~ooopimma_admimagemanager module~oooptemc_admteammanager_ca->module~oooptema_admteammanager module~ooopinmc_adminitialmanager_ca->module~ooopinma_adminitialmanager module~oooptmec_admteammember_ca->module~oooptmem_admteammember var panmoduleoooeerro_admerrorUsedByGraph = svgPanZoom('#moduleoooeerro_admerrorUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Derived Types type, public :: OOOEerroc_colError Description Errors handler class. Subroutines public subroutine OOOEerroc_AddObject (Collection, chrErrorDescription, intErrorType) Arguments Type Intent Optional Attributes Name type( OOOEerroc_colError ), intent(inout) :: Collection Error collection. character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrErrorDescription Error description. integer(kind=OOOGglob_kint), intent(in) :: intErrorType Error code.","tags":"","loc":"module/oooeerro_admerror.html","title":"OOOEerro_admError â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError OOOPimsc_admImageStatus_CA module~~ooopimmc_admimagemanager_ca~~UsesGraph module~ooopimmc_admimagemanager_ca OOOPimmc_admImageManager_CA module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~ooopimmc_admimagemanager_ca module~ooopimsc_admimagestatus_ca OOOPimsc_admImageStatus_CA module~ooogglob_globals->module~ooopimsc_admimagestatus_ca module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~ooopimsc_admimagestatus_ca->module~ooopimmc_admimagemanager_ca module~oooeerro_admerror->module~ooopimmc_admimagemanager_ca module~oooeerro_admerror->module~ooopimsc_admimagestatus_ca var panmoduleooopimmc_admimagemanager_caUsesGraph = svgPanZoom('#moduleooopimmc_admimagemanager_caUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPimmc Abstract Data Type (ADT):         OOOPimmc_adtImageManager_CA\n Abstract Data Type Module (adm):  OOOPimmc_admImageManager_CA.f90 Purpose:                    ImageManager_CA-Object\n Language:                   mainly Fortran 95 with Fortran 2008 coarrays\n Programmer:                 Michael Siehl\n Date:                       January 2016 Naming Conventions: for scalar members:\n                             m: ADT member\n                             S: property set, G: property get,\n                             CopyImgToImg: copy an ADT member image to image\n  for array members:\n                             A: array\n                             mA: ADT array member\n                             SA: set array property, GA: get array property,\n                             CopyAImgToImg: copy an ADT array member image to image for elements of array members:\n                             SAElement: set only one array element property\n                             GAElement: get only one array element property\n                             CopyAElementImgToImg: copy only one element of an ADT array member image to image 99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: CA: coarray routine / coarray declaration\n                             _SYNC : synchronization routine\n                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object Local ADT Routines: * * * * * access routines for scalar\n and static array members: **\n access routines for\n dynamic array members: **\n local ADT management: Coarray ADT Routines: * * * * * * *\n access routines for scalar\n and static array members: access routines for\n dynamic array members: **\n coarray ADT management: Error Handling: * * * * local ADT: coarray ADT: * * * Enumerations: * * * * Abstract Data Type Specification: * * * Corresponding Coarray Declarations: * * ** * * Local ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Local ADT Routines: * * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Local ADT Routines: * * * * * * * * * * * * local ADT management:  * * * Coarray ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Coarray ADT Routines: * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Coarray ADT Routines: * * * * * * * * * * * coarray ADT management: * * * Error Handling: * * * * * * * * * * * * _ _ _ _ _ _ _ _ __ Private Used By module~~ooopimmc_admimagemanager_ca~~UsedByGraph module~ooopimmc_admimagemanager_ca OOOPimmc_admImageManager_CA proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage module~ooopimmc_admimagemanager_ca->proc~iiinma_activateteammanagerimage module~ooopimma_admimagemanager OOOPimma_admImageManager module~ooopimmc_admimagemanager_ca->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( OOOPimmc_adtImageManager_CA ), public, CODIMENSION[*], SAVE :: OOOPimmcImageManager_CA_1 Derived Types type, public :: OOOPimmc_adtImageManager_CA Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), private :: m_intImageActivityFlag = OOOPimscEnum_ImageActivityFlag%InitialWaiting character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private :: m_chrTeamMembersFileName type(OOOEerroc_colError), private :: m_UUerrocError Description Functions public function IIimmc_ImageNumberBoundError_CA (Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Description Subroutines public subroutine OOOPimmc_StructureConstructor (Object) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout) :: Object public subroutine OOOPimmcS_intImageActivityFlag_CA (Object_CA, intImageActivityFlag, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageActivityFlag integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPimmcG_intImageActivityFlag_CA (Object_CA, intImageActivityFlag, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out) :: intImageActivityFlag integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPimmcCopyImgToImg_intImageActivityFlag_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo public subroutine OOOPimmcS_chrTeamMembersFileName_CA (Object_CA, chr_TeamMembersFileName, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chr_TeamMembersFileName integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPimmcG_chrTeamMembersFileName_CA (Object_CA, chr_TeamMembersFileName, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(out), DIMENSION(1) :: chr_TeamMembersFileName integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPimmcCopyImgToImg_chrTeamMembersFileName_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo public subroutine OOOPimmcDC_CopyCoarrayObjImgToImg_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Description copy the properties: private subroutine IIimmc_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPimmc_adtImageManager_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber","tags":"","loc":"module/ooopimmc_admimagemanager_ca.html","title":"OOOPimmc_admImageManager_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError OOOPstpa_admStartPath OOOPtemc_admTeamManager_CA OOOPimsc_admImageStatus_CA module~~oooptema_admteammanager~~UsesGraph module~oooptema_admteammanager OOOPtema_admTeamManager module~oooptemc_admteammanager_ca OOOPtemc_admTeamManager_CA module~oooptemc_admteammanager_ca->module~oooptema_admteammanager module~ooopstpa_admstartpath OOOPstpa_admStartPath module~ooopstpa_admstartpath->module~oooptema_admteammanager module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~oooptema_admteammanager module~ooogglob_globals->module~oooptemc_admteammanager_ca module~ooogglob_globals->module~ooopstpa_admstartpath module~ooopimsc_admimagestatus_ca OOOPimsc_admImageStatus_CA module~ooogglob_globals->module~ooopimsc_admimagestatus_ca module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~ooopimsc_admimagestatus_ca->module~oooptema_admteammanager module~oooeerro_admerror->module~oooptema_admteammanager module~oooeerro_admerror->module~oooptemc_admteammanager_ca module~oooeerro_admerror->module~ooopstpa_admstartpath module~oooeerro_admerror->module~ooopimsc_admimagestatus_ca var panmoduleoooptema_admteammanagerUsesGraph = svgPanZoom('#moduleoooptema_admteammanagerUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPtema Abstract Data Type (ADT):         OOOPtema_adtTeamManager\n Abstract Data Type Module (adm):  OOOPtema_admTeamManager.f90 Purpose:                    TeamManager-Object\n Language:                   mainly Fortran 95 with Fortran 2008 coarrays\n Programmer:                 Michael Siehl\n Date:                       January 2016 Naming Conventions: for scalar members:\n                             m: ADT member\n                             S: property set, G: property get,\n                             CopyImgToImg: copy an ADT member image to image\n  for array members:\n                             A: array\n                             mA: ADT array member\n                             SA: set array property, GA: get array property,\n                             CopyAImgToImg: copy an ADT array member image to image for elements of array members:\n                             SAElement: set only one array element property\n                             GAElement: get only one array element property\n                             CopyAElementImgToImg: copy only one element of an ADT array member image to image 99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: CA: coarray routine / coarray declaration\n                             _SYNC : synchronization routine\n                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object access routines for scalar *\n and static array members:  * access routines for dynamic     *\n array and derived type members: * access routines for the   *\n coarray wrapper member:   * ADT-Management: ** Program Logic: ** Error Handling: ** Enumerations:  ** Abstract Data Type Declaration: * * **** Corresponding Local Object Declaration: **** ** access routines for scalar   *\n and static array members:    * access routines for the   *\n coarray wrapper member:   * ADT-Management:  * Program Logic:   * * * Error Handling: * * * * * * * * * * * * _ _ _ _ _ _ _ _ __ Private Used By module~~oooptema_admteammanager~~UsedByGraph module~oooptema_admteammanager OOOPtema_admTeamManager module~ooopimma_admimagemanager OOOPimma_admImageManager module~oooptema_admteammanager->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( OOOPtema_adtTeamManager ), public, SAVE :: OOOPtemaTeamManager_1 Derived Types type, public :: OOOPtema_adtTeamManager Components Type Visibility Attributes Name Initial character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private :: m_chrTeamMembersFileName = \"\" integer(kind=OOOGglob_kint), private :: m_intNumberOfTeamMembers = 0 integer(kind=OOOGglob_kint), private, DIMENSION (1:OOOGglob_TeamMembers_UpperBound) :: mA_intTeamMemberImages99 type(OOOEerroc_colError), private :: m_UUerrocError Description Subroutines public subroutine OOOPtemaS_chrTeamMembersFileName (Object, chrTeamMembersFileName) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrTeamMembersFileName public subroutine OOOPtemaG_chrTeamMembersFileName (Object, chrTeamMembersFileName) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(in) :: Object character(kind=OOOGglob_kcha,LEN=*), intent(out) :: chrTeamMembersFileName public subroutine OOOPtemaS_intNumberOfTeamMembers (Object, intNumberOfTeamMembers) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object integer(kind=OOOGglob_kint), intent(in) :: intNumberOfTeamMembers public subroutine OOOPtemaG_intNumberOfTeamMembers (Object, intNumberOfTeamMembers) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(in) :: Object integer(kind=OOOGglob_kint), intent(out) :: intNumberOfTeamMembers public subroutine OOOPtema_StructureConstructor (Object) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object public subroutine OOOPtema_Start (Object, chrTeamMembersFileName) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), intent(in) :: chrTeamMembersFileName private subroutine IItema_LoadTeamMembers (Object) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object private subroutine IItema_ActivateTeamMemberImage (Object, intTeamMemberImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object integer(kind=OOOGglob_kint), intent(in) :: intTeamMemberImageNumber private subroutine IItema_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPtema_adtTeamManager ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber","tags":"","loc":"module/oooptema_admteammanager.html","title":"OOOPtema_admTeamManager â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError module~~ooopstpa_admstartpath~~UsesGraph module~ooopstpa_admstartpath OOOPstpa_admStartPath module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~ooopstpa_admstartpath module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~oooeerro_admerror->module~ooopstpa_admstartpath Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPstpa Abstract Data Type (ADT):         OOOPstpa_adtStartPath\n Abstract Data Type Module (adm):  OOOPstpa_admStartPath.f90 Purpose:                    StartPath-Object\n Language:                   mainly Fortran 95 with Fortran 2008 coarrays\n Programmer:                 Michael Siehl\n Date:                       January 2016 Naming Conventions: for scalar members:\n                             m: ADT member\n                             S: property set, G: property get,\n                             CopyImgToImg: copy an ADT member image to image\n  for array members:\n                             A: array\n                             mA: ADT array member\n                             SA: set array property, GA: get array property,\n                             CopyAImgToImg: copy an ADT array member image to image for elements of array members:\n                             SAElement: set only one array element property\n                             GAElement: get only one array element property\n                             CopyAElementImgToImg: copy only one element of an ADT array member image to image 99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: CA: coarray routine / coarray declaration\n                             _SYNC : synchronization routine\n                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object access routines for scalar *\n and static array members:  * Program Logic: ** Error Handling: ** Abstract Data Type Declaration: * * **** access routines for scalar   *\n and static array members:    * Program Logic:   * * * Error Handling: * * * * * * * * * * * * _ _ _ _ _ _ _ _ __\nPrivate Used By module~~ooopstpa_admstartpath~~UsedByGraph module~ooopstpa_admstartpath OOOPstpa_admStartPath module~oooptema_admteammanager OOOPtema_admTeamManager module~ooopstpa_admstartpath->module~oooptema_admteammanager module~ooopinma_adminitialmanager OOOPinma_admInitialManager module~ooopstpa_admstartpath->module~ooopinma_adminitialmanager module~ooopimma_admimagemanager OOOPimma_admImageManager module~oooptema_admteammanager->module~ooopimma_admimagemanager module~ooopinma_adminitialmanager->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub var panmoduleooopstpa_admstartpathUsedByGraph = svgPanZoom('#moduleooopstpa_admstartpathUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Derived Types type, public :: OOOPstpa_adtStartPath Components Type Visibility Attributes Name Initial character(kind=OOOGglob_kcha,LEN=OOOGglob_Len200), private :: m_chrPath = \"\" type(OOOEerroc_colError), private :: m_UUerrocError Description Subroutines public subroutine OOOPstpaS_chrPath (Object, chrPath) Arguments Type Intent Optional Attributes Name type( OOOPstpa_adtStartPath ), intent(inout) :: Object character(kind=OOOGglob_kcha,LEN=*), intent(in) :: chrPath public subroutine OOOPstpaG_chrPath (Object, chrPath) Arguments Type Intent Optional Attributes Name type( OOOPstpa_adtStartPath ), intent(in) :: Object character(kind=OOOGglob_kcha,LEN=*), intent(out) :: chrPath public subroutine OOOPstpa_LoadPath (Object) Arguments Type Intent Optional Attributes Name type( OOOPstpa_adtStartPath ), intent(inout) :: Object private subroutine IIstpa_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPstpa_adtStartPath ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber","tags":"","loc":"module/ooopstpa_admstartpath.html","title":"OOOPstpa_admStartPath â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: OOOGglob_Globals OOOEerro_admError module~~ooopinmc_adminitialmanager_ca~~UsesGraph module~ooopinmc_adminitialmanager_ca OOOPinmc_admInitialManager_CA module~ooogglob_globals OOOGglob_Globals module~ooogglob_globals->module~ooopinmc_adminitialmanager_ca module~oooeerro_admerror OOOEerro_admError module~ooogglob_globals->module~oooeerro_admerror module~oooeerro_admerror->module~ooopinmc_adminitialmanager_ca Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Namespace: OOOP - Parallel Abstact Data Type Short Name: OOOPinmc Abstract Data Type (ADT):         OOOPinmc_adtInitialManager_CA\n Abstract Data Type Module (adm):  OOOPinmc_admInitialManager_CA.f90 Purpose:                    InitialManager_CA-Object\n Language:                   mainly Fortran 95 with Fortran 2008 coarrays\n Programmer:                 Michael Siehl\n Date:                       January 2016 Naming Conventions: for scalar members:\n                             m: ADT member\n                             S: property set, G: property get,\n                             CopyImgToImg: copy an ADT member image to image\n  for array members:\n                             A: array\n                             mA: ADT array member\n                             SA: set array property, GA: get array property,\n                             CopyAImgToImg: copy an ADT array member image to image for elements of array members:\n                             SAElement: set only one array element property\n                             GAElement: get only one array element property\n                             CopyAElementImgToImg: copy only one element of an ADT array member image to image 99: signals a static array member which has an upper array bound\n                             larger than necessary; the upper bound is given by a global parameter other naming conventions: CA: coarray routine / coarray declaration\n                             _SYNC : synchronization routine\n                             CopyCoarrayObjImgToImg: copy a coarray ADT object image to image DC: deep copy routine\n                         Enum: enumeration\n\n                         OO: public (outer) scope (the two leading namespace letters)\n                         II: private (inner) scope\n                         UU: sub-object Local ADT Routines: * * * * * access routines for scalar\n and static array members: **\n access routines for\n dynamic array members: **\n local ADT management: Coarray ADT Routines: * * * * * * *\n access routines for scalar\n and static array members: access routines for\n dynamic array members: **\n coarray ADT management: Error Handling: * * * * local ADT: coarray ADT: * * * Enumerations: * * * * Abstract Data Type Specification: * * * Corresponding Coarray Declarations: * * ** * * Local ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Local ADT Routines: * * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Local ADT Routines: * * * * * * * * * * * * local ADT management:  * * * Coarray ADT Routines: * * * * * * * * * * * * access routines for scalar   *\n and static array members:    * * * Coarray ADT Routines: * * * * * * * * * * * access routines for      *\n dynamic array members:   * * * Coarray ADT Routines: * * * * * * * * * * * coarray ADT management: * * * Error Handling: * * * * * * * * * * * * _ _ _ _ _ _ _ _ __ Private Used By module~~ooopinmc_adminitialmanager_ca~~UsedByGraph module~ooopinmc_adminitialmanager_ca OOOPinmc_admInitialManager_CA module~ooopinma_adminitialmanager OOOPinma_admInitialManager module~ooopinmc_adminitialmanager_ca->module~ooopinma_adminitialmanager module~ooopimma_admimagemanager OOOPimma_admImageManager module~ooopinma_adminitialmanager->module~ooopimma_admimagemanager proc~entry_main_sub Entry_Main_Sub module~ooopimma_admimagemanager->proc~entry_main_sub var panmoduleooopinmc_adminitialmanager_caUsedByGraph = svgPanZoom('#moduleooopinmc_adminitialmanager_caUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( OOOPinmc_adtInitialManager_CA ), public, CODIMENSION[*], SAVE :: OOOPinmcInitialManager_CA_1 Derived Types type, public :: OOOPinmc_adtInitialManager_CA Components Type Visibility Attributes Name Initial integer(kind=OOOGglob_kint), private :: m_intNumberOfTeamManagers = 0 integer(kind=OOOGglob_kint), private, DIMENSION (1:OOOGglob_TeamManagers_UpperBound) :: mA_intTeamManagerImages99 character(kind=OOOGglob_kcha,LEN=OOOGglob_Len40), private, DIMENSION (1:OOOGglob_TeamManagers_UpperBound) :: mA_chrTeamMembersFiles99 type(OOOEerroc_colError), private :: m_UUerrocError Description Functions private function IIinmc_ImageNumberBoundError_CA (Object_CA, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumber Return Value logical(kind=OOOGglob_klog) Subroutines public subroutine OOOPinmc_StructureConstructor (Object) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout) :: Object public subroutine OOOPinmcS_intNumberOfTeamManagers_CA (Object_CA, intNumberOfTeamManagers, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intNumberOfTeamManagers integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPinmcG_intNumberOfTeamManagers_CA (Object_CA, intNumberOfTeamManagers, intImageNumber) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out) :: intNumberOfTeamManagers integer(kind=OOOGglob_kint), intent(in) :: intImageNumber public subroutine OOOPinmcCopyImgToImg_intNumberOfTeamManagers_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo public subroutine OOOPinmcSA_intTeamManagerImages99_CA (Object_CA, intTeamManagerImages99) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in), DIMENSION(1:OOOGglob_TeamManagers_UpperBound) :: intTeamManagerImages99 public subroutine OOOPinmcGA_intTeamManagerImages99_CA (Object_CA, intTeamManagerImages99) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(out), DIMENSION(1:OOOGglob_TeamManagers_UpperBound) :: intTeamManagerImages99 public subroutine OOOPinmcCopyAImgToImg_intTeamManagerImages99_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo public subroutine OOOPinmcSA_chrTeamMembersFiles99_CA (Object_CA, chrTeamMembersFiles99) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(in), DIMENSION(1:OOOGglob_TeamManagers_UpperBound) :: chrTeamMembersFiles99 public subroutine OOOPinmcGA_chrTeamMembersFiles99_CA (Object_CA, chrTeamMembersFiles99) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA character(kind=OOOGglob_kcha,LEN=*), intent(out), DIMENSION(1:OOOGglob_TeamManagers_UpperBound) :: chrTeamMembersFiles99 public subroutine OOOPinmcCopyAImgToImg_chrTeamMembersFiles99_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo public subroutine OOOPinmcDC_CopyCoarrayObjImgToImg_CA (Object_CA, intImageNumberToCopyFrom, intImageNumberToCopyTo) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout), CODIMENSION[*] :: Object_CA integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyFrom integer(kind=OOOGglob_kint), intent(in) :: intImageNumberToCopyTo Description copy the properties: private subroutine IIinmc_ErrorHandler (Object, chrErrorDescription, intErrorType, intErrorNumber) Arguments Type Intent Optional Attributes Name type( OOOPinmc_adtInitialManager_CA ), intent(inout) :: Object character(kind=1,LEN=*), intent(in) :: chrErrorDescription integer(kind=OOOGglob_kint), intent(in) :: intErrorType integer(kind=OOOGglob_kint), intent(in) :: intErrorNumber","tags":"","loc":"module/ooopinmc_adminitialmanager_ca.html","title":"OOOPinmc_admInitialManager_CA â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Entry_Main_Sub definition. Used By module~~main_sub~~UsedByGraph module~main_sub Main_Sub program~main Main module~main_sub->program~main Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Subroutines public subroutine Entry_Main_Sub () Arguments None Description Main entry subroutine.","tags":"","loc":"module/main_sub.html","title":"Main_Sub â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"},{"text":"Uses: Main_Sub program~~main~~UsesGraph program~main Main module~main_sub Main_Sub module~main_sub->program~main Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Main program entry. Calls program~~main~~CallsGraph program~main Main proc~entry_main_sub Entry_Main_Sub program~main->proc~entry_main_sub proc~ooopimma_start OOOPimma_Start proc~entry_main_sub->proc~ooopimma_start proc~ooopinma_start OOOPinma_Start proc~ooopimma_start->proc~ooopinma_start proc~ooogglob_subsetprocedures OOOGglob_subSetProcedures proc~ooopimma_start->proc~ooogglob_subsetprocedures proc~ooogglob_subresetprocedures OOOGglob_subResetProcedures proc~ooopimma_start->proc~ooogglob_subresetprocedures images images proc~ooopimma_start->images proc~ooopimma_structureconstructor OOOPimma_StructureConstructor proc~ooopimma_start->proc~ooopimma_structureconstructor proc~iiimma_sync_checkactivityflag IIimma_SYNC_CheckActivityFlag proc~ooopimma_start->proc~iiimma_sync_checkactivityflag proc~ooopinma_start->proc~ooogglob_subsetprocedures proc~ooopinma_start->proc~ooogglob_subresetprocedures ma_intteammanagerimages99 ma_intteammanagerimages99 proc~ooopinma_start->ma_intteammanagerimages99 proc~ooopinma_structureconstructor OOOPinma_StructureConstructor proc~ooopinma_start->proc~ooopinma_structureconstructor proc~ooopimscs_intimageactivityflag_ca OOOPimscS_intImageActivityFlag_CA proc~ooopinma_start->proc~ooopimscs_intimageactivityflag_ca proc~iiinma_activateteammanagerimage IIinma_ActivateTeamManagerImage proc~ooopinma_start->proc~iiinma_activateteammanagerimage proc~iiinma_loadteammanagers IIinma_LoadTeamManagers proc~ooopinma_start->proc~iiinma_loadteammanagers ma_chrteammembersfiles99 ma_chrteammembersfiles99 proc~ooopinma_start->ma_chrteammembersfiles99 proc~ooopimma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopimma_structureconstructor->proc~ooogglob_subresetprocedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subsetprocedures proc~iiimma_sync_checkactivityflag->proc~ooogglob_subresetprocedures proc~oooptema_start OOOPtema_Start proc~iiimma_sync_checkactivityflag->proc~oooptema_start proc~ooopimscg_intimageactivityflag_ca OOOPimscG_intImageActivityFlag_CA proc~iiimma_sync_checkactivityflag->proc~ooopimscg_intimageactivityflag_ca proc~ooopimmcg_chrteammembersfilename_ca OOOPimmcG_chrTeamMembersFileName_CA proc~iiimma_sync_checkactivityflag->proc~ooopimmcg_chrteammembersfilename_ca proc~oooptmem_start OOOPtmem_Start proc~iiimma_sync_checkactivityflag->proc~oooptmem_start proc~ooopinma_structureconstructor->proc~ooogglob_subsetprocedures proc~ooopinma_structureconstructor->proc~ooogglob_subresetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscs_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~iiimsc_errorhandler IIimsc_ErrorHandler proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~iiimsc_imagenumberbounderror_ca IIimsc_ImageNumberBoundError_CA proc~ooopimscs_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~iiinma_activateteammanagerimage->proc~ooogglob_subsetprocedures proc~iiinma_activateteammanagerimage->proc~ooogglob_subresetprocedures proc~iiinma_activateteammanagerimage->proc~ooopimscs_intimageactivityflag_ca proc~ooopimmcs_chrteammembersfilename_ca OOOPimmcS_chrTeamMembersFileName_CA proc~iiinma_activateteammanagerimage->proc~ooopimmcs_chrteammembersfilename_ca proc~ooopimsc_structureconstructor_ca OOOPimsc_StructureConstructor_CA proc~iiinma_activateteammanagerimage->proc~ooopimsc_structureconstructor_ca proc~iiinma_loadteammanagers->proc~ooogglob_subsetprocedures proc~iiinma_loadteammanagers->proc~ooogglob_subresetprocedures proc~iiinma_loadteammanagers->ma_intteammanagerimages99 proc~iiinma_loadteammanagers->ma_chrteammembersfiles99 proc~ooopstpag_chrpath OOOPstpaG_chrPath proc~iiinma_loadteammanagers->proc~ooopstpag_chrpath proc~iiinma_errorhandler IIinma_ErrorHandler proc~iiinma_loadteammanagers->proc~iiinma_errorhandler proc~ooopinmas_intnumberofteammanagers OOOPinmaS_intNumberOfTeamManagers proc~iiinma_loadteammanagers->proc~ooopinmas_intnumberofteammanagers proc~ooopstpa_loadpath OOOPstpa_LoadPath proc~iiinma_loadteammanagers->proc~ooopstpa_loadpath proc~oooeerroc_addobject OOOEerroc_AddObject proc~iiimsc_errorhandler->proc~oooeerroc_addobject proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmcs_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~iiimmc_imagenumberbounderror_ca IIimmc_ImageNumberBoundError_CA proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~iiimmc_errorhandler IIimmc_ErrorHandler proc~ooopimmcs_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subsetprocedures proc~ooopimsc_structureconstructor_ca->proc~ooogglob_subresetprocedures proc~iiimmc_errorhandler->proc~oooeerroc_addobject proc~ooopstpag_chrpath->proc~ooogglob_subsetprocedures proc~ooopstpag_chrpath->proc~ooogglob_subresetprocedures proc~iiinma_errorhandler->proc~oooeerroc_addobject proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subsetprocedures proc~ooopinmas_intnumberofteammanagers->proc~ooogglob_subresetprocedures proc~ooopinmas_intnumberofteammanagers->proc~iiinma_errorhandler proc~ooopstpa_loadpath->proc~ooogglob_subsetprocedures proc~ooopstpa_loadpath->proc~ooogglob_subresetprocedures proc~iistpa_errorhandler IIstpa_ErrorHandler proc~ooopstpa_loadpath->proc~iistpa_errorhandler proc~iistpa_errorhandler->proc~oooeerroc_addobject proc~oooptema_start->proc~ooogglob_subsetprocedures proc~oooptema_start->proc~ooogglob_subresetprocedures proc~oooptema_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptemas_chrteammembersfilename OOOPtemaS_chrTeamMembersFileName proc~oooptema_start->proc~oooptemas_chrteammembersfilename proc~oooptema_structureconstructor OOOPtema_StructureConstructor proc~oooptema_start->proc~oooptema_structureconstructor ma_intteammemberimages99 ma_intteammemberimages99 proc~oooptema_start->ma_intteammemberimages99 proc~iitema_activateteammemberimage IItema_ActivateTeamMemberImage proc~oooptema_start->proc~iitema_activateteammemberimage proc~iitema_loadteammembers IItema_LoadTeamMembers proc~oooptema_start->proc~iitema_loadteammembers proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subsetprocedures proc~ooopimscg_intimageactivityflag_ca->proc~ooogglob_subresetprocedures proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_errorhandler proc~ooopimscg_intimageactivityflag_ca->proc~iiimsc_imagenumberbounderror_ca proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subsetprocedures proc~ooopimmcg_chrteammembersfilename_ca->proc~ooogglob_subresetprocedures proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_imagenumberbounderror_ca proc~ooopimmcg_chrteammembersfilename_ca->proc~iiimmc_errorhandler proc~oooptmem_start->proc~ooogglob_subsetprocedures proc~oooptmem_start->proc~ooogglob_subresetprocedures proc~oooptmem_start->proc~ooopimscs_intimageactivityflag_ca proc~oooptmem_structureconstructor OOOPtmem_StructureConstructor proc~oooptmem_start->proc~oooptmem_structureconstructor proc~oooptemas_chrteammembersfilename->proc~ooogglob_subsetprocedures proc~oooptemas_chrteammembersfilename->proc~ooogglob_subresetprocedures proc~oooptema_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptema_structureconstructor->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subsetprocedures proc~iitema_activateteammemberimage->proc~ooogglob_subresetprocedures proc~iitema_activateteammemberimage->proc~ooopimscs_intimageactivityflag_ca proc~iitema_loadteammembers->proc~ooogglob_subsetprocedures proc~iitema_loadteammembers->proc~ooogglob_subresetprocedures proc~iitema_loadteammembers->proc~ooopstpag_chrpath proc~iitema_loadteammembers->proc~ooopstpa_loadpath proc~iitema_loadteammembers->ma_intteammemberimages99 proc~iitema_errorhandler IItema_ErrorHandler proc~iitema_loadteammembers->proc~iitema_errorhandler proc~oooptemas_intnumberofteammembers OOOPtemaS_intNumberOfTeamMembers proc~iitema_loadteammembers->proc~oooptemas_intnumberofteammembers proc~iitema_errorhandler->proc~oooeerroc_addobject proc~oooptemas_intnumberofteammembers->proc~ooogglob_subsetprocedures proc~oooptemas_intnumberofteammembers->proc~ooogglob_subresetprocedures proc~oooptemas_intnumberofteammembers->proc~iitema_errorhandler proc~oooptmem_structureconstructor->proc~ooogglob_subsetprocedures proc~oooptmem_structureconstructor->proc~ooogglob_subresetprocedures var panprogrammainCallsGraph = svgPanZoom('#programmainCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code PROGRAM Main !< Main program entry. ! USE Main_Sub ! CALL Entry_Main_Sub () ! END PROGRAM Main","tags":"","loc":"program/main.html","title":"Main â€“ MPMD-with-Coarray-Fortran-Load-Balancing-Example-Program"}]}